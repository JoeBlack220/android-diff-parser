Find a functionally equivalent code:android.content.Intent.migrateExtraStreamToClipData:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * Migrate any {@link #EXTRA_STREAM} in {@link #ACTION_SEND} and
 * {@link #ACTION_SEND_MULTIPLE} to {@link ClipData}. Also inspects nested
 * intents in {@link #ACTION_CHOOSER}.
 *
 * @return Whether any contents were migrated.
 * @hide
 */

@@ -7,26 +7,37 @@
         return false;
     final String action = getAction();
     if (ACTION_CHOOSER.equals(action)) {
+        // Inspect contained intents to see if we need to migrate extras. We
+        // don't promote ClipData to the parent, since ChooserActivity will
+        // already start the picked item as the caller, and we can't combine
+        // the flags in a safe way.
+        boolean migrated = false;
         try {
-            // Inspect target intent to see if we need to migrate
-            final Intent target = getParcelableExtra(EXTRA_INTENT);
-            if (target != null && target.migrateExtraStreamToClipData()) {
-                // Since we migrated in child, we need to promote ClipData
-                // and flags to ourselves to grant.
-                setClipData(target.getClipData());
-                addFlags(target.getFlags() & (FLAG_GRANT_READ_URI_PERMISSION | FLAG_GRANT_WRITE_URI_PERMISSION | FLAG_GRANT_PERSISTABLE_URI_PERMISSION));
-                return true;
-            } else {
-                return false;
+            final Intent intent = getParcelableExtra(EXTRA_INTENT);
+            if (intent != null) {
+                migrated |= intent.migrateExtraStreamToClipData();
+            }
+        } catch (ClassCastException e) {
+        }
+        try {
+            final Parcelable[] intents = getParcelableArrayExtra(EXTRA_INITIAL_INTENTS);
+            if (intents != null) {
+                for (int i = 0; i < intents.length; i++) {
+                    final Intent intent = (Intent) intents[i];
+                    if (intent != null) {
+                        migrated |= intent.migrateExtraStreamToClipData();
+                    }
+                }
             }
         } catch (ClassCastException e) {
         }
+        return migrated;
     } else if (ACTION_SEND.equals(action)) {
         try {
             final Uri stream = getParcelableExtra(EXTRA_STREAM);
@@ -68,73 +79,96 @@
             }
         } catch (ClassCastException e) {
         }
+    } else if (MediaStore.ACTION_IMAGE_CAPTURE.equals(action) || MediaStore.ACTION_IMAGE_CAPTURE_SECURE.equals(action) || MediaStore.ACTION_VIDEO_CAPTURE.equals(action)) {
+        final Uri output;
+        try {
+            output = getParcelableExtra(MediaStore.EXTRA_OUTPUT);
+        } catch (ClassCastException e) {
+            return false;
+        }
+        if (output != null) {
+            setClipData(ClipData.newRawUri("", output));
+            addFlags(FLAG_GRANT_WRITE_URI_PERMISSION | FLAG_GRANT_READ_URI_PERMISSION);
+            return true;
+        }
     }
     return false;
 }

