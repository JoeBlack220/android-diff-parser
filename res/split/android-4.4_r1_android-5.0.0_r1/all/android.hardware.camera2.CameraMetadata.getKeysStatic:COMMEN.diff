Find a functionally equivalent code:android.hardware.camera2.CameraMetadata.getKeysStatic:COMMENT
Method Modifier: default     static      
Comment:/*package*/

@@ -1,19 +1,35 @@
 {
-    ArrayList<Key<?>> keyList = new ArrayList<Key<?>>();
+    if (VERBOSE)
+        Log.v(TAG, "getKeysStatic for " + type);
+    // TotalCaptureResult does not have any of the keys on it, use CaptureResult instead
+    if (type.equals(TotalCaptureResult.class)) {
+        type = CaptureResult.class;
+    }
+    if (filterTags != null) {
+        Arrays.sort(filterTags);
+    }
+    ArrayList<TKey> keyList = new ArrayList<TKey>();
     Field[] fields = type.getDeclaredFields();
     for (Field field : fields) {
         // Filter for Keys that are public
-        if (field.getType().isAssignableFrom(Key.class) && (field.getModifiers() & Modifier.PUBLIC) != 0) {
-            Key<?> key;
+        if (field.getType().isAssignableFrom(keyClass) && (field.getModifiers() & Modifier.PUBLIC) != 0) {
+            TKey key;
             try {
-                key = (Key<?>) field.get(instance);
+                key = (TKey) field.get(instance);
             } catch (IllegalAccessException e) {
                 throw new AssertionError("Can't get IllegalAccessException", e);
             } catch (IllegalArgumentException e) {
                 throw new AssertionError("Can't get IllegalArgumentException", e);
             }
-            if (instance == null || instance.get(key) != null) {
-                keyList.add(key);
+            if (instance == null || instance.getProtected(key) != null) {
+                if (shouldKeyBeAdded(key, field, filterTags)) {
+                    keyList.add(key);
+                    if (VERBOSE) {
+                        Log.v(TAG, "getKeysStatic - key was added - " + key);
+                    }
+                } else if (VERBOSE) {
+                    Log.v(TAG, "getKeysStatic - key was filtered - " + key);
+                }
             }
         }
     }

