Find a functionally equivalent code:android.view.accessibility.AccessibilityManager.sendAccessibilityEvent:COMMENT
Method Modifier: public      
Comment:/**
 * Sends an {@link AccessibilityEvent}.
 *
 * @param event The event to send.
 *
 * @throws IllegalStateException if accessibility is not enabled.
 *
 * <strong>Note:</strong> The preferred mechanism for sending custom accessibility
 * events is through calling
 * {@link android.view.ViewParent#requestSendAccessibilityEvent(View, AccessibilityEvent)}
 * instead of this method to allow predecessors to augment/filter events sent by
 * their descendants.
 */

@@ -1,6 +1,15 @@
 {
-    if (!mIsEnabled) {
-        throw new IllegalStateException("Accessibility off. Did you forget to check that?");
+    final IAccessibilityManager service;
+    final int userId;
+    synchronized (mLock) {
+        service = getServiceLocked();
+        if (service == null) {
+            return;
+        }
+        if (!mIsEnabled) {
+            throw new IllegalStateException("Accessibility off. Did you forget to check that?");
+        }
+        userId = mUserId;
     }
     boolean doRecycle = false;
     try {
@@ -9,15 +18,24 @@
         // client using it is called through Binder from another process. Example: MMS
         // app adds a SMS notification and the NotificationManagerService calls this method
         long identityToken = Binder.clearCallingIdentity();
-        doRecycle = mService.sendAccessibilityEvent(event, mUserId);
+        doRecycle = service.sendAccessibilityEvent(event, userId);
         Binder.restoreCallingIdentity(identityToken);
         if (DEBUG) {
             Log.i(LOG_TAG, event + " sent");

