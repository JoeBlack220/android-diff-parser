Find a functionally equivalent code:android.view.textservice.TextServicesManager.newSpellCheckerSession:COMMENT
Method Modifier: public      
Comment:/**
 * Get a spell checker session for the specified spell checker
 * @param locale the locale for the spell checker. If {@code locale} is null and
 * referToSpellCheckerLanguageSettings is true, the locale specified in Settings will be
 * returned. If {@code locale} is not null and referToSpellCheckerLanguageSettings is true,
 * the locale specified in Settings will be returned only when it is same as {@code locale}.
 * Exceptionally, when referToSpellCheckerLanguageSettings is true and {@code locale} is
 * only language (e.g. "en"), the specified locale in Settings (e.g. "en_US") will be
 * selected.
 * @param listener a spell checker session lister for getting results from a spell checker.
 * @param referToSpellCheckerLanguageSettings if true, the session for one of enabled
 * languages in settings will be returned.
 * @return the spell checker session of the spell checker
 */

@@ -25,32 +25,32 @@
         }
         if (locale != null) {
             final String subtypeLocale = subtypeInUse.getLocale();
-            final String inputLocale = locale.toString();
-            if (subtypeLocale.length() < 2 || inputLocale.length() < 2 || !subtypeLocale.substring(0, 2).equals(inputLocale.substring(0, 2))) {
+            final String subtypeLanguage = parseLanguageFromLocaleString(subtypeLocale);
+            if (subtypeLanguage.length() < 2 || !locale.getLanguage().equals(subtypeLanguage)) {
                 return null;
             }
         }
@@ -35,44 +35,45 @@
         for (int i = 0; i < sci.getSubtypeCount(); ++i) {
             final SpellCheckerSubtype subtype = sci.getSubtypeAt(i);
             final String tempSubtypeLocale = subtype.getLocale();
+            final String tempSubtypeLanguage = parseLanguageFromLocaleString(tempSubtypeLocale);
             if (tempSubtypeLocale.equals(localeStr)) {
                 subtypeInUse = subtype;
                 break;
-            } else if (localeStr.length() >= 2 && tempSubtypeLocale.length() >= 2 && localeStr.startsWith(tempSubtypeLocale)) {
+            } else if (tempSubtypeLanguage.length() >= 2 && locale.getLanguage().equals(tempSubtypeLanguage)) {
                 subtypeInUse = subtype;
             }
         }

