Find a functionally equivalent code:com.android.server.content.SyncStorageEngineTest.testPeriodicsV2:COMMENT
Method Modifier: public      
Comment:/**
 * Test that we can create, remove and retrieve periodic syncs with a provided flex time.
 */

@@ -10,44 +10,50 @@
     final int period2 = 1000;
     final int flex1 = 10;
     final int flex2 = 100;
+    EndPoint point1 = new EndPoint(account1, authority, 0);
+    EndPoint point2 = new EndPoint(account2, authority, 0);
+    EndPoint point1User2 = new EndPoint(account1, authority, 1);
     PeriodicSync sync1 = new PeriodicSync(account1, authority, extras1, period1, flex1);
     PeriodicSync sync2 = new PeriodicSync(account1, authority, extras2, period1, flex1);
     PeriodicSync sync3 = new PeriodicSync(account1, authority, extras2, period2, flex2);
     PeriodicSync sync4 = new PeriodicSync(account2, authority, extras2, period2, flex2);
+    EndPoint target1 = new EndPoint(account1, authority, 0);
+    EndPoint target2 = new EndPoint(account2, authority, 0);
+    EndPoint target1UserB = new EndPoint(account1, authority, 1);
     MockContentResolver mockResolver = new MockContentResolver();
     SyncStorageEngine engine = SyncStorageEngine.newTestInstance(new TestContext(mockResolver, getContext()));
     removePeriodicSyncs(engine, account1, 0, authority);
     removePeriodicSyncs(engine, account2, 0, authority);
     removePeriodicSyncs(engine, account1, 1, authority);
     // This should add two distinct periodic syncs for account1 and one for account2
-    engine.addPeriodicSync(sync1, 0);
-    engine.addPeriodicSync(sync2, 0);
-    // Should edit sync2 and update the period.
-    engine.addPeriodicSync(sync3, 0);
-    engine.addPeriodicSync(sync4, 0);
-    // add a second user
-    engine.addPeriodicSync(sync2, 1);
-    List<PeriodicSync> syncs = engine.getPeriodicSyncs(account1, 0, authority);
+    engine.updateOrAddPeriodicSync(target1, period1, flex1, extras1);
+    engine.updateOrAddPeriodicSync(target1, period1, flex1, extras2);
+    // Edit existing sync and update the period and flex.
+    engine.updateOrAddPeriodicSync(target1, period2, flex2, extras2);
+    engine.updateOrAddPeriodicSync(target2, period2, flex2, extras2);
+    // add a target for a second user.
+    engine.updateOrAddPeriodicSync(target1UserB, period1, flex1, extras2);
+    List<PeriodicSync> syncs = engine.getPeriodicSyncs(target1);
     assertEquals(2, syncs.size());
     assertEquals(sync1, syncs.get(0));
     assertEquals(sync3, syncs.get(1));
-    engine.removePeriodicSync(sync1, 0);
-    syncs = engine.getPeriodicSyncs(account1, 0, authority);
+    engine.removePeriodicSync(target1, extras1);
+    syncs = engine.getPeriodicSyncs(target1);
     assertEquals(1, syncs.size());
     assertEquals(sync3, syncs.get(0));
-    syncs = engine.getPeriodicSyncs(account2, 0, authority);
+    syncs = engine.getPeriodicSyncs(target2);
     assertEquals(1, syncs.size());
     assertEquals(sync4, syncs.get(0));
-    syncs = engine.getPeriodicSyncs(sync2.account, 1, sync2.authority);
+    syncs = engine.getPeriodicSyncs(target1UserB);
     assertEquals(1, syncs.size());
     assertEquals(sync2, syncs.get(0));
 }

