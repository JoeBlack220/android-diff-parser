Find a functionally equivalent code:android.content.Intent.parseIntent:COMMENT
Method Modifier: public      static      
Comment:/**
 * Parses the "intent" element (and its children) from XML and instantiates
 * an Intent object.  The given XML parser should be located at the tag
 * where parsing should start (often named "intent"), from which the
 * basic action, data, type, and package and class name will be
 * retrieved.  The function will then parse in to any child elements,
 * looking for <category android:name="xxx"> tags to add categories and
 * <extra android:name="xxx" android:value="yyy"> to attach extra data
 * to the intent.
 *
 * @param resources The Resources to use when inflating resources.
 * @param parser The XML parser pointing at an "intent" tag.
 * @param attrs The AttributeSet interface for retrieving extended
 * attribute data at the current <var>parser</var> location.
 * @return An Intent object matching the XML data.
 * @throws XmlPullParserException If there was an XML parsing error.
 * @throws IOException If there was an I/O error.
 */

@@ -18,24 +18,24 @@
             continue;
         }
         String nodeName = parser.getName();
-        if (nodeName.equals("category")) {
+        if (nodeName.equals(TAG_CATEGORIES)) {
             sa = resources.obtainAttributes(attrs, com.android.internal.R.styleable.IntentCategory);
             String cat = sa.getString(com.android.internal.R.styleable.IntentCategory_name);
             sa.recycle();
@@ -26,36 +26,36 @@
                 intent.addCategory(cat);
             }
             XmlUtils.skipCurrentTag(parser);
-        } else if (nodeName.equals("extra")) {
+        } else if (nodeName.equals(TAG_EXTRA)) {
             if (intent.mExtras == null) {
                 intent.mExtras = new Bundle();
             }
-            resources.parseBundleExtra("extra", attrs, intent.mExtras);
+            resources.parseBundleExtra(TAG_EXTRA, attrs, intent.mExtras);
             XmlUtils.skipCurrentTag(parser);
         } else {
             XmlUtils.skipCurrentTag(parser);

