Find a functionally equivalent code:android.ddm.DdmHandleHello.handleHELO:COMMENT
Method Modifier: private     
Comment:/*
     * Handle introductory packet. This is called during JNI_CreateJavaVM
     * before frameworks native methods are registered, so be careful not
     * to call any APIs that depend on frameworks native code.
     */

@@ -18,24 +18,31 @@
     // if (appName == null)
     // appName = "unknown";
     String appName = DdmHandleAppName.getAppName();
-    ByteBuffer out = ByteBuffer.allocate(20 + vmIdent.length() * 2 + appName.length() * 2);
+    VMRuntime vmRuntime = VMRuntime.getRuntime();
+    String instructionSetDescription = vmRuntime.is64Bit() ? "64-bit" : "32-bit";
+    String vmInstructionSet = vmRuntime.vmInstructionSet();
+    if (vmInstructionSet != null && vmInstructionSet.length() > 0) {
+        instructionSetDescription += " (" + vmInstructionSet + ")";
+    }
+    String vmFlags = "CheckJNI=" + (vmRuntime.isCheckJniEnabled() ? "true" : "false");
+    ByteBuffer out = ByteBuffer.allocate(28 + vmIdent.length() * 2 + appName.length() * 2 + instructionSetDescription.length() * 2 + vmFlags.length() * 2);
     out.order(ChunkHandler.CHUNK_ORDER);
     out.putInt(DdmServer.CLIENT_PROTOCOL_VERSION);
     out.putInt(android.os.Process.myPid());
@@ -27,32 +34,43 @@
     putString(out, vmIdent);
     putString(out, appName);
     out.putInt(UserHandle.myUserId());
+    out.putInt(instructionSetDescription.length());
+    putString(out, instructionSetDescription);
+    out.putInt(vmFlags.length());
+    putString(out, vmFlags);
     Chunk reply = new Chunk(CHUNK_HELO, out);
     /*
          * Take the opportunity to inform DDMS if we are waiting for a

