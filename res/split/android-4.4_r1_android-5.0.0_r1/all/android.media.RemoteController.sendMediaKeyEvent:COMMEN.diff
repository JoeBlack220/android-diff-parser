Find a functionally equivalent code:android.media.RemoteController.sendMediaKeyEvent:COMMENT
Method Modifier: public      
Comment:/**
 * Send a simulated key event for a media button to be received by the current client.
 * To simulate a key press, you must first send a KeyEvent built with
 * a {@link KeyEvent#ACTION_DOWN} action, then another event with the {@link KeyEvent#ACTION_UP}
 * action.
 * <p>The key event will be sent to the registered receiver
 * (see {@link AudioManager#registerMediaButtonEventReceiver(PendingIntent)}) whose associated
 * {@link RemoteControlClient}'s metadata and playback state is published (there may be
 * none under some circumstances).
 * @param keyEvent a {@link KeyEvent} instance whose key code is one of
 * {@link KeyEvent#KEYCODE_MUTE},
 * {@link KeyEvent#KEYCODE_HEADSETHOOK},
 * {@link KeyEvent#KEYCODE_MEDIA_PLAY},
 * {@link KeyEvent#KEYCODE_MEDIA_PAUSE},
 * {@link KeyEvent#KEYCODE_MEDIA_PLAY_PAUSE},
 * {@link KeyEvent#KEYCODE_MEDIA_STOP},
 * {@link KeyEvent#KEYCODE_MEDIA_NEXT},
 * {@link KeyEvent#KEYCODE_MEDIA_PREVIOUS},
 * {@link KeyEvent#KEYCODE_MEDIA_REWIND},
 * {@link KeyEvent#KEYCODE_MEDIA_RECORD},
 * {@link KeyEvent#KEYCODE_MEDIA_FAST_FORWARD},
 * {@link KeyEvent#KEYCODE_MEDIA_CLOSE},
 * {@link KeyEvent#KEYCODE_MEDIA_EJECT},
 * or {@link KeyEvent#KEYCODE_MEDIA_AUDIO_TRACK}.
 * @return true if the event was successfully sent, false otherwise.
 * @throws IllegalArgumentException
 */

@@ -1,31 +1,40 @@
 {
-    if (!MediaFocusControl.isMediaKeyCode(keyEvent.getKeyCode())) {
+    if (!KeyEvent.isMediaKey(keyEvent.getKeyCode())) {
         throw new IllegalArgumentException("not a media key event");
     }
-    final PendingIntent pi;
-    synchronized (mInfoLock) {
-        if (!mIsRegistered) {
-            Log.e(TAG, "Cannot use sendMediaKeyEvent() from an unregistered RemoteController");
+    if (USE_SESSIONS) {
+        synchronized (mInfoLock) {
+            if (mCurrentSession != null) {
+                return mCurrentSession.dispatchMediaButtonEvent(keyEvent);
+            }
             return false;
         }
-        if (!mEnabled) {
-            Log.e(TAG, "Cannot use sendMediaKeyEvent() from a disabled RemoteController");
-            return false;
+    } else {
+        final PendingIntent pi;
+        synchronized (mInfoLock) {
+            if (!mIsRegistered) {
+                Log.e(TAG, "Cannot use sendMediaKeyEvent() from an unregistered RemoteController");
+                return false;
+            }
+            if (!mEnabled) {
+                Log.e(TAG, "Cannot use sendMediaKeyEvent() from a disabled RemoteController");
+                return false;
+            }
+            pi = mClientPendingIntentCurrent;
         }
-        pi = mClientPendingIntentCurrent;
-    }
-    if (pi != null) {
-        Intent intent = new Intent(Intent.ACTION_MEDIA_BUTTON);
-        intent.putExtra(Intent.EXTRA_KEY_EVENT, keyEvent);
-        try {
-            pi.send(mContext, 0, intent);
-        } catch (CanceledException e) {
-            Log.e(TAG, "Error sending intent for media button down: ", e);
+        if (pi != null) {
+            Intent intent = new Intent(Intent.ACTION_MEDIA_BUTTON);
+            intent.putExtra(Intent.EXTRA_KEY_EVENT, keyEvent);
+            try {
+                pi.send(mContext, 0, intent);
+            } catch (CanceledException e) {
+                Log.e(TAG, "Error sending intent for media button down: ", e);
+                return false;
+            }
+        } else {
+            Log.i(TAG, "No-op when sending key click, no receiver right now");
             return false;
         }
-    } else {
-        Log.i(TAG, "No-op when sending key click, no receiver right now");
-        return false;
     }
     return true;
 }

