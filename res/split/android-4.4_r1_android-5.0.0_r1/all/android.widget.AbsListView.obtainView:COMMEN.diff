Find a functionally equivalent code:android.widget.AbsListView.obtainView:COMMENT
Method Modifier: 
Comment:/**
 * Get a view and have it show the data associated with the specified
 * position. This is called when we have already discovered that the view is
 * not available for reuse in the recycle bin. The only choices left are
 * converting an old view or making a new one.
 *
 * @param position The position to display
 * @param isScrap Array of at least 1 boolean, the first entry will become true if
 * the returned view was taken from the scrap heap, false if otherwise.
 *
 * @return A view displaying the data associated with the specified position
 */

@@ -1,52 +1,42 @@
 {
     Trace.traceBegin(Trace.TRACE_TAG_VIEW, "obtainView");
     isScrap[0] = false;
-    View scrapView;
-    scrapView = mRecycler.getTransientStateView(position);
-    if (scrapView == null) {
-        scrapView = mRecycler.getScrapView(position);
+    // Check whether we have a transient state view. Attempt to re-bind the
+    // data and discard the view if we fail.
+    final View transientView = mRecycler.getTransientStateView(position);
+    if (transientView != null) {
+        final LayoutParams params = (LayoutParams) transientView.getLayoutParams();
+        // If the view type hasn't changed, attempt to re-bind the data.
+        if (params.viewType == mAdapter.getItemViewType(position)) {
+            final View updatedView = mAdapter.getView(position, transientView, this);
+            // If we failed to re-bind the data, scrap the obtained view.
+            if (updatedView != transientView) {
+                setItemViewLayoutParams(updatedView, position);
+                mRecycler.addScrapView(updatedView, position);
+            }
+        }
+        // Scrap view implies temporary detachment.
+        isScrap[0] = true;
+        return transientView;
     }
-    View child;
+    final View scrapView = mRecycler.getScrapView(position);
+    final View child = mAdapter.getView(position, scrapView, this);
     if (scrapView != null) {
-        child = mAdapter.getView(position, scrapView, this);
-        if (child.getImportantForAccessibility() == IMPORTANT_FOR_ACCESSIBILITY_AUTO) {
-            child.setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_YES);
-        }
         if (child != scrapView) {
+            // Failed to re-bind the data, return scrap to the heap.
             mRecycler.addScrapView(scrapView, position);
-            if (mCacheColorHint != 0) {
-                child.setDrawingCacheBackgroundColor(mCacheColorHint);
-            }
         } else {
             isScrap[0] = true;
-            // recycle this view and bind it to different data.
-            if (child.isAccessibilityFocused()) {
-                child.clearAccessibilityFocus();
-            }
             child.dispatchFinishTemporaryDetach();
         }
-    } else {
-        child = mAdapter.getView(position, null, this);
-        if (child.getImportantForAccessibility() == IMPORTANT_FOR_ACCESSIBILITY_AUTO) {
-            child.setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_YES);
-        }
-        if (mCacheColorHint != 0) {
-            child.setDrawingCacheBackgroundColor(mCacheColorHint);
-        }
     }
-    if (mAdapterHasStableIds) {
-        final ViewGroup.LayoutParams vlp = child.getLayoutParams();
-        LayoutParams lp;
-        if (vlp == null) {
-            lp = (LayoutParams) generateDefaultLayoutParams();
-        } else if (!checkLayoutParams(vlp)) {
-            lp = (LayoutParams) generateLayoutParams(vlp);
-        } else {
-            lp = (LayoutParams) vlp;
-        }
-        lp.itemId = mAdapter.getItemId(position);
-        child.setLayoutParams(lp);
+    if (mCacheColorHint != 0) {
+        child.setDrawingCacheBackgroundColor(mCacheColorHint);
+    }
+    if (child.getImportantForAccessibility() == IMPORTANT_FOR_ACCESSIBILITY_AUTO) {
+        child.setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_YES);
     }
+    setItemViewLayoutParams(child, position);
     if (AccessibilityManager.getInstance(mContext).isEnabled()) {
         if (mAccessibilityDelegate == null) {
             mAccessibilityDelegate = new ListItemAccessibilityDelegate();

