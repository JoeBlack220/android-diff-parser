Find a functionally equivalent code:android.widget.FastScroller.transitionPreviewLayout:COMMENT
Method Modifier: private     
Comment:/**
 * Transitions the preview text to a new section. Handles animation,
 * measurement, and layout. If the new preview text is empty, returns false.
 *
 * @param sectionIndex The section index to which the preview should
 * transition.
 * @return False if the new preview text is empty.
 */

@@ -8,14 +8,14 @@
         }
     }
     final Rect bounds = mTempBounds;
-    final ImageView preview = mPreviewImage;
+    final View preview = mPreviewImage;
     final TextView showing;
     final TextView target;
     if (mShowingPrimary) {
@@ -30,39 +30,39 @@
     final Animator hideShowing = animateAlpha(showing, 0f).setDuration(DURATION_CROSS_FADE);
     hideShowing.addListener(mSwitchPrimaryListener);
     // Apply preview image padding and animate bounds, if necessary.
-    bounds.left -= mPreviewImage.getPaddingLeft();
-    bounds.top -= mPreviewImage.getPaddingTop();
-    bounds.right += mPreviewImage.getPaddingRight();
-    bounds.bottom += mPreviewImage.getPaddingBottom();
+    bounds.left -= preview.getPaddingLeft();
+    bounds.top -= preview.getPaddingTop();
+    bounds.right += preview.getPaddingRight();
+    bounds.bottom += preview.getPaddingBottom();
     final Animator resizePreview = animateBounds(preview, bounds);
     resizePreview.setDuration(DURATION_RESIZE);
     mPreviewAnimation = new AnimatorSet();
@@ -60,64 +60,64 @@
         builder.with(scaleAnim);
     }
     mPreviewAnimation.start();
-    return (text != null && text.length() > 0);
+    return !TextUtils.isEmpty(text);
 }

