Find a functionally equivalent code:android.content.res.ColorStateList.inflate:COMMENT
Method Modifier: private     
Comment:/**
 * Fill in this object based on the contents of an XML "selector" element.
 */

@@ -2,11 +2,10 @@
     int type;
     final int innerDepth = parser.getDepth() + 1;
     int depth;
-    int listAllocated = 20;
+    int[][] stateSpecList = ArrayUtils.newUnpaddedArray(int[].class, 20);
+    int[] colorList = new int[stateSpecList.length];
     int listSize = 0;
-    int[] colorList = new int[listAllocated];
-    int[][] stateSpecList = new int[listAllocated][];
     while ((type = parser.next()) != XmlPullParser.END_DOCUMENT && ((depth = parser.getDepth()) >= innerDepth || type != XmlPullParser.END_TAG)) {
         if (type != XmlPullParser.START_TAG) {
             continue;
@@ -13,18 +12,19 @@
         if (depth > innerDepth || !parser.getName().equals("item")) {
             continue;
         }
+        int alphaRes = 0;
+        float alpha = 1.0f;
         int colorRes = 0;
         int color = 0xffff0000;
         boolean haveColor = false;
@@ -24,30 +25,36 @@
             final int stateResId = attrs.getAttributeNameResource(i);
             if (stateResId == 0)
                 break;
-            if (stateResId == com.android.internal.R.attr.color) {
+            if (stateResId == com.android.internal.R.attr.alpha) {
+                alphaRes = attrs.getAttributeResourceValue(i, 0);
+                if (alphaRes == 0) {
+                    alpha = attrs.getAttributeFloatValue(i, 1.0f);
+                }
+            } else if (stateResId == com.android.internal.R.attr.color) {
                 colorRes = attrs.getAttributeResourceValue(i, 0);
                 if (colorRes == 0) {
                     color = attrs.getAttributeIntValue(i, color);
@@ -40,59 +46,62 @@
         } else if (!haveColor) {
             throw new XmlPullParserException(parser.getPositionDescription() + ": <item> tag requires a 'android:color' attribute.");
         }
+        if (alphaRes != 0) {
+            alpha = r.getFloat(alphaRes);
+        }
+        // Apply alpha modulation.
+        final int alphaMod = MathUtils.constrain((int) (Color.alpha(color) * alpha), 0, 255);
+        color = (color & 0xFFFFFF) | (alphaMod << 24);
         if (listSize == 0 || stateSpec.length == 0) {
             mDefaultColor = color;
         }
-        if (listSize + 1 >= listAllocated) {
-            listAllocated = ArrayUtils.idealIntArraySize(listSize + 1);
-            int[] ncolor = new int[listAllocated];
-            System.arraycopy(colorList, 0, ncolor, 0, listSize);
-            int[][] nstate = new int[listAllocated][];
-            System.arraycopy(stateSpecList, 0, nstate, 0, listSize);
-            colorList = ncolor;
-            stateSpecList = nstate;
-        }
-        colorList[listSize] = color;
-        stateSpecList[listSize] = stateSpec;
+        colorList = GrowingArrayUtils.append(colorList, listSize, color);
+        stateSpecList = GrowingArrayUtils.append(stateSpecList, listSize, stateSpec);
         listSize++;
     }
     mColors = new int[listSize];

