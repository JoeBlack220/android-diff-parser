Find a functionally equivalent code:android.util.Spline.createMonotoneCubicSpline:COMMENT
Method Modifier: public      static      
Comment:/**
 * Creates a monotone cubic spline from a given set of control points.
 *
 * The spline is guaranteed to pass through each control point exactly.
 * Moreover, assuming the control points are monotonic (Y is non-decreasing or
 * non-increasing) then the interpolated values will also be monotonic.
 *
 * This function uses the Fritsch-Carlson method for computing the spline parameters.
 * http://en.wikipedia.org/wiki/Monotone_cubic_interpolation
 *
 * @param x The X component of the control points, strictly increasing.
 * @param y The Y component of the control points, monotonic.
 * @return
 *
 * @throws IllegalArgumentException if the X or Y arrays are null, have
 * different lengths or have fewer than 2 values.
 * @throws IllegalArgumentException if the control points are not monotonic.
 */

@@ -1,44 +1,3 @@
 {
-    if (x == null || y == null || x.length != y.length || x.length < 2) {
-        throw new IllegalArgumentException("There must be at least two control " + "points and the arrays must be of equal length.");
-    }
-    final int n = x.length;
-    // could optimize this out
-    float[] d = new float[n - 1];
-    float[] m = new float[n];
-    // Compute slopes of secant lines between successive points.
-    for (int i = 0; i < n - 1; i++) {
-        float h = x[i + 1] - x[i];
-        if (h <= 0f) {
-            throw new IllegalArgumentException("The control points must all " + "have strictly increasing X values.");
-        }
-        d[i] = (y[i + 1] - y[i]) / h;
-    }
-    // Initialize the tangents as the average of the secants.
-    m[0] = d[0];
-    for (int i = 1; i < n - 1; i++) {
-        m[i] = (d[i - 1] + d[i]) * 0.5f;
-    }
-    m[n - 1] = d[n - 2];
-    // Update the tangents to preserve monotonicity.
-    for (int i = 0; i < n - 1; i++) {
-        if (d[i] == 0f) {
-            // successive Y values are equal
-            m[i] = 0f;
-            m[i + 1] = 0f;
-        } else {
-            float a = m[i] / d[i];
-            float b = m[i + 1] / d[i];
-            if (a < 0f || b < 0f) {
-                throw new IllegalArgumentException("The control points must have " + "monotonic Y values.");
-            }
-            float h = FloatMath.hypot(a, b);
-            if (h > 9f) {
-                float t = 3f / h;
-                m[i] = t * a * d[i];
-                m[i + 1] = t * b * d[i];
-            }
-        }
-    }
-    return new Spline(x, y, m);
+    return new MonotoneCubicSpline(x, y);
 }

