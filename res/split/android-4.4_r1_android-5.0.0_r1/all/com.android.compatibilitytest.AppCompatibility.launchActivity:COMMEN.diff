Find a functionally equivalent code:com.android.compatibilitytest.AppCompatibility.launchActivity:COMMENT
Method Modifier: private     
Comment:/**
 * Launches and activity and queries for errors.
 *
 * @param packageName {@link String} the package name of the application to
 * launch.
 * @return {@link Collection} of {@link ProcessErrorStateInfo} detected
 * during the app launch.
 */

@@ -1,22 +1,18 @@
 {
+    // the recommended way to see if this is a tv or not.
+    boolean isleanback = !mPackageManager.hasSystemFeature(PackageManager.FEATURE_TOUCHSCREEN) && !mPackageManager.hasSystemFeature(PackageManager.FEATURE_TELEPHONY);
     Intent homeIntent = new Intent(Intent.ACTION_MAIN);
     homeIntent.addCategory(Intent.CATEGORY_HOME);
     homeIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-    Intent intent = mPackageManager.getLaunchIntentForPackage(packageName);
-    // Skip if the apk does not have a launch intent.
-    if (intent == null) {
-        Log.d(TAG, "Skipping " + packageName + "; missing launch intent");
-        return null;
+    Intent intent;
+    if (isleanback) {
+        Log.d(TAG, "Leanback and relax! " + packageName);
+        intent = mPackageManager.getLeanbackLaunchIntentForPackage(packageName);
+    } else {
+        intent = mPackageManager.getLaunchIntentForPackage(packageName);
     }
-    // We check for any Crash or ANR dialogs that are already up, and we
-    // ignore them. This is
-    // so that we don't report crashes that were caused by prior apps (which
-    // those particular
-    // tests should have caught and reported already). Otherwise, test
-    // failures would cascade
-    // from the initial broken app to many/all of the tests following that
-    // app's launch.
-    final Collection<ProcessErrorStateInfo> preErr = mActivityManager.getProcessesInErrorState();
+    assertNotNull("Skipping " + packageName + "; missing launch intent", intent);
+    String processName = getProcessName(packageName);
     // Launch Activity
     mContext.startActivity(intent);
     try {
@@ -35,43 +31,43 @@
     // much time as
     // possible to occur.
     final Collection<ProcessErrorStateInfo> postErr = mActivityManager.getProcessesInErrorState();
-    // present when we started
-    if (preErr != null && postErr != null) {
-        postErr.removeAll(preErr);
+    if (postErr == null) {
+        return null;
+    }
+    for (ProcessErrorStateInfo error : postErr) {
+        if (error.processName.equals(processName)) {
+            return error;
+        }
     }
-    return postErr;
+    return null;
 }

