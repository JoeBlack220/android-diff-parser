Find a functionally equivalent code:com.android.internal.os.ZygoteInit.handleSystemServerProcess:COMMENT
Method Modifier: private     static      internal    
Comment:/**
 * Finish remaining work for the newly forked system server process.
 */

@@ -1,17 +1,34 @@
 {
     closeServerSocket();
     // set umask to 0077 so new files and directories will default to owner-only permissions.
-    Libcore.os.umask(S_IRWXG | S_IRWXO);
+    Os.umask(S_IRWXG | S_IRWXO);
     if (parsedArgs.niceName != null) {
         Process.setArgV0(parsedArgs.niceName);
     }
+    final String systemServerClasspath = Os.getenv("SYSTEMSERVERCLASSPATH");
+    if (systemServerClasspath != null) {
+        performSystemServerDexOpt(systemServerClasspath);
+    }
     if (parsedArgs.invokeWith != null) {
-        WrapperInit.execApplication(parsedArgs.invokeWith, parsedArgs.niceName, parsedArgs.targetSdkVersion, null, parsedArgs.remainingArgs);
+        String[] args = parsedArgs.remainingArgs;
+        // correctly when we exec a new process.
+        if (systemServerClasspath != null) {
+            String[] amendedArgs = new String[args.length + 2];
+            amendedArgs[0] = "-cp";
+            amendedArgs[1] = systemServerClasspath;
+            System.arraycopy(parsedArgs.remainingArgs, 0, amendedArgs, 2, parsedArgs.remainingArgs.length);
+        }
+        WrapperInit.execApplication(parsedArgs.invokeWith, parsedArgs.niceName, parsedArgs.targetSdkVersion, null, args);
     } else {
+        ClassLoader cl = null;
+        if (systemServerClasspath != null) {
+            cl = new PathClassLoader(systemServerClasspath, ClassLoader.getSystemClassLoader());
+            Thread.currentThread().setContextClassLoader(cl);
+        }
         /*
              * Pass the remaining arguments to SystemServer.
              */
-        RuntimeInit.zygoteInit(parsedArgs.targetSdkVersion, parsedArgs.remainingArgs);
+        RuntimeInit.zygoteInit(parsedArgs.targetSdkVersion, parsedArgs.remainingArgs, cl);
     }
 /* should never reach here */
 }

