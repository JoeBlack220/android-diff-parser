Find a functionally equivalent code:android.graphics.Canvas.drawBitmapMesh:COMMENT
Method Modifier: public      
Comment:/**
 * Draw the bitmap through the mesh, where mesh vertices are evenly
 * distributed across the bitmap. There are meshWidth+1 vertices across, and
 * meshHeight+1 vertices down. The verts array is accessed in row-major
 * order, so that the first meshWidth+1 vertices are distributed across the
 * top of the bitmap from left to right. A more general version of this
 * method is drawVertices().
 *
 * @param bitmap The bitmap to draw using the mesh
 * @param meshWidth The number of columns in the mesh. Nothing is drawn if
 * this is 0
 * @param meshHeight The number of rows in the mesh. Nothing is drawn if
 * this is 0
 * @param verts Array of x,y pairs, specifying where the mesh should be
 * drawn. There must be at least
 * (meshWidth+1) * (meshHeight+1) * 2 + vertOffset values
 * in the array
 * @param vertOffset Number of verts elements to skip before drawing
 * @param colors May be null. Specifies a color at each vertex, which is
 * interpolated across the cell, and whose values are
 * multiplied by the corresponding bitmap colors. If not null,
 * there must be at least (meshWidth+1) * (meshHeight+1) +
 * colorOffset values in the array.
 * @param colorOffset Number of color elements to skip before drawing
 * @param paint  May be null. The paint used to draw the bitmap
 */

@@ -12,16 +12,16 @@
         // no mul by 2, since we need only 1 color per vertex
         checkRange(colors.length, colorOffset, count);
     }
-    nativeDrawBitmapMesh(mNativeCanvas, bitmap.ni(), meshWidth, meshHeight, verts, vertOffset, colors, colorOffset, paint != null ? paint.mNativePaint : 0);
+    nativeDrawBitmapMesh(mNativeCanvasWrapper, bitmap.ni(), meshWidth, meshHeight, verts, vertOffset, colors, colorOffset, paint != null ? paint.mNativePaint : 0);
 }

