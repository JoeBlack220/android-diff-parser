Find a functionally equivalent code:android.telephony.PhoneNumberUtils.cdmaCheckAndProcessPlusCodeByNumberFormat:COMMENT
Method Modifier: public      static      hidden      
Comment:/**
 * This function should be called from checkAndProcessPlusCode only
 * And it is used for test purpose also.
 *
 * It checks the dial string by looping through the network portion,
 * post dial portion 1, post dial porting 2, etc. If there is any
 * plus sign, then process the plus sign.
 * Currently, this function supports the plus sign conversion within NANP only.
 * Specifically, it handles the plus sign in the following ways:
 * 1)+1NANP,remove +, e.g.
 * +18475797000 is converted to 18475797000,
 * 2)+NANP or +non-NANP Numbers,replace + with the current NANP IDP, e.g,
 * +8475797000 is converted to 0118475797000,
 * +11875767800 is converted to 01111875767800
 * 3)+1NANP in post dial string(s), e.g.
 * 8475797000;+18475231753 is converted to 8475797000;18475231753
 *
 * @param dialStr the original dial string
 * @param currFormat the numbering system of the current country that the phone is camped on
 * @param defaultFormat the numbering system of the country that the phone is activated on
 * @return the converted dial string if the current/default countries belong to NANP,
 * and if there is the "+" in the original dial string. Otherwise, the original dial
 * string returns.
 *
 * @hide
 */

@@ -1,61 +1,58 @@
 {
     String retStr = dialStr;
+    boolean useNanp = (currFormat == defaultFormat) && (currFormat == FORMAT_NANP);
     // Checks if the plus sign character is in the passed-in dial string
     if (dialStr != null && dialStr.lastIndexOf(PLUS_SIGN_STRING) != -1) {
-        // and the current country the phone is camped on.
-        if ((currFormat == defaultFormat) && (currFormat == FORMAT_NANP)) {
-            // Handle case where default and current telephone numbering plans are NANP.
-            String postDialStr = null;
-            String tempDialStr = dialStr;
-            // Sets the retStr to null since the conversion will be performed below.
-            retStr = null;
-            if (DBG)
-                log("checkAndProcessPlusCode,dialStr=" + dialStr);
-            // applied
-            do {
-                String networkDialStr;
+        // Handle case where default and current telephone numbering plans are NANP.
+        String postDialStr = null;
+        String tempDialStr = dialStr;
+        // Sets the retStr to null since the conversion will be performed below.
+        retStr = null;
+        if (DBG)
+            log("checkAndProcessPlusCode,dialStr=" + dialStr);
+        // applied
+        do {
+            String networkDialStr;
+            // and the current country the phone is camped
+            if (useNanp) {
                 networkDialStr = extractNetworkPortion(tempDialStr);
-                // Handles the conversion within NANP
-                networkDialStr = processPlusCodeWithinNanp(networkDialStr);
-                // Concatenates the string that is converted from network portion
-                if (!TextUtils.isEmpty(networkDialStr)) {
-                    if (retStr == null) {
-                        retStr = networkDialStr;
-                    } else {
-                        retStr = retStr.concat(networkDialStr);
-                    }
+            } else {
+                networkDialStr = extractNetworkPortionAlt(tempDialStr);
+            }
+            networkDialStr = processPlusCode(networkDialStr, useNanp);
+            // Concatenates the string that is converted from network portion
+            if (!TextUtils.isEmpty(networkDialStr)) {
+                if (retStr == null) {
+                    retStr = networkDialStr;
                 } else {
-                    // This should never happen since we checked the if dialStr is null
-                    // and if it contains the plus sign in the beginning of this function.
-                    // The plus sign is part of the network portion.
-                    Rlog.e("checkAndProcessPlusCode: null newDialStr", networkDialStr);
-                    return dialStr;
+                    retStr = retStr.concat(networkDialStr);
                 }
-                postDialStr = extractPostDialPortion(tempDialStr);
-                if (!TextUtils.isEmpty(postDialStr)) {
-                    int dialableIndex = findDialableIndexFromPostDialStr(postDialStr);
-                    // dialableIndex should always be greater than 0
-                    if (dialableIndex >= 1) {
-                        retStr = appendPwCharBackToOrigDialStr(dialableIndex, retStr, postDialStr);
-                        // Skips the P/W character, extracts the dialable portion
-                        tempDialStr = postDialStr.substring(dialableIndex);
-                    } else {
-                        // Set the postDialStr to "" to break out of the loop
-                        if (dialableIndex < 0) {
-                            postDialStr = "";
-                        }
-                        Rlog.e("wrong postDialStr=", postDialStr);
+            } else {
+                // This should never happen since we checked the if dialStr is null
+                // and if it contains the plus sign in the beginning of this function.
+                // The plus sign is part of the network portion.
+                Rlog.e("checkAndProcessPlusCode: null newDialStr", networkDialStr);
+                return dialStr;
+            }
+            postDialStr = extractPostDialPortion(tempDialStr);
+            if (!TextUtils.isEmpty(postDialStr)) {
+                int dialableIndex = findDialableIndexFromPostDialStr(postDialStr);
+                // dialableIndex should always be greater than 0
+                if (dialableIndex >= 1) {
+                    retStr = appendPwCharBackToOrigDialStr(dialableIndex, retStr, postDialStr);
+                    // Skips the P/W character, extracts the dialable portion
+                    tempDialStr = postDialStr.substring(dialableIndex);
+                } else {
+                    // Set the postDialStr to "" to break out of the loop
+                    if (dialableIndex < 0) {
+                        postDialStr = "";
                     }
+                    Rlog.e("wrong postDialStr=", postDialStr);
                 }
-                if (DBG)
-                    log("checkAndProcessPlusCode,postDialStr=" + postDialStr);
-            } while (!TextUtils.isEmpty(postDialStr) && !TextUtils.isEmpty(tempDialStr));
-        } else {
-            // TODO: Support NANP international conversion and other telephone numbering plans.
-            // Currently the phone is never used in non-NANP system, so return the original
-            // dial string.
-            Rlog.e("checkAndProcessPlusCode:non-NANP not supported", dialStr);
-        }
+            }
+            if (DBG)
+                log("checkAndProcessPlusCode,postDialStr=" + postDialStr);
+        } while (!TextUtils.isEmpty(postDialStr) && !TextUtils.isEmpty(tempDialStr));
     }
     return retStr;
 }

