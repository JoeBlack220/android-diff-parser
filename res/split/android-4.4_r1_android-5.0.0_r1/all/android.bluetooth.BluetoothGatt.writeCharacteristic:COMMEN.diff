Find a functionally equivalent code:android.bluetooth.BluetoothGatt.writeCharacteristic:COMMENT
Method Modifier: public      
Comment:/**
 * Writes a given characteristic and its values to the associated remote device.
 *
 * <p>Once the write operation has been completed, the
 * {@link BluetoothGattCallback#onCharacteristicWrite} callback is invoked,
 * reporting the result of the operation.
 *
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
 *
 * @param characteristic Characteristic to write on the remote device
 * @return true, if the write operation was initiated successfully
 */

@@ -1,7 +1,7 @@
 {
     if ((characteristic.getProperties() & BluetoothGattCharacteristic.PROPERTY_WRITE) == 0 && (characteristic.getProperties() & BluetoothGattCharacteristic.PROPERTY_WRITE_NO_RESPONSE) == 0)
         return false;
-    if (DBG)
+    if (VDBG)
         Log.d(TAG, "writeCharacteristic() - uuid: " + characteristic.getUuid());
     if (mService == null || mClientIf == 0)
         return false;
@@ -11,20 +11,26 @@
     BluetoothDevice device = service.getDevice();
     if (device == null)
         return false;
+    synchronized (mDeviceBusy) {
+        if (mDeviceBusy)
+            return false;
+        mDeviceBusy = true;
+    }
     try {
         mService.writeCharacteristic(mClientIf, device.getAddress(), service.getType(), service.getInstanceId(), new ParcelUuid(service.getUuid()), characteristic.getInstanceId(), new ParcelUuid(characteristic.getUuid()), characteristic.getWriteType(), AUTHENTICATION_NONE, characteristic.getValue());
     } catch (RemoteException e) {
         Log.e(TAG, "", e);
+        mDeviceBusy = false;
         return false;
     }
     return true;

