Find a functionally equivalent code:android.widget.ListPopupWindow.ForwardingListener.onTouchObserved:COMMENT
Method Modifier: private     
Comment:/**
 * Observes motion events and determines when to start forwarding.
 *
 * @param srcEvent motion event in source view coordinates
 * @return true to start forwarding motion events, false otherwise
 */

@@ -7,27 +7,31 @@
     switch(actionMasked) {
         case MotionEvent.ACTION_DOWN:
             mActivePointerId = srcEvent.getPointerId(0);
+            mWasLongPress = false;
             if (mDisallowIntercept == null) {
                 mDisallowIntercept = new DisallowIntercept();
             }
             src.postDelayed(mDisallowIntercept, mTapTimeout);
+            if (mTriggerLongPress == null) {
+                mTriggerLongPress = new TriggerLongPress();
+            }
+            src.postDelayed(mTriggerLongPress, mLongPressTimeout);
             break;
         case MotionEvent.ACTION_MOVE:
             final int activePointerIndex = srcEvent.findPointerIndex(mActivePointerId);
             if (activePointerIndex >= 0) {
                 final float x = srcEvent.getX(activePointerIndex);
                 final float y = srcEvent.getY(activePointerIndex);
+                // Has the pointer has moved outside of the view?
                 if (!src.pointInView(x, y, mScaledTouchSlop)) {
-                    // The pointer has moved outside of the view.
-                    if (mDisallowIntercept != null) {
-                        src.removeCallbacks(mDisallowIntercept);
-                    }
+                    clearCallbacks();
+                    // Don't let the parent intercept our events.
                     src.getParent().requestDisallowInterceptTouchEvent(true);
                     return true;
                 }
@@ -29,37 +33,39 @@
             break;
         case MotionEvent.ACTION_CANCEL:
         case MotionEvent.ACTION_UP:
-            if (mDisallowIntercept != null) {
-                src.removeCallbacks(mDisallowIntercept);
-            }
+            clearCallbacks();
             break;
     }
     return false;

