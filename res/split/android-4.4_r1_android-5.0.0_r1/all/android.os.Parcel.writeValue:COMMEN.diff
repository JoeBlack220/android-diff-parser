Find a functionally equivalent code:android.os.Parcel.writeValue:COMMENT
Method Modifier: public      final       
Comment:/**
 * Flatten a generic object in to a parcel.  The given Object value may
 * currently be one of the following types:
 *
 * <ul>
 * <li> null
 * <li> String
 * <li> Byte
 * <li> Short
 * <li> Integer
 * <li> Long
 * <li> Float
 * <li> Double
 * <li> Boolean
 * <li> String[]
 * <li> boolean[]
 * <li> byte[]
 * <li> int[]
 * <li> long[]
 * <li> Object[] (supporting objects of the same type defined here).
 * <li> {@link Bundle}
 * <li> Map (as supported by {@link #writeMap}).
 * <li> Any object that implements the {@link Parcelable} protocol.
 * <li> Parcelable[]
 * <li> CharSequence (as supported by {@link TextUtils#writeToParcel}).
 * <li> List (as supported by {@link #writeList}).
 * <li> {@link SparseArray} (as supported by {@link #writeSparseArray(SparseArray)}).
 * <li> {@link IBinder}
 * <li> Any object that implements Serializable (but see
 * {@link #writeSerializable} for caveats).  Note that all of the
 * previous types have relatively efficient implementations for
 * writing to a Parcel; having to rely on the generic serialization
 * approach is much less efficient and should be avoided whenever
 * possible.
 * </ul>
 *
 * <p class="caution">{@link Parcelable} objects are written with
 * {@link Parcelable#writeToParcel} using contextual flags of 0.  When
 * serializing objects containing {@link ParcelFileDescriptor}s,
 * this may result in file descriptor leaks when they are returned from
 * Binder calls (where {@link Parcelable#PARCELABLE_WRITE_RETURN_VALUE}
 * should be used).</p>
 */

@@ -61,69 +61,66 @@
     } else if (v instanceof Parcelable[]) {
         writeInt(VAL_PARCELABLEARRAY);
         writeParcelableArray((Parcelable[]) v, 0);
-    } else if (v instanceof Object[]) {
-        writeInt(VAL_OBJECTARRAY);
-        writeArray((Object[]) v);
     } else if (v instanceof int[]) {
         writeInt(VAL_INTARRAY);
         writeIntArray((int[]) v);
@@ -73,83 +70,97 @@
     } else if (v instanceof Byte) {
         writeInt(VAL_BYTE);
         writeInt((Byte) v);
-    } else if (v instanceof Serializable) {
-        // Must be last
-        writeInt(VAL_SERIALIZABLE);
-        writeSerializable((Serializable) v);
+    } else if (v instanceof PersistableBundle) {
+        writeInt(VAL_PERSISTABLEBUNDLE);
+        writePersistableBundle((PersistableBundle) v);
+    } else if (v instanceof Size) {
+        writeInt(VAL_SIZE);
+        writeSize((Size) v);
+    } else if (v instanceof SizeF) {
+        writeInt(VAL_SIZEF);
+        writeSizeF((SizeF) v);
     } else {
-        throw new RuntimeException("Parcel: unable to marshal value " + v);
+        Class<?> clazz = v.getClass();
+        if (clazz.isArray() && clazz.getComponentType() == Object.class) {
+            // Only pure Object[] are written here, Other arrays of non-primitive types are
+            // handled by serialization as this does not record the component type.
+            writeInt(VAL_OBJECTARRAY);
+            writeArray((Object[]) v);
+        } else if (v instanceof Serializable) {
+            // Must be last
+            writeInt(VAL_SERIALIZABLE);
+            writeSerializable((Serializable) v);
+        } else {
+            throw new RuntimeException("Parcel: unable to marshal value " + v);
+        }
     }
 }

