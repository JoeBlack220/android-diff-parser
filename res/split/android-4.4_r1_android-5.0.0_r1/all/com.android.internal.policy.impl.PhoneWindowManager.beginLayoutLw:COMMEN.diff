Find a functionally equivalent code:com.android.internal.policy.impl.PhoneWindowManager.beginLayoutLw:COMMENT
Method Modifier: public      internal    
Comment:/**
 * {@inheritDoc}
 */

@@ -49,58 +49,58 @@
     mRestrictedScreenTop = mUnrestrictedScreenTop;
     mRestrictedScreenWidth = mSystemGestures.screenWidth = mUnrestrictedScreenWidth;
     mRestrictedScreenHeight = mSystemGestures.screenHeight = mUnrestrictedScreenHeight;
-    mDockLeft = mContentLeft = mStableLeft = mStableFullscreenLeft = mCurLeft = mUnrestrictedScreenLeft;
-    mDockTop = mContentTop = mStableTop = mStableFullscreenTop = mCurTop = mUnrestrictedScreenTop;
-    mDockRight = mContentRight = mStableRight = mStableFullscreenRight = mCurRight = displayWidth - overscanRight;
-    mDockBottom = mContentBottom = mStableBottom = mStableFullscreenBottom = mCurBottom = displayHeight - overscanBottom;
+    mDockLeft = mContentLeft = mVoiceContentLeft = mStableLeft = mStableFullscreenLeft = mCurLeft = mUnrestrictedScreenLeft;
+    mDockTop = mContentTop = mVoiceContentTop = mStableTop = mStableFullscreenTop = mCurTop = mUnrestrictedScreenTop;
+    mDockRight = mContentRight = mVoiceContentRight = mStableRight = mStableFullscreenRight = mCurRight = displayWidth - overscanRight;
+    mDockBottom = mContentBottom = mVoiceContentBottom = mStableBottom = mStableFullscreenBottom = mCurBottom = displayHeight - overscanBottom;
     mDockLayer = 0x10000000;
     mStatusBarLayer = -1;
     // start with the current dock rect, which will be (0,0,displayWidth,displayHeight)
@@ -72,84 +72,87 @@
         // drive nav being hidden only by whether it is requested.
         final int sysui = mLastSystemUiFlags;
         boolean navVisible = (sysui & View.SYSTEM_UI_FLAG_HIDE_NAVIGATION) == 0;
-        boolean navTranslucent = (sysui & View.NAVIGATION_BAR_TRANSLUCENT) != 0;
+        boolean navTranslucent = (sysui & (View.NAVIGATION_BAR_TRANSLUCENT | View.SYSTEM_UI_TRANSPARENT)) != 0;
         boolean immersive = (sysui & View.SYSTEM_UI_FLAG_IMMERSIVE) != 0;
         boolean immersiveSticky = (sysui & View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY) != 0;
         boolean navAllowedHidden = immersive || immersiveSticky;
         // transient trumps translucent
         navTranslucent &= !immersiveSticky;
-        navTranslucent &= areTranslucentBarsAllowed();
+        boolean isKeyguardShowing = isStatusBarKeyguard() && !mHideLockScreen;
+        if (!isKeyguardShowing) {
+            navTranslucent &= areTranslucentBarsAllowed();
+        }
         // bar and ensure the application doesn't see the event.
         if (navVisible || navAllowedHidden) {
             if (mHideNavFakeWindow != null) {
@@ -116,122 +119,125 @@
                     // We currently want to hide the navigation UI.
                     mNavigationBarController.setBarShowingLw(false);
                 }
-                if (navVisible && !navTranslucent && !mNavigationBar.isAnimatingLw() && !mNavigationBarController.wasRecentlyTranslucent()) {
+                if (navVisible && !navTranslucent && !navAllowedHidden && !mNavigationBar.isAnimatingLw() && !mNavigationBarController.wasRecentlyTranslucent()) {
                     // If the opaque nav bar is currently requested to be visible,
                     // and not in the process of animating on or off, then
                     // we can tell the app that it is covered by it.
@@ -147,159 +150,162 @@
             }
             // Make sure the content and current rectangles are updated to
             // account for the restrictions from the navigation bar.
-            mContentTop = mCurTop = mDockTop;
-            mContentBottom = mCurBottom = mDockBottom;
-            mContentLeft = mCurLeft = mDockLeft;
-            mContentRight = mCurRight = mDockRight;
+            mContentTop = mVoiceContentTop = mCurTop = mDockTop;
+            mContentBottom = mVoiceContentBottom = mCurBottom = mDockBottom;
+            mContentLeft = mVoiceContentLeft = mCurLeft = mDockLeft;
+            mContentRight = mVoiceContentRight = mCurRight = mDockRight;
             mStatusBarLayer = mNavigationBar.getSurfaceLayer();
             // And compute the final frame.
-            mNavigationBar.computeFrameLw(mTmpNavigationFrame, mTmpNavigationFrame, mTmpNavigationFrame, mTmpNavigationFrame, mTmpNavigationFrame, dcf);
+            mNavigationBar.computeFrameLw(mTmpNavigationFrame, mTmpNavigationFrame, mTmpNavigationFrame, mTmpNavigationFrame, mTmpNavigationFrame, dcf, mTmpNavigationFrame);
             if (DEBUG_LAYOUT)
                 Slog.i(TAG, "mNavigationBar frame: " + mTmpNavigationFrame);
             if (mNavigationBarController.checkHiddenLw()) {
@@ -175,196 +178,201 @@
             vf.bottom = mStableBottom;
             mStatusBarLayer = mStatusBar.getSurfaceLayer();
             // Let the status bar determine its size.
-            mStatusBar.computeFrameLw(pf, df, vf, vf, vf, dcf);
+            mStatusBar.computeFrameLw(pf, df, vf, vf, vf, dcf, vf);
             // For layout, the status bar is always at the top with our fixed height.
             mStableTop = mUnrestrictedScreenTop + mStatusBarHeight;
             boolean statusBarTransient = (sysui & View.STATUS_BAR_TRANSIENT) != 0;
-            boolean statusBarTranslucent = (sysui & View.STATUS_BAR_TRANSLUCENT) != 0;
-            statusBarTranslucent &= areTranslucentBarsAllowed();
+            boolean statusBarTranslucent = (sysui & (View.STATUS_BAR_TRANSLUCENT | View.SYSTEM_UI_TRANSPARENT)) != 0;
+            if (!isKeyguardShowing) {
+                statusBarTranslucent &= areTranslucentBarsAllowed();
+            }
             // windows behind it to scroll.
             if (mStatusBar.isVisibleLw() && !statusBarTransient) {
                 // Status bar may go away, so the screen area it occupies
                 // is available to apps but just covering them when the
                 // status bar is visible.
                 mDockTop = mUnrestrictedScreenTop + mStatusBarHeight;
-                mContentTop = mCurTop = mDockTop;
-                mContentBottom = mCurBottom = mDockBottom;
-                mContentLeft = mCurLeft = mDockLeft;
-                mContentRight = mCurRight = mDockRight;
+                mContentTop = mVoiceContentTop = mCurTop = mDockTop;
+                mContentBottom = mVoiceContentBottom = mCurBottom = mDockBottom;
+                mContentLeft = mVoiceContentLeft = mCurLeft = mDockLeft;
+                mContentRight = mVoiceContentRight = mCurRight = mDockRight;
                 if (DEBUG_LAYOUT)
                     Slog.v(TAG, "Status bar: " + String.format("dock=[%d,%d][%d,%d] content=[%d,%d][%d,%d] cur=[%d,%d][%d,%d]", mDockLeft, mDockTop, mDockRight, mDockBottom, mContentLeft, mContentTop, mContentRight, mContentBottom, mCurLeft, mCurTop, mCurRight, mCurBottom));
             }

