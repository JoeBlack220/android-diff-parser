Find a functionally equivalent code:com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager.showBouncerOrKeyguard:COMMENT
Method Modifier: private     
Comment:/**
 * Shows the notification keyguard or the bouncer depending on
 * {@link KeyguardBouncer#needsFullscreenBouncer()}.
 */

@@ -2,8 +2,8 @@
     if (mBouncer.needsFullscreenBouncer()) {
         // The keyguard might be showing (already). So we need to hide it.
         mPhoneStatusBar.hideKeyguard();
-        mBouncer.show();
+        mBouncer.show(true);
     } else {
         mPhoneStatusBar.showKeyguard();
         mBouncer.hide(false);

Find a functionally equivalent code:com.android.internal.policy.impl.PhoneWindowManager.applyPostLayoutPolicyLw:COMMENT
Method Modifier: public      internal    
Comment:/**
 * {@inheritDoc}
 */

@@ -30,49 +30,53 @@
         }
         final boolean showWhenLocked = (fl & FLAG_SHOW_WHEN_LOCKED) != 0;
         final boolean dismissKeyguard = (fl & FLAG_DISMISS_KEYGUARD) != 0;
-        final boolean secureKeyguard = isKeyguardSecure();
-        if (appWindow) {
-            final IApplicationToken appToken = win.getAppToken();
+        final IApplicationToken appToken = win.getAppToken();
+        // windows we defer the decision to the window it is attached to.
+        if (appWindow && attached == null) {
             if (showWhenLocked) {
                 // Remove any previous windows with the same appToken.
                 mAppsToBeHidden.remove(appToken);
                 mAppsThatDismissKeyguard.remove(appToken);
-                if (mAppsToBeHidden.isEmpty() && isKeyguardSecureIncludingHidden()) {
-                    mWinShowWhenLocked = win;
-                    mHideLockScreen = true;
-                    mForceStatusBarFromKeyguard = false;
+                if (mAppsToBeHidden.isEmpty()) {
+                    if (dismissKeyguard && !mKeyguardSecure) {
+                        mAppsThatDismissKeyguard.add(appToken);
+                    } else {
+                        mWinShowWhenLocked = win;
+                        mHideLockScreen = true;
+                        mForceStatusBarFromKeyguard = false;
+                    }
                 }
             } else if (dismissKeyguard) {
-                if (secureKeyguard) {
+                if (mKeyguardSecure) {
                     mAppsToBeHidden.add(appToken);
                 } else {
                     mAppsToBeHidden.remove(appToken);
@@ -61,67 +65,71 @@
                         Slog.v(TAG, "Setting mDismissKeyguard true by win " + win);
                     mDismissKeyguard = mWinDismissingKeyguard == win ? DISMISS_KEYGUARD_CONTINUE : DISMISS_KEYGUARD_START;
                     mWinDismissingKeyguard = win;
-                    mForceStatusBarFromKeyguard = mShowingLockscreen && secureKeyguard;
+                    mForceStatusBarFromKeyguard = mShowingLockscreen && mKeyguardSecure;
                 } else if (mAppsToBeHidden.isEmpty() && showWhenLocked) {
                     if (DEBUG_LAYOUT)
                         Slog.v(TAG, "Setting mHideLockScreen to true by win " + win);

Find a functionally equivalent code:android.widget.RadialTimePickerView.setCurrentHour:COMMENT
Method Modifier: public      
Comment:/**
 * Sets the current hour in 24-hour time.
 *
 * @param hour the current hour between 0 and 23 (inclusive)
 */

@@ -1,16 +1,3 @@
 {
-    final int degrees = (hour % 12) * DEGREES_FOR_ONE_HOUR;
-    mSelectionDegrees[HOURS] = degrees;
-    mSelectionDegrees[HOURS_INNER] = degrees;
-    // 0 is 12 AM (midnight) and 12 is 12 PM (noon).
-    mAmOrPm = (hour == 0 || (hour % 24) < 12) ? AM : PM;
-    if (mIs24HourMode) {
-        // Inner circle is 1 through 12.
-        mIsOnInnerCircle = hour >= 1 && hour <= 12;
-    } else {
-        mIsOnInnerCircle = false;
-    }
-    initData();
-    updateLayoutData();
-    invalidate();
+    setCurrentHourInternal(hour, true, false);
 }

Find a functionally equivalent code:android.content.res.BridgeTypedArray.getDrawable:COMMENT
Method Modifier: public      
Comment:/**
 * Retrieve the Drawable for the attribute at <var>index</var>.  This
 * gets the resource ID of the selected attribute, and uses
 * {@link Resources#getDrawable Resources.getDrawable} of the owning
 * Resources object to retrieve its Drawable.
 *
 * @param index Index of attribute to retrieve.
 *
 * @return Drawable for the attribute, or null if not defined.
 */

@@ -3,7 +3,7 @@
         return null;
     }
     ResourceValue value = mResourceData[index];
-    return ResourceHelper.getDrawable(value, mContext);
+    return ResourceHelper.getDrawable(value, mContext, mTheme);
 }

Find a functionally equivalent code:android.webkit.WebSettings.setBuiltInZoomControls:COMMENT
<android.webkit.WebSettings: void setBuiltInZoomControls(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:// {@link WebView#getZoomControls}, which is now hidden.

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.content.res.Resources.loadDrawable:COMMENT
Method Modifier: 
Comment:/*package*/

@@ -37,43 +37,50 @@
     }
     final Drawable dr;
     if (cs != null) {
-        dr = cs.newDrawable(this, theme);
+        final Drawable clonedDr = cs.newDrawable(this);
+        if (theme != null) {
+            dr = clonedDr.mutate();
+            dr.applyTheme(theme);
+            dr.clearMutated();
+        } else {
+            dr = clonedDr;
+        }
     } else if (isColorDrawable) {
         dr = new ColorDrawable(value.data);
     } else {

Find a functionally equivalent code:android.telephony.ServiceState.fillInNotifierBundle:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * Set intent notifier Bundle based on service state.
 *
 * @param m intent notifier Bundle
 * @hide
 */

@@ -1,10 +1,14 @@
 {
     m.putInt("voiceRegState", mVoiceRegState);
     m.putInt("dataRegState", mDataRegState);
-    m.putBoolean("roaming", Boolean.valueOf(mRoaming));
-    m.putString("operator-alpha-long", mOperatorAlphaLong);
-    m.putString("operator-alpha-short", mOperatorAlphaShort);
-    m.putString("operator-numeric", mOperatorNumeric);
+    m.putInt("voiceRoamingType", mVoiceRoamingType);
+    m.putInt("dataRoamingType", mDataRoamingType);
+    m.putString("operator-alpha-long", mVoiceOperatorAlphaLong);
+    m.putString("operator-alpha-short", mVoiceOperatorAlphaShort);
+    m.putString("operator-numeric", mVoiceOperatorNumeric);
+    m.putString("data-operator-alpha-long", mDataOperatorAlphaLong);
+    m.putString("data-operator-alpha-short", mDataOperatorAlphaShort);
+    m.putString("data-operator-numeric", mDataOperatorNumeric);
     m.putBoolean("manual", Boolean.valueOf(mIsManualNetworkSelection));
     m.putInt("radioTechnology", mRilVoiceRadioTechnology);
     m.putInt("dataRadioTechnology", mRilDataRadioTechnology);

Find a functionally equivalent code:android.webkit.WebSettings.setLoadsImagesAutomatically:COMMENT
<android.webkit.WebSettings: void setLoadsImagesAutomatically(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets whether the WebView should load image resources. Note that this method
 * controls loading of all images, including those embedded using the data
 * URI scheme. Use {@link #setBlockNetworkImage} to control loading only
 * of images specified using network URI schemes. Note that if the value of this
 * setting is changed from false to true, all images resources referenced
 * by content currently displayed by the WebView are loaded automatically.
 * The default is true.
 *
 * @param flag whether the WebView should load image resources
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.server.NativeDaemonEvent.parseRawEvent:COMMENT
Method Modifier: public      static      
Comment:/**
 * Parse the given raw event into {@link NativeDaemonEvent} instance.
 *
 * @throws IllegalArgumentException when line doesn't match format expected
 * from native side.
 */

@@ -23,28 +23,33 @@
             throw new IllegalArgumentException("problem parsing cmdNumber", e);
         }
     }
+    String logMessage = rawEvent;
+    if (parsed.length > 2 && parsed[2].equals(SENSITIVE_MARKER)) {
+        skiplength += parsed[2].length() + 1;
+        logMessage = parsed[0] + " " + parsed[1] + " {}";
+    }
     final String message = rawEvent.substring(skiplength);
-    return new NativeDaemonEvent(cmdNumber, code, message, rawEvent);
+    return new NativeDaemonEvent(cmdNumber, code, message, rawEvent, logMessage);
 }

Find a functionally equivalent code:com.android.systemui.statusbar.phone.PanelView.startUnlockHintAnimationPhase1:COMMENT
Method Modifier: private     
Comment:/**
 * Phase 1: Move everything upwards.
 */

@@ -24,35 +24,34 @@
     });
     animator.start();
     mHeightAnimator = animator;
-    mOriginalIndicationY = mKeyguardBottomArea.getIndicationView().getY();
-    mKeyguardBottomArea.getIndicationView().animate().y(mOriginalIndicationY - mHintDistance).setDuration(250).setInterpolator(mFastOutSlowInInterpolator).withEndAction(new Runnable() {
+    mKeyguardBottomArea.getIndicationView().animate().translationY(-mHintDistance).setDuration(250).setInterpolator(mFastOutSlowInInterpolator).withEndAction(new Runnable() {
 
         @Override
         public void run() {
-            mKeyguardBottomArea.getIndicationView().animate().y(mOriginalIndicationY).setDuration(450).setInterpolator(mBounceInterpolator).start();
+            mKeyguardBottomArea.getIndicationView().animate().translationY(0).setDuration(450).setInterpolator(mBounceInterpolator).start();
         }
     }).start();
 }

Find a functionally equivalent code:com.android.systemui.recents.views.TaskStackViewScroller.stopBoundScrollAnimation:COMMENT
Method Modifier: 
Comment:/**
 * Aborts any current stack scrolls
 */

@@ -1,6 +1,3 @@
 {
-    if (mScrollAnimator != null) {
-        mScrollAnimator.removeAllListeners();
-        mScrollAnimator.cancel();
-    }
+    Utilities.cancelAnimationWithoutCallbacks(mScrollAnimator);
 }

Find a functionally equivalent code:android.graphics.drawable.RippleDrawable.tryBackgroundEnter:COMMENT
Method Modifier: private     
Comment:/**
 * Creates an active hotspot at the specified location.
 */

@@ -2,8 +2,7 @@
     if (mBackground == null) {
         mBackground = new RippleBackground(this, mHotspotBounds);
     }
-    final int color = mState.mColor.getColorForState(getState(), Color.TRANSPARENT);
-    mBackground.setup(mState.mMaxRadius, color, mDensity);
-    mBackground.enter();
+    mBackground.setup(mState.mMaxRadius, mDensity);
+    mBackground.enter(focused);
 }

Find a functionally equivalent code:android.webkit.WebView.clearMatches:COMMENT
Method Modifier: public      
Comment:/**
 * Clears the highlighting surrounding text matches created by
 * {@link #findAllAsync}.
 */

@@ -1,6 +1,6 @@
 {
     checkThread();
-    if (DebugFlags.TRACE_API)
+    if (TRACE)
         Log.d(LOGTAG, "clearMatches");
     mProvider.clearMatches();
 }

Find a functionally equivalent code:com.android.server.wm.WindowState.isOnScreen:COMMENT
Method Modifier: 
Comment:/**
 * Is this window currently on-screen?  It is on-screen either if it
 * is visible or it is currently running an animation before no longer
 * being visible.
 */

@@ -1,10 +1,3 @@
 {
-    if (!mHasSurface || !mPolicyVisibility || mDestroying) {
-        return false;
-    }
-    final AppWindowToken atoken = mAppToken;
-    if (atoken != null) {
-        return ((!mAttachedHidden && !atoken.hiddenRequested) || mWinAnimator.mAnimation != null || atoken.mAppAnimator.animation != null);
-    }
-    return !mAttachedHidden || mWinAnimator.mAnimation != null;
+    return mPolicyVisibility && isOnScreenIgnoringKeyguard();
 }

Find a functionally equivalent code:com.android.internal.policy.impl.PhoneWindow.onKeyDownPanel:COMMENT
Method Modifier: public      final       internal    
Comment:/**
 * Called when the panel key is pushed down.
 * @param featureId The feature ID of the relevant panel (defaults to FEATURE_OPTIONS_PANEL}.
 * @param event The key event.
 * @return Whether the key was handled.
 */

@@ -3,10 +3,10 @@
     if (event.getRepeatCount() == 0) {
         // The panel key was pushed, so set the chording key
         mPanelChordingKey = keyCode;
-        PanelFeatureState st = getPanelState(featureId, true);
-        if (!st.isOpen) {
+        PanelFeatureState st = getPanelState(featureId, false);
+        if (st != null && !st.isOpen) {
             return preparePanel(st, event);
         }
     }

Find a functionally equivalent code:com.android.internal.util.XmlUtils.writeValueXml:COMMENT
Method Modifier: private     static      final       internal    
Comment:/**
 * Flatten an object's value into an XmlSerializer.  The value can later
 * be read back with readThisValueXml().
 *
 * Currently supported value types are: null, String, Integer, Long,
 * Float, Double Boolean, Map, List.
 *
 * @param v The object to be flattened.
 * @param name Name attribute to include with this value's tag, or null
 * for none.
 * @param out XmlSerializer to write the object into.
 * @param callback Handler for Object types not recognized.
 *
 * @see #writeMapXml
 * @see #writeListXml
 * @see #readValueXml
 */

@@ -40,45 +40,48 @@
     } else if (v instanceof String[]) {
         writeStringArrayXml((String[]) v, name, out);
         return;
+    } else if (v instanceof boolean[]) {
+        writeBooleanArrayXml((boolean[]) v, name, out);
+        return;
     } else if (v instanceof Map) {
         writeMapXml((Map) v, name, out);
         return;

Find a functionally equivalent code:android.graphics.drawable.Ripple.draw:COMMENT
Method Modifier: public      
Comment:/**
 * Draws the ripple centered at (0,0) using the specified paint.
 */

@@ -6,13 +6,13 @@
     }
     mCanUseHardware = canUseHardware;
     final boolean hasContent;
-    if (canUseHardware && mHardwareAnimating) {
-        hasContent = drawHardware((HardwareCanvas) c);
+    if (canUseHardware && (mHardwareAnimating || mHasPendingHardwareExit)) {
+        hasContent = drawHardware((HardwareCanvas) c, p);
     } else {
         hasContent = drawSoftware(c, p);
     }

Find a functionally equivalent code:android.webkit.WebSettings.setGeolocationEnabled:COMMENT
<android.webkit.WebSettings: void setGeolocationEnabled(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets whether Geolocation is enabled. The default is true.
 * <p>
 * Please note that in order for the Geolocation API to be usable
 * by a page in the WebView, the following requirements must be met:
 * <ul>
 * <li>an application must have permission to access the device location,
 * see {@link android.Manifest.permission#ACCESS_COARSE_LOCATION},
 * {@link android.Manifest.permission#ACCESS_FINE_LOCATION};
 * <li>an application must provide an implementation of the
 * {@link WebChromeClient#onGeolocationPermissionsShowPrompt} callback
 * to receive notifications that a page is requesting access to location
 * via the JavaScript Geolocation API.
 * </ul>
 * <p>
 * As an option, it is possible to store previous locations and web origin
 * permissions in a database. See {@link #setGeolocationDatabasePath}.
 *
 * @param flag whether Geolocation should be enabled
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.systemui.recents.views.TaskViewHeader.rebindToTask:COMMENT
Method Modifier: public      
Comment:/**
 * Binds the bar view to the task
 */

@@ -19,23 +19,23 @@
     mCurrentPrimaryColorIsDark = t.useLightOnPrimaryColor;
     mActivityDescription.setTextColor(t.useLightOnPrimaryColor ? mConfig.taskBarViewLightTextColor : mConfig.taskBarViewDarkTextColor);
     mDismissButton.setImageDrawable(t.useLightOnPrimaryColor ? mLightDismissDrawable : mDarkDismissDrawable);
-    mDismissButton.setContentDescription(getContext().getString(R.string.accessibility_recents_item_will_be_dismissed, t.activityLabel));
+    mDismissButton.setContentDescription(String.format(mDismissContentDescription, t.activityLabel));
 }

Find a functionally equivalent code:android.media.AudioService.registerAudioPolicy:COMMENT
Method Modifier: public      
Comment:// ==========================================================================================

@@ -1,21 +1,28 @@
 {
-    // Log.v(TAG, "registerAudioPolicy for " + cb + " got policy:" + policyConfig);
-    boolean hasPermissionForPolicy = (PackageManager.PERMISSION_GRANTED == mContext.checkCallingOrSelfPermission(android.Manifest.permission.MODIFY_AUDIO_ROUTING));
+    if (DEBUG_AP)
+        Log.d(TAG, "registerAudioPolicy for " + pcb.asBinder() + " with config:" + policyConfig);
+    String regId = null;
+    // error handling
+    boolean hasPermissionForPolicy = (PackageManager.PERMISSION_GRANTED == mContext.checkCallingPermission(android.Manifest.permission.MODIFY_AUDIO_ROUTING));
     if (!hasPermissionForPolicy) {
         Slog.w(TAG, "Can't register audio policy for pid " + Binder.getCallingPid() + " / uid " + Binder.getCallingUid() + ", need MODIFY_AUDIO_ROUTING");
-        return false;
+        return null;
     }
     synchronized (mAudioPolicies) {
-        AudioPolicyProxy app = new AudioPolicyProxy(policyConfig, cb);
         try {
-            cb.linkToDeath(app, 0);
-            mAudioPolicies.put(cb, app);
+            if (mAudioPolicies.containsKey(pcb.asBinder())) {
+                Slog.e(TAG, "Cannot re-register policy");
+                return null;
+            }
+            AudioPolicyProxy app = new AudioPolicyProxy(policyConfig, pcb, hasFocusListener);
+            pcb.asBinder().linkToDeath(app, 0);
+            regId = app.getRegistrationId();
+            mAudioPolicies.put(pcb.asBinder(), app);
         } catch (RemoteException e) {
             // audio policy owner has already died!
-            Slog.w(TAG, "Audio policy registration failed, could not link to " + cb + " binder death", e);
-            return false;
+            Slog.w(TAG, "Audio policy registration failed, could not link to " + pcb + " binder death", e);
+            return null;
         }
     }
-    // TODO implement registration with native audio policy (including permission check)
-    return true;
+    return regId;
 }

Find a functionally equivalent code:android.net.ConnectivityManager.setProcessDefaultNetwork:COMMENT
Method Modifier: public      static      
Comment:/**
 * Binds the current process to {@code network}.  All Sockets created in the future
 * (and not explicitly bound via a bound SocketFactory from
 * {@link Network#getSocketFactory() Network.getSocketFactory()}) will be bound to
 * {@code network}.  All host name resolutions will be limited to {@code network} as well.
 * Note that if {@code network} ever disconnects, all Sockets created in this way will cease to
 * work and all host name resolutions will fail.  This is by design so an application doesn't
 * accidentally use Sockets it thinks are still bound to a particular {@link Network}.
 * To clear binding pass {@code null} for {@code network}.  Using individually bound
 * Sockets created by Network.getSocketFactory().createSocket() and
 * performing network-specific host name resolutions via
 * {@link Network#getAllByName Network.getAllByName} is preferred to calling
 * {@code setProcessDefaultNetwork}.
 *
 * @param network The {@link Network} to bind the current process to, or {@code null} to clear
 * the current binding.
 * @return {@code true} on success, {@code false} if the {@link Network} is no longer valid.
 */

@@ -4,9 +4,12 @@
         return true;
     }
     if (NetworkUtils.bindProcessToNetwork(netId)) {
+        // Set HTTP proxy system properties to match network.
+        // TODO: Deprecate this static method and replace it with a non-static version.
+        Proxy.setHttpProxySystemProperty(getInstance().getDefaultProxy());
         // Must flush DNS cache as new network may have different DNS resolutions.
         InetAddress.clearDnsCache();
         // Must flush socket pool as idle sockets will be bound to previous network and may

Find a functionally equivalent code:android.view.Window.setFlags:COMMENT
Method Modifier: public      
Comment:/**
 * Set the flags of the window, as per the
 * {@link WindowManager.LayoutParams WindowManager.LayoutParams}
 * flags.
 *
 * <p>Note that some flags must be set before the window decoration is
 * created (by the first call to
 * {@link #setContentView(View, android.view.ViewGroup.LayoutParams)} or
 * {@link #getDecorView()}:
 * {@link WindowManager.LayoutParams#FLAG_LAYOUT_IN_SCREEN} and
 * {@link WindowManager.LayoutParams#FLAG_LAYOUT_INSET_DECOR}.  These
 * will be set for you based on the {@link android.R.attr#windowIsFloating}
 * attribute.
 *
 * @param flags The new window flags (see WindowManager.LayoutParams).
 * @param mask Which of the window flag bits to modify.
 * @see #addFlags
 * @see #clearFlags
 */

@@ -1,9 +1,6 @@
 {
     final WindowManager.LayoutParams attrs = getAttributes();
     attrs.flags = (attrs.flags & ~mask) | (flags & mask);
-    if ((mask & WindowManager.LayoutParams.FLAG_NEEDS_MENU_KEY) != 0) {
-        attrs.privateFlags |= WindowManager.LayoutParams.PRIVATE_FLAG_SET_NEEDS_MENU_KEY;
-    }
     mForcedWindowFlags |= mask;
     dispatchWindowAttributesChanged(attrs);
 }

Find a functionally equivalent code:android.media.session.MediaSession.setPlaybackToRemote:COMMENT
Method Modifier: public      
Comment:/**
 * Configure this session to use remote volume handling. This must be called
 * to receive volume button events, otherwise the system will adjust the
 * appropriate stream volume for this session. If
 * {@link #setPlaybackToLocal} was previously called the system will stop
 * handling volume changes for this session and pass them to the volume
 * provider instead.
 *
 * @param volumeProvider The provider that will handle volume changes. May
 * not be null.
 */

@@ -2,8 +2,10 @@
     if (volumeProvider == null) {
         throw new IllegalArgumentException("volumeProvider may not be null!");
     }
-    mVolumeProvider = volumeProvider;
+    synchronized (mLock) {
+        mVolumeProvider = volumeProvider;
+    }
     volumeProvider.setCallback(new VolumeProvider.Callback() {
 
         @Override

Find a functionally equivalent code:android.media.MediaFocusControl.removeFocusStackEntry:COMMENT
Method Modifier: private     
Comment:/**
 * Helper function:
 * Called synchronized on mAudioFocusLock
 * Remove a focus listener from the focus stack.
 * @param clientToRemove the focus listener
 * @param signal if true and the listener was at the top of the focus stack, i.e. it was holding
 * focus, notify the next item in the stack it gained focus.
 */

@@ -4,9 +4,14 @@
         // Log.i(TAG, "   removeFocusStackEntry() removing top of stack");
         FocusRequester fr = mFocusStack.pop();
         fr.release();
+        if (notifyFocusFollowers) {
+            final AudioFocusInfo afi = fr.toAudioFocusInfo();
+            afi.clearLossReceived();
+            notifyExtPolicyFocusLoss_syncAf(afi, false);
+        }
         if (signal) {
             // notify the new top of the stack it gained focus
             notifyTopOfAudioFocusStack();

Find a functionally equivalent code:com.android.server.pm.UserManagerService.initDefaultGuestRestrictions:COMMENT
Method Modifier: private     
Comment:/**
 * If default guest restrictions haven't been initialized yet, add the basic
 * restrictions.
 */

@@ -1,6 +1,6 @@
 {
     if (mGuestRestrictions.isEmpty()) {
         mGuestRestrictions.putBoolean(UserManager.DISALLOW_OUTGOING_CALLS, true);
-        writeUserListLocked();
+        mGuestRestrictions.putBoolean(UserManager.DISALLOW_SMS, true);
     }
 }

Find a functionally equivalent code:com.android.internal.widget.LockPatternUtils.saveLockPassword:COMMENT
Method Modifier: public      internal    
Comment:/**
 * Save a lock password.  Does not ensure that the password is as good
 * as the requested mode, but will adjust the mode to be as good as the
 * pattern.
 * @param password The password to save
 * @param quality {@see DevicePolicyManager#getPasswordQuality(android.content.ComponentName)}
 * @param isFallback Specifies if this is a fallback to biometric weak
 */


Find a functionally equivalent code:com.android.systemui.recents.views.SystemBarScrimViews.startExitRecentsAnimation:COMMENT
Method Modifier: public      
Comment:/**
 * Starts animating the scrim views when leaving Recents (either via launching a task, or
 * going home).
 */

@@ -1,8 +1,8 @@
 {
     if (mHasStatusBarScrim && mShouldAnimateStatusBarScrim) {
-        mStatusBarScrimView.animate().translationY(-mStatusBarScrimView.getMeasuredHeight()).setStartDelay(0).setDuration(mConfig.taskBarExitAnimDuration).setInterpolator(mConfig.fastOutSlowInInterpolator).start();
+        mStatusBarScrimView.animate().translationY(-mStatusBarScrimView.getMeasuredHeight()).setStartDelay(0).setDuration(mConfig.taskViewExitToAppDuration).setInterpolator(mConfig.fastOutSlowInInterpolator).start();
     }
     if (mHasNavBarScrim && mShouldAnimateNavBarScrim) {
-        mNavBarScrimView.animate().translationY(mNavBarScrimView.getMeasuredHeight()).setStartDelay(0).setDuration(mConfig.taskBarExitAnimDuration).setInterpolator(mConfig.fastOutSlowInInterpolator).start();
+        mNavBarScrimView.animate().translationY(mNavBarScrimView.getMeasuredHeight()).setStartDelay(0).setDuration(mConfig.taskViewExitToAppDuration).setInterpolator(mConfig.fastOutSlowInInterpolator).start();
     }
 }

Find a functionally equivalent code:android.app.Activity.closeOptionsMenu:COMMENT
Method Modifier: public      
Comment:/**
 * Progammatically closes the options menu. If the options menu is already
 * closed, this method does nothing.
 */

@@ -1,3 +1,5 @@
 {
-    mWindow.closePanel(Window.FEATURE_OPTIONS_PANEL);
+    if (mWindow.hasFeature(Window.FEATURE_OPTIONS_PANEL)) {
+        mWindow.closePanel(Window.FEATURE_OPTIONS_PANEL);
+    }
 }

Find a functionally equivalent code:android.webkit.CookieManager.acceptCookie:COMMENT
<android.webkit.CookieManager: boolean acceptCookie()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets whether the application's {@link WebView} instances send and accept
 * cookies.
 *
 * @return true if {@link WebView} instances send and accept cookies
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.view.accessibility.AccessibilityNodeInfo.initFromParcel:COMMENT
Method Modifier: private     
Comment:/**
 * Creates a new instance from a {@link Parcel}.
 *
 * @param parcel A parcel containing the state of a {@link AccessibilityNodeInfo}.
 */

@@ -5,10 +5,12 @@
     mParentNodeId = parcel.readLong();
     mLabelForId = parcel.readLong();
     mLabeledById = parcel.readLong();
+    mTraversalBefore = parcel.readLong();
+    mTraversalAfter = parcel.readLong();
     mConnectionId = parcel.readInt();
     final int childrenSize = parcel.readInt();
     if (childrenSize <= 0) {

Find a functionally equivalent code:com.android.internal.policy.impl.PhoneWindowManager.interceptKeyBeforeQueueing:COMMENT
Method Modifier: public      internal    
Comment:/**
 * {@inheritDoc}
 */

@@ -12,18 +12,18 @@
     // the same as if it were open and in front.
     // This will prevent any keys other than the power button from waking the screen
     // when the keyguard is hidden by another activity.
-    final boolean keyguardActive = (mKeyguardDelegate == null ? false : (interactive ? mKeyguardDelegate.isShowingAndNotOccluded() : mKeyguardDelegate.isShowing()));
+    final boolean keyguardActive = (mKeyguardDelegate == null ? false : (interactive ? isKeyguardShowingAndNotOccluded() : mKeyguardDelegate.isShowing()));
     if (DEBUG_INPUT) {
         Log.d(TAG, "interceptKeyTq keycode=" + keyCode + " interactive=" + interactive + " keyguardActive=" + keyguardActive + " policyFlags=" + Integer.toHexString(policyFlags));
     }
@@ -39,47 +39,47 @@
         }
     }
     // key processing.
-    if (mGlobalKeyManager.shouldHandleGlobalKey(keyCode, event)) {
+    if (isValidGlobalKey(keyCode) && mGlobalKeyManager.shouldHandleGlobalKey(keyCode, event)) {
         if (isWakeKey) {
-            mPowerManager.wakeUp(event.getEventTime());
+            wakeUp(event.getEventTime(), mAllowTheaterModeWakeFromKey);
         }
         return result;
     }
@@ -54,79 +54,79 @@
             {
                 if (keyCode == KeyEvent.KEYCODE_VOLUME_DOWN) {
                     if (down) {
-                        if (interactive && !mVolumeDownKeyTriggered && (event.getFlags() & KeyEvent.FLAG_FALLBACK) == 0) {
-                            mVolumeDownKeyTriggered = true;
-                            mVolumeDownKeyTime = event.getDownTime();
-                            mVolumeDownKeyConsumedByScreenshotChord = false;
+                        if (interactive && !mScreenshotChordVolumeDownKeyTriggered && (event.getFlags() & KeyEvent.FLAG_FALLBACK) == 0) {
+                            mScreenshotChordVolumeDownKeyTriggered = true;
+                            mScreenshotChordVolumeDownKeyTime = event.getDownTime();
+                            mScreenshotChordVolumeDownKeyConsumed = false;
                             cancelPendingPowerKeyAction();
                             interceptScreenshotChord();
                         }
                     } else {
-                        mVolumeDownKeyTriggered = false;
+                        mScreenshotChordVolumeDownKeyTriggered = false;
                         cancelPendingScreenshotChordAction();
                     }
                 } else if (keyCode == KeyEvent.KEYCODE_VOLUME_UP) {
                     if (down) {
-                        if (interactive && !mVolumeUpKeyTriggered && (event.getFlags() & KeyEvent.FLAG_FALLBACK) == 0) {
-                            mVolumeUpKeyTriggered = true;
+                        if (interactive && !mScreenshotChordVolumeUpKeyTriggered && (event.getFlags() & KeyEvent.FLAG_FALLBACK) == 0) {
+                            mScreenshotChordVolumeUpKeyTriggered = true;
                             cancelPendingPowerKeyAction();
                             cancelPendingScreenshotChordAction();
                         }
                     } else {
-                        mVolumeUpKeyTriggered = false;
+                        mScreenshotChordVolumeUpKeyTriggered = false;
                         cancelPendingScreenshotChordAction();
                     }
                 }
@@ -122,138 +122,146 @@
                     if (telecomManager != null) {
                         hungUp = telecomManager.endCall();
                     }
-                    interceptPowerKeyDown(!interactive || hungUp);
+                    if (interactive && !hungUp) {
+                        mEndCallKeyHandled = false;
+                        mHandler.postDelayed(mEndCallLongPress, ViewConfiguration.get(mContext).getDeviceGlobalActionKeyTimeout());
+                    } else {
+                        mEndCallKeyHandled = true;
+                    }
                 } else {
-                    if (interceptPowerKeyUp(canceled)) {
-                        if ((mEndcallBehavior & Settings.System.END_BUTTON_BEHAVIOR_HOME) != 0) {
-                            if (goHome()) {
-                                break;
+                    if (!mEndCallKeyHandled) {
+                        mHandler.removeCallbacks(mEndCallLongPress);
+                        if (!canceled) {
+                            if ((mEndcallBehavior & Settings.System.END_BUTTON_BEHAVIOR_HOME) != 0) {
+                                if (goHome()) {
+                                    break;
+                                }
                             }
-                        }
-                        if ((mEndcallBehavior & Settings.System.END_BUTTON_BEHAVIOR_SLEEP) != 0) {
-                            mPowerManager.goToSleep(event.getEventTime(), PowerManager.GO_TO_SLEEP_REASON_POWER_BUTTON, 0);
-                            isWakeKey = false;
+                            if ((mEndcallBehavior & Settings.System.END_BUTTON_BEHAVIOR_SLEEP) != 0) {
+                                mPowerManager.goToSleep(event.getEventTime(), PowerManager.GO_TO_SLEEP_REASON_POWER_BUTTON, 0);
+                                isWakeKey = false;
+                            }
                         }
                     }
                 }
@@ -141,182 +149,160 @@
         case KeyEvent.KEYCODE_POWER:
             {
                 result &= ~ACTION_PASS_TO_USER;
+                // wake-up will be handled separately
+                isWakeKey = false;
                 if (down) {
-                    boolean panic = mImmersiveModeConfirmation.onPowerKeyDown(interactive, event.getDownTime(), isImmersiveMode(mLastSystemUiFlags));
-                    if (panic) {
-                        mHandler.post(mRequestTransientNav);
-                    }
-                    if (interactive && !mPowerKeyTriggered && (event.getFlags() & KeyEvent.FLAG_FALLBACK) == 0) {
-                        mPowerKeyTriggered = true;
-                        mPowerKeyTime = event.getDownTime();
-                        interceptScreenshotChord();
-                    }
-                    TelecomManager telecomManager = getTelecommService();
-                    boolean hungUp = false;
-                    if (telecomManager != null) {
-                        if (telecomManager.isRinging()) {
-                            // Pressing Power while there's a ringing incoming
-                            // call should silence the ringer.
-                            telecomManager.silenceRinger();
-                        } else if ((mIncallPowerBehavior & Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR_HANGUP) != 0 && telecomManager.isInCall() && interactive) {
-                            // Otherwise, if "Power button ends call" is enabled,
-                            // the Power button will hang up any current active call.
-                            hungUp = telecomManager.endCall();
-                        }
-                    }
-                    interceptPowerKeyDown(!interactive || hungUp || mVolumeDownKeyTriggered || mVolumeUpKeyTriggered);
+                    interceptPowerKeyDown(event, interactive);
                 } else {
-                    mPowerKeyTriggered = false;
-                    cancelPendingScreenshotChordAction();
-                    if (interceptPowerKeyUp(canceled || mPendingPowerKeyUpCanceled)) {
-                        if (mScreenOnEarly && !mScreenOnFully) {
-                            Slog.i(TAG, "Suppressed redundant power key press while " + "already in the process of turning the screen on.");
-                        } else {
-                            powerShortPress(event.getEventTime());
-                        }
-                        isWakeKey = false;
-                    }
-                    mPendingPowerKeyUpCanceled = false;
+                    interceptPowerKeyUp(event, interactive, canceled);
                 }
                 break;
             }
@@ -259,265 +237,243 @@
         performHapticFeedbackLw(null, HapticFeedbackConstants.VIRTUAL_KEY, false);
     }
     if (isWakeKey) {
-        mPowerManager.wakeUp(event.getEventTime());
+        wakeUp(event.getEventTime(), mAllowTheaterModeWakeFromKey);
     }
     return result;
 }

Find a functionally equivalent code:android.widget.AbsListView.RecycleBin.fillActiveViews:COMMENT
Method Modifier: 
Comment:/**
 * Fill ActiveViews with all of the children of the AbsListView.
 *
 * @param childCount The minimum number of views mActiveViews should hold
 * @param firstActivePosition The position of the first view that will be stored in
 * mActiveViews
 */

@@ -13,18 +13,20 @@
             // Note:  We do place AdapterView.ITEM_VIEW_TYPE_IGNORE in active views.
             // However, we will NOT place them into scrap views.
             activeViews[i] = child;
+            // Remember the position so that setupChild() doesn't reset state.
+            lp.scrappedFromPosition = firstActivePosition + i;
         }
     }
 }

Find a functionally equivalent code:android.widget.SearchView.setInputType:COMMENT
Method Modifier: public      
Comment:/**
 * Sets the input type on the query text field.
 *
 * @see TextView#setInputType(int)
 * @param inputType the input type to set on the query text field
 *
 * @attr ref android.R.styleable#SearchView_inputType
 */

@@ -1,3 +1,3 @@
 {
-    mQueryTextView.setInputType(inputType);
+    mSearchSrcTextView.setInputType(inputType);
 }

Find a functionally equivalent code:android.widget.AbsListView.positionSelectorLikeTouch:COMMENT
Method Modifier: 
Comment:/**
 * Positions the selector in a way that mimics touch.
 */

@@ -1,6 +1,3 @@
 {
-    positionSelectorLikeFocus(position, sel);
-    if (mSelector != null && position != INVALID_POSITION) {
-        mSelector.setHotspot(x, y);
-    }
+    positionSelector(position, sel, true, x, y);
 }

Find a functionally equivalent code:android.webkit.WebSettings.setBlockNetworkLoads:COMMENT
<android.webkit.WebSettings: void setBlockNetworkLoads(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets whether the WebView should not load resources from the network.
 * Use {@link #setBlockNetworkImage} to only avoid loading
 * image resources. Note that if the value of this setting is
 * changed from true to false, network resources referenced by content
 * currently displayed by the WebView are not fetched until
 * {@link android.webkit.WebView#reload} is called.
 * If the application does not have the
 * {@link android.Manifest.permission#INTERNET} permission, attempts to set
 * a value of false will cause a {@link java.lang.SecurityException}
 * to be thrown. The default value is false if the application has the
 * {@link android.Manifest.permission#INTERNET} permission, otherwise it is
 * true.
 *
 * @param flag whether the WebView should not load any resources from the
 * network
 * @see android.webkit.WebView#reload
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.view.accessibility.AccessibilityNodeInfo.getLabeledBy:COMMENT
Method Modifier: public      
Comment:/**
 * Gets the node info which serves as the label of the view represented by
 * this info for accessibility purposes.
 * <p>
 * <strong>Note:</strong> It is a client responsibility to recycle the
 * received info by calling {@link AccessibilityNodeInfo#recycle()}
 * to avoid creating of multiple instances.
 * </p>
 *
 * @return The label.
 */

@@ -1,8 +1,4 @@
 {
     enforceSealed();
-    if (!canPerformRequestOverConnection(mLabeledById)) {
-        return null;
-    }
-    AccessibilityInteractionClient client = AccessibilityInteractionClient.getInstance();
-    return client.findAccessibilityNodeInfoByAccessibilityId(mConnectionId, mWindowId, mLabeledById, false, FLAG_PREFETCH_PREDECESSORS | FLAG_PREFETCH_DESCENDANTS | FLAG_PREFETCH_SIBLINGS);
+    return getNodeForAccessibilityId(mLabeledById);
 }

Find a functionally equivalent code:android.webkit.WebSettings.getDefaultTextEncodingName:COMMENT
<android.webkit.WebSettings: String getDefaultTextEncodingName()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets the default text encoding name.
 *
 * @return the default text encoding name as a string
 * @see #setDefaultTextEncodingName
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebHistoryItem.clone:COMMENT
<android.webkit.WebHistoryItem: WebHistoryItem clone()>
Method Modifier: protected   abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Clone the history item for use by clients of WebView.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.os.BaseBundle.putBoolean:COMMENT
<android.os.BaseBundle: void putBoolean(String,boolean)>
Method Modifier: public      
Method Modifier: No          
Method Updated:  Yes         
Comment:/**
 * Inserts a Boolean value into the mapping of this Bundle, replacing
 * any existing value for the given key.  Either key or value may be null.
 *
 * @param key a String, or null
 * @param value a Boolean, or null
 */


Find a functionally equivalent code:android.content.ContentProvider.enforceReadPermissionInner:COMMENT
Method Modifier: protected   hidden      
Comment:/**
 * {@hide}
 */

@@ -9,15 +9,15 @@
     if (mExported && checkUser(pid, uid, context)) {
         final String componentPerm = getReadPermission();
         if (componentPerm != null) {
-            if (context.checkPermission(componentPerm, pid, uid) == PERMISSION_GRANTED) {
+            if (context.checkPermission(componentPerm, pid, uid, callerToken) == PERMISSION_GRANTED) {
                 return;
             } else {
                 missingPerm = componentPerm;
@@ -24,30 +24,30 @@
             for (PathPermission pp : pps) {
                 final String pathPerm = pp.getReadPermission();
                 if (pathPerm != null && pp.match(path)) {
-                    if (context.checkPermission(pathPerm, pid, uid) == PERMISSION_GRANTED) {
+                    if (context.checkPermission(pathPerm, pid, uid, callerToken) == PERMISSION_GRANTED) {
                         return;
                     } else {
                         // any denied <path-permission> means we lose
@@ -40,46 +40,48 @@
             return;
     }
     // last chance, check against any uri grants
-    if (context.checkUriPermission(uri, pid, uid, Intent.FLAG_GRANT_READ_URI_PERMISSION) == PERMISSION_GRANTED) {
+    final int callingUserId = UserHandle.getUserId(uid);
+    final Uri userUri = (mSingleUser && !UserHandle.isSameUser(mMyUid, uid)) ? maybeAddUserId(uri, callingUserId) : uri;
+    if (context.checkUriPermission(userUri, pid, uid, Intent.FLAG_GRANT_READ_URI_PERMISSION, callerToken) == PERMISSION_GRANTED) {
         return;
     }
     final String failReason = mExported ? " requires " + missingPerm + ", or grantUriPermission()" : " requires the provider be exported, or grantUriPermission()";

Find a functionally equivalent code:com.android.systemui.recents.RecentsActivity.updateRecentsTasks:COMMENT
Method Modifier: 
Comment:/**
 * Updates the set of recent tasks
 */

@@ -1,24 +1,32 @@
 {
-    // Update the configuration based on the launch intent
-    boolean fromSearchHome = launchIntent.getBooleanExtra(AlternateRecentsComponent.EXTRA_FROM_SEARCH_HOME, false);
-    mConfig.launchedFromHome = fromSearchHome || launchIntent.getBooleanExtra(AlternateRecentsComponent.EXTRA_FROM_HOME, false);
-    mConfig.launchedFromAppWithThumbnail = launchIntent.getBooleanExtra(AlternateRecentsComponent.EXTRA_FROM_APP_THUMBNAIL, false);
-    mConfig.launchedFromAppWithScreenshot = launchIntent.getBooleanExtra(AlternateRecentsComponent.EXTRA_FROM_APP_FULL_SCREENSHOT, false);
-    mConfig.launchedToTaskId = launchIntent.getIntExtra(AlternateRecentsComponent.EXTRA_FROM_TASK_ID, -1);
-    mConfig.launchedWithAltTab = launchIntent.getBooleanExtra(AlternateRecentsComponent.EXTRA_TRIGGERED_FROM_ALT_TAB, false);
-    // Load all the tasks
+    // If AlternateRecentsComponent has preloaded a load plan, then use that to prevent
+    // reconstructing the task stack
     RecentsTaskLoader loader = RecentsTaskLoader.getInstance();
-    SpaceNode root = loader.reload(this, Constants.Values.RecentsTaskLoader.PreloadFirstTasksCount, mConfig.launchedFromHome);
+    RecentsTaskLoadPlan plan = AlternateRecentsComponent.consumeInstanceLoadPlan();
+    if (plan == null) {
+        plan = loader.createLoadPlan(this);
+    }
+    // Start loading tasks according to the load plan
+    if (plan.getTaskStack() == null) {
+        loader.preloadTasks(plan, mConfig.launchedFromHome);
+    }
+    RecentsTaskLoadPlan.Options loadOpts = new RecentsTaskLoadPlan.Options();
+    loadOpts.runningTaskId = mConfig.launchedToTaskId;
+    loadOpts.numVisibleTasks = mConfig.launchedNumVisibleTasks;
+    loadOpts.numVisibleTaskThumbnails = mConfig.launchedNumVisibleThumbnails;
+    loader.loadTasks(this, plan, loadOpts);
+    SpaceNode root = plan.getSpaceNode();
     ArrayList<TaskStack> stacks = root.getStacks();
-    if (!stacks.isEmpty()) {
-        mRecentsView.setTaskStacks(root.getStacks());
+    boolean hasTasks = root.hasTasks();
+    if (hasTasks) {
+        mRecentsView.setTaskStacks(stacks);
     }
-    mConfig.launchedWithNoRecentTasks = !root.hasTasks();
+    mConfig.launchedWithNoRecentTasks = !hasTasks;
     // Create the home intent runnable
     Intent homeIntent = new Intent(Intent.ACTION_MAIN, null);
     homeIntent.addCategory(Intent.CATEGORY_HOME);
     homeIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
-    mFinishLaunchHomeRunnable = new FinishRecentsRunnable(homeIntent, ActivityOptions.makeCustomAnimation(this, fromSearchHome ? R.anim.recents_to_search_launcher_enter : R.anim.recents_to_launcher_enter, fromSearchHome ? R.anim.recents_to_search_launcher_exit : R.anim.recents_to_launcher_exit));
+    mFinishLaunchHomeRunnable = new FinishRecentsRunnable(homeIntent, ActivityOptions.makeCustomAnimation(this, mConfig.launchedFromSearchHome ? R.anim.recents_to_search_launcher_enter : R.anim.recents_to_launcher_enter, mConfig.launchedFromSearchHome ? R.anim.recents_to_search_launcher_exit : R.anim.recents_to_launcher_exit));
     // Mark the task that is the launch target
     int taskStackCount = stacks.size();
     if (mConfig.launchedToTaskId != -1) {

Find a functionally equivalent code:com.android.server.am.ActivityStack.finishActivityLocked:COMMENT
Method Modifier: default     final       
Comment:/**
 * @return Returns true if this activity has been removed from the history
 * list, or false if it is still in the list and will be removed later.
 */

@@ -19,25 +19,25 @@
         }
     }
     r.pauseKeyDispatchingLocked();
-    adjustFocusedActivityLocked(r);
+    adjustFocusedActivityLocked(r, "finishActivity");
     finishActivityResultsLocked(r, resultCode, resultData);
     if (mResumedActivity == r) {
         boolean endTask = index <= 0;

Find a functionally equivalent code:android.media.AudioService.shouldVibrate:COMMENT
Method Modifier: public      
Comment:/**
 * @see AudioManager#shouldVibrate(int)
 */

@@ -3,11 +3,11 @@
         return false;
     switch(getVibrateSetting(vibrateType)) {
         case AudioManager.VIBRATE_SETTING_ON:
-            return getRingerMode() != AudioManager.RINGER_MODE_SILENT;
+            return getRingerModeExternal() != AudioManager.RINGER_MODE_SILENT;
         case AudioManager.VIBRATE_SETTING_ONLY_SILENT:
-            return getRingerMode() == AudioManager.RINGER_MODE_VIBRATE;
+            return getRingerModeExternal() == AudioManager.RINGER_MODE_VIBRATE;
         case AudioManager.VIBRATE_SETTING_OFF:
             // return false, even for incoming calls
             return false;

Find a functionally equivalent code:com.android.systemui.recents.views.RecentsView.startEnterRecentsAnimation:COMMENT
Method Modifier: public      
Comment:/**
 * Requests all task stacks to start their enter-recents animation
 */

@@ -1,4 +1,7 @@
 {
+    // We have to increment/decrement the post animation trigger in case there are no children
+    // to ensure that it runs
+    ctx.postAnimationTrigger.increment();
     int childCount = getChildCount();
     for (int i = 0; i < childCount; i++) {
         View child = getChildAt(i);
@@ -7,10 +10,14 @@
             stackView.startEnterRecentsAnimation(ctx);
         }
     }
+    ctx.postAnimationTrigger.decrement();
 }

Find a functionally equivalent code:android.appwidget.AppWidgetHost.deleteAppWidgetId:COMMENT
Method Modifier: public      
Comment:/**
 * Stop listening to changes for this AppWidget.
 */

@@ -2,8 +2,8 @@
     synchronized (mViews) {
         mViews.remove(appWidgetId);
         try {
-            sService.deleteAppWidgetId(mContext.getOpPackageName(), appWidgetId);
+            sService.deleteAppWidgetId(mContextOpPackageName, appWidgetId);
         } catch (RemoteException e) {
             throw new RuntimeException("system server dead?", e);
         }

Find a functionally equivalent code:android.provider.MediaStore.InternalThumbnails.getThumbnail:COMMENT
Method Modifier: default     static      
Comment:/**
 * This method ensure thumbnails associated with origId are generated and decode the byte
 * stream from database (MICRO_KIND) or file (MINI_KIND).
 *
 * Special optimization has been done to avoid further IPC communication for MICRO_KIND
 * thumbnails.
 *
 * @param cr ContentResolver
 * @param origId original image or video id
 * @param kind could be MINI_KIND or MICRO_KIND
 * @param options this is only used for MINI_KIND when decoding the Bitmap
 * @param baseUri the base URI of requested thumbnails
 * @param groupId the id of group to which this request belongs
 * @return Bitmap bitmap of specified thumbnail kind
 */

@@ -1,6 +1,5 @@
 {
     Bitmap bitmap = null;
-    String filePath = null;
     // Log.v(TAG, "getThumbnail: origId="+origId+", kind="+kind+", isVideo="+isVideo);
     // If the magic is non-zero, we simply return thumbnail if it does exist.
     // querying MediaProvider and simply return thumbnail.
@@ -65,83 +64,82 @@
         if (bitmap == null) {
             Log.v(TAG, "Create the thumbnail in memory: origId=" + origId + ", kind=" + kind + ", isVideo=" + isVideo);
             Uri uri = Uri.parse(baseUri.buildUpon().appendPath(String.valueOf(origId)).toString().replaceFirst("thumbnails", "media"));
-            if (filePath == null) {
-                if (c != null)
-                    c.close();
-                c = cr.query(uri, PROJECTION, null, null, null);
-                if (c == null || !c.moveToFirst()) {
-                    return null;
-                }
-                filePath = c.getString(1);
+            if (c != null)
+                c.close();
+            c = cr.query(uri, PROJECTION, null, null, null);
+            if (c == null || !c.moveToFirst()) {
+                return null;
             }
-            if (isVideo) {
-                bitmap = ThumbnailUtils.createVideoThumbnail(filePath, kind);
-            } else {
-                bitmap = ThumbnailUtils.createImageThumbnail(filePath, kind);
+            String filePath = c.getString(1);
+            if (filePath != null) {
+                if (isVideo) {
+                    bitmap = ThumbnailUtils.createVideoThumbnail(filePath, kind);
+                } else {
+                    bitmap = ThumbnailUtils.createImageThumbnail(filePath, kind);
+                }
             }
         }
     } catch (SQLiteException ex) {

Find a functionally equivalent code:com.android.server.display.DisplayDevice.dumpLocked:COMMENT
Method Modifier: public      
Comment:/**
 * Dumps the local state of the display device.
 * Does not need to dump the display device info because that is already dumped elsewhere.
 */

@@ -1,5 +1,6 @@
 {
     pw.println("mAdapter=" + mDisplayAdapter.getName());
+    pw.println("mUniqueId=" + mUniqueId);
     pw.println("mDisplayToken=" + mDisplayToken);
     pw.println("mCurrentLayerStack=" + mCurrentLayerStack);
     pw.println("mCurrentOrientation=" + mCurrentOrientation);

Find a functionally equivalent code:android.webkit.WebSettings.getDefaultFixedFontSize:COMMENT
<android.webkit.WebSettings: int getDefaultFixedFontSize()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets the default fixed font size.
 *
 * @return a non-negative integer between 1 and 72
 * @see #setDefaultFixedFontSize
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.internal.policy.impl.PhoneWindow.onKeyUpPanel:COMMENT
Method Modifier: public      final       internal    
Comment:/**
 * Called when the panel key is released.
 * @param featureId The feature ID of the relevant panel (defaults to FEATURE_OPTIONS_PANEL}.
 * @param event The key event.
 */

@@ -2,12 +2,12 @@
     // The panel key was released, so clear the chording key
     if (mPanelChordingKey != 0) {
         mPanelChordingKey = 0;
-        if (event.isCanceled() || (mDecor != null && mDecor.mActionMode != null)) {
+        final PanelFeatureState st = getPanelState(featureId, false);
+        if (event.isCanceled() || (mDecor != null && mDecor.mActionMode != null) || (st == null)) {
             return;
         }
         boolean playSoundEffect = false;
-        final PanelFeatureState st = getPanelState(featureId, true);
         if (featureId == FEATURE_OPTIONS_PANEL && mDecorContentParent != null && mDecorContentParent.canShowOverflowMenu() && !ViewConfiguration.get(getContext()).hasPermanentMenuKey()) {
             if (!mDecorContentParent.isOverflowMenuShowing()) {
                 if (!isDestroyed() && preparePanel(st, event)) {

Find a functionally equivalent code:android.webkit.WebSettings.setLightTouchEnabled:COMMENT
<android.webkit.WebSettings: void setLightTouchEnabled(boolean)>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
Comment:/**
 * Enables using light touches to make a selection and activate mouseovers.
 * @deprecated From {@link android.os.Build.VERSION_CODES#JELLY_BEAN} this
 * setting is obsolete and has no effect.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.app.AppOpsManager.resetAllModes:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * @hide
 */

@@ -1,6 +1,6 @@
 {
     try {
-        mService.resetAllModes();
+        mService.resetAllModes(UserHandle.myUserId(), null);
     } catch (RemoteException e) {
     }
 }

Find a functionally equivalent code:android.media.AudioService.checkSendBecomingNoisyIntent:COMMENT
Method Modifier: private     
Comment:// must be called before removing the device from mConnectedDevices

@@ -13,19 +13,24 @@
         }
     }
     if (mAudioHandler.hasMessages(MSG_SET_A2DP_SRC_CONNECTION_STATE) || mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE) || mAudioHandler.hasMessages(MSG_SET_WIRED_DEVICE_CONNECTION_STATE)) {
-        delay = 1000;
+        synchronized (mLastDeviceConnectMsgTime) {
+            long time = SystemClock.uptimeMillis();
+            if (mLastDeviceConnectMsgTime > time) {
+                delay = (int) (mLastDeviceConnectMsgTime - time) + 30;
+            }
+        }
     }
     return delay;
 }

Find a functionally equivalent code:com.android.server.connectivity.Vpn.addVpnUserLocked:COMMENT
Method Modifier: private     
Comment:// Note: This function adds to mVpnUsers but does not publish list to NetworkAgent.

@@ -1,5 +1,5 @@
 {
-    if (!isRunningLocked()) {
+    if (mVpnUsers == null) {
         throw new IllegalStateException("VPN is not active");
     }
     if (mConfig.allowedApplications != null) {

Find a functionally equivalent code:android.net.VpnService.Builder.addRoute:COMMENT
Method Modifier: public      
Comment:/**
 * Convenience method to add a network route to the VPN interface
 * using a numeric address string. See {@link InetAddress} for the
 * definitions of numeric address formats.
 *
 * Adding a route implicitly allows traffic from that address family
 * (i.e., IPv4 or IPv6) to be routed over the VPN. @see #allowFamily
 *
 * @throws IllegalArgumentException if the route is invalid.
 * @see #addRoute(InetAddress, int)
 */


Find a functionally equivalent code:android.webkit.WebHistoryItem.getOriginalUrl:COMMENT
<android.webkit.WebHistoryItem: String getOriginalUrl()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Return the original url of this history item. This was the requested
 * url, the final url may be different as there might have been
 * redirects while loading the site.
 * @return The original url of this history item.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.systemui.recents.views.TaskView.setFocusedTask:COMMENT
Method Modifier: public      
Comment:/**
 * Sets the focused task explicitly. We need a separate flag because requestFocus() won't happen
 * if the view is not currently visible, or we are in touch state (where we still want to keep
 * track of focus).
 */

@@ -2,13 +2,15 @@
     mIsFocused = true;
     if (mFocusAnimationsEnabled) {
         // Focus the header bar
-        mHeaderView.onTaskViewFocusChanged(true);
+        mHeaderView.onTaskViewFocusChanged(true, animateFocusedState);
     }
     // Update the thumbnail alpha with the focus
     mThumbnailView.onFocusChanged(true);
     // Call the callback
-    mCb.onTaskViewFocusChanged(this, true);
+    if (mCb != null) {
+        mCb.onTaskViewFocusChanged(this, true);
+    }
     // Workaround, we don't always want it focusable in touch mode, but we want the first task
     // to be focused after the enter-recents animation, which can be triggered from either touch
     // or keyboard

Find a functionally equivalent code:android.view.ViewGroup.getChildVisibleRect:COMMENT
Method Modifier: public      
Comment:/**
 * {@inheritDoc}
 */

@@ -7,14 +7,14 @@
     if (!child.hasIdentityMatrix()) {
         child.getMatrix().mapRect(rect);
     }
-    int dx = child.mLeft - mScrollX;
-    int dy = child.mTop - mScrollY;
+    final int dx = child.mLeft - mScrollX;
+    final int dy = child.mTop - mScrollY;
     rect.offset(dx, dy);
     if (offset != null) {
         if (!child.hasIdentityMatrix()) {
@@ -22,32 +22,45 @@
         offset.x += dx;
         offset.y += dy;
     }
-    if (rect.intersect(0, 0, mRight - mLeft, mBottom - mTop)) {
-        if (mParent == null)
-            return true;
-        r.set((int) (rect.left + 0.5f), (int) (rect.top + 0.5f), (int) (rect.right + 0.5f), (int) (rect.bottom + 0.5f));
-        return mParent.getChildVisibleRect(this, r, offset);
+    final int width = mRight - mLeft;
+    final int height = mBottom - mTop;
+    boolean rectIsVisible = true;
+    if (mParent == null || (mParent instanceof ViewGroup && ((ViewGroup) mParent).getClipChildren())) {
+        // Clip to bounds.
+        rectIsVisible = rect.intersect(0, 0, width, height);
     }
-    return false;
+    if (rectIsVisible && (mGroupFlags & CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) {
+        // Clip to padding.
+        rectIsVisible = rect.intersect(mPaddingLeft, mPaddingTop, width - mPaddingRight, height - mPaddingBottom);
+    }
+    if (rectIsVisible && mClipBounds != null) {
+        // Clip to clipBounds.
+        rectIsVisible = rect.intersect(mClipBounds.left, mClipBounds.top, mClipBounds.right, mClipBounds.bottom);
+    }
+    r.set((int) (rect.left + 0.5f), (int) (rect.top + 0.5f), (int) (rect.right + 0.5f), (int) (rect.bottom + 0.5f));
+    if (rectIsVisible && mParent != null) {
+        rectIsVisible = mParent.getChildVisibleRect(this, r, offset);
+    }
+    return rectIsVisible;
 }

Find a functionally equivalent code:android.widget.SearchView.updateVoiceButton:COMMENT
Method Modifier: private     
Comment:/**
 * Update the visibility of the voice button.  There are actually two voice search modes,
 * either of which will activate the button.
 * @param empty whether the search query text field is empty. If it is, then the other
 * criteria apply to make the voice button visible.
 */

@@ -2,8 +2,8 @@
     int visibility = GONE;
     if (mVoiceButtonEnabled && !isIconified() && empty) {
         visibility = VISIBLE;
-        mSubmitButton.setVisibility(GONE);
+        mGoButton.setVisibility(GONE);
     }
     mVoiceButton.setVisibility(visibility);
 }

Find a functionally equivalent code:android.telephony.ServiceState.getOperatorNumeric:COMMENT
Method Modifier: public      
Comment:/*
     * The country code can be decoded using
     * {@link com.android.internal.telephony.MccTable#countryCodeForMcc(int)}.
     */

@@ -1,3 +1,3 @@
 {
-    return mOperatorNumeric;
+    return mVoiceOperatorNumeric;
 }

Find a functionally equivalent code:android.graphics.drawable.RotateDrawable.setPivotXRelative:COMMENT
Method Modifier: public      
Comment:/**
 * Sets whether the X pivot value represents a fraction of the drawable
 * width or an absolute value in pixels.
 *
 * @param relative True if the X pivot represents a fraction of the drawable
 * width, or false if it represents an absolute value in pixels
 *
 * @see #isPivotXRelative()
 */

@@ -1,5 +1,5 @@
 {
-    if (mState.mPivotXRel == relative) {
+    if (mState.mPivotXRel != relative) {
         mState.mPivotXRel = relative;
         invalidateSelf();
     }

Find a functionally equivalent code:android.webkit.WebSettings.getPluginsPath:COMMENT
Method Modifier: public      hidden      deprecated  
Comment:/**
 * Gets the directory that contains the plugin libraries. This method is
 * obsolete since each plugin is now loaded from its own package.
 *
 * @return an empty string
 * @deprecated This method is no longer used as plugins are loaded from
 * their own APK via the system's package manager.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}
 */


Find a functionally equivalent code:android.media.AudioManager.requestAudioFocusForCall:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * @hide
 * Used internally by telephony package to request audio focus. Will cause the focus request
 * to be associated with the "voice communication" identifier only used in AudioService
 * to identify this use case.
 * @param streamType use STREAM_RING for focus requests when ringing, VOICE_CALL for
 * the establishment of the call
 * @param durationHint the type of focus request. AUDIOFOCUS_GAIN_TRANSIENT is recommended so
 * media applications resume after a call
 */

@@ -1,8 +1,8 @@
 {
     IAudioService service = getService();
     try {
-        service.requestAudioFocus(streamType, durationHint, mICallBack, null, MediaFocusControl.IN_VOICE_COMM_FOCUS_ID, mContext.getOpPackageName());
+        service.requestAudioFocus(new AudioAttributes.Builder().setInternalLegacyStreamType(streamType).build(), durationHint, mICallBack, null, MediaFocusControl.IN_VOICE_COMM_FOCUS_ID, mContext.getOpPackageName(), AUDIOFOCUS_FLAG_LOCK, null);
     } catch (RemoteException e) {
-        Log.e(TAG, "Can't call requestAudioFocusForCall() on AudioService due to " + e);
+        Log.e(TAG, "Can't call requestAudioFocusForCall() on AudioService:", e);
     }
 }

Find a functionally equivalent code:com.android.systemui.recents.views.RecentsView.setTaskStacks:COMMENT
Method Modifier: public      
Comment:/**
 * Set/get the bsp root node
 */

@@ -1,25 +1,49 @@
 {
-    // Remove all TaskStackViews (but leave the search bar)
+    int numStacks = stacks.size();
+    // Make a list of the stack view children only
+    ArrayList<TaskStackView> stackViews = new ArrayList<TaskStackView>();
     int childCount = getChildCount();
-    for (int i = childCount - 1; i >= 0; i--) {
-        View v = getChildAt(i);
-        if (v != mSearchBar) {
-            removeViewAt(i);
+    for (int i = 0; i < childCount; i++) {
+        View child = getChildAt(i);
+        if (child != mSearchBar) {
+            stackViews.add((TaskStackView) child);
         }
     }
-    // Create and add all the stacks for this partition of space.
+    // Remove all/extra stack views
+    // Keep no tasks if we are recreating the layout
+    int numTaskStacksToKeep = 0;
+    if (mConfig.launchedReuseTaskStackViews) {
+        numTaskStacksToKeep = Math.min(childCount, numStacks);
+    }
+    for (int i = stackViews.size() - 1; i >= numTaskStacksToKeep; i--) {
+        removeView(stackViews.get(i));
+        stackViews.remove(i);
+    }
+    // Update the stack views that we are keeping
+    for (int i = 0; i < numTaskStacksToKeep; i++) {
+        TaskStackView tsv = stackViews.get(i);
+        // If onRecentsHidden is not triggered, we need to the stack view again here
+        tsv.reset();
+        tsv.setStack(stacks.get(i));
+    }
+    // Add remaining/recreate stack views
     mStacks = stacks;
-    int numStacks = mStacks.size();
-    for (int i = 0; i < numStacks; i++) {
-        TaskStack stack = mStacks.get(i);
+    for (int i = stackViews.size(); i < numStacks; i++) {
+        TaskStack stack = stacks.get(i);
         TaskStackView stackView = new TaskStackView(getContext(), stack);
         stackView.setCallbacks(this);
-        // Enable debug mode drawing
-        if (mConfig.debugModeEnabled) {
-            stackView.setDebugOverlay(mDebugOverlay);
-        }
         addView(stackView);
     }
-    // Reset the launched state
-    mAlreadyLaunchingTask = false;
+    // Enable debug mode drawing on all the stacks if necessary
+    if (mConfig.debugModeEnabled) {
+        for (int i = childCount - 1; i >= 0; i--) {
+            View v = getChildAt(i);
+            if (v != mSearchBar) {
+                TaskStackView stackView = (TaskStackView) v;
+                stackView.setDebugOverlay(mDebugOverlay);
+            }
+        }
+    }
+    // Trigger a new layout
+    requestLayout();
 }

Find a functionally equivalent code:com.android.server.power.PowerManagerService.updateDisplayPowerStateLocked:COMMENT
Method Modifier: private     
Comment:/**
 * Updates the display power state asynchronously.
 * When the update is finished, mDisplayReady will be set to true.  The display
 * controller posts a message to tell us when the actual display power state
 * has been updated so we come back here to double-check and finish up.
 *
 * This function recalculates the display power state each time.
 *
 * @return True if the display became ready.
 */

@@ -1,7 +1,8 @@
 {
     final boolean oldDisplayReady = mDisplayReady;
-    if ((dirty & (DIRTY_WAKE_LOCKS | DIRTY_USER_ACTIVITY | DIRTY_WAKEFULNESS | DIRTY_ACTUAL_DISPLAY_POWER_STATE_UPDATED | DIRTY_BOOT_COMPLETED | DIRTY_SETTINGS)) != 0) {
+    if ((dirty & (DIRTY_WAKE_LOCKS | DIRTY_USER_ACTIVITY | DIRTY_WAKEFULNESS | DIRTY_ACTUAL_DISPLAY_POWER_STATE_UPDATED | DIRTY_BOOT_COMPLETED | DIRTY_SETTINGS | DIRTY_SCREEN_BRIGHTNESS_BOOST)) != 0) {
         mDisplayPowerRequest.policy = getDesiredScreenPolicyLocked();
+        // Determine appropriate screen brightness and auto-brightness adjustments.
         int screenBrightness = mScreenBrightnessSettingDefault;
         float screenAutoBrightnessAdjustment = 0.0f;
         boolean autoBrightness = (mScreenBrightnessModeSetting == Settings.System.SCREEN_BRIGHTNESS_MODE_AUTOMATIC);
@@ -23,33 +24,36 @@
         }
         screenBrightness = Math.max(Math.min(screenBrightness, mScreenBrightnessSettingMaximum), mScreenBrightnessSettingMinimum);
         screenAutoBrightnessAdjustment = Math.max(Math.min(screenAutoBrightnessAdjustment, 1.0f), -1.0f);
+        // Update display power request.
         mDisplayPowerRequest.screenBrightness = screenBrightness;
         mDisplayPowerRequest.screenAutoBrightnessAdjustment = screenAutoBrightnessAdjustment;
         mDisplayPowerRequest.useAutoBrightness = autoBrightness;
         mDisplayPowerRequest.useProximitySensor = shouldUseProximitySensorLocked();
         mDisplayPowerRequest.lowPowerMode = mLowPowerModeEnabled;
+        mDisplayPowerRequest.boostScreenBrightness = mScreenBrightnessBoostInProgress;
         if (mDisplayPowerRequest.policy == DisplayPowerRequest.POLICY_DOZE) {
             mDisplayPowerRequest.dozeScreenState = mDozeScreenStateOverrideFromDreamManager;
             mDisplayPowerRequest.dozeScreenBrightness = mDozeScreenBrightnessOverrideFromDreamManager;
@@ -38,44 +41,47 @@
         mDisplayReady = mDisplayManagerInternal.requestPowerState(mDisplayPowerRequest, mRequestWaitForNegativeProximity);
         mRequestWaitForNegativeProximity = false;
         if (DEBUG_SPEW) {
-            Slog.d(TAG, "updateScreenStateLocked: mDisplayReady=" + mDisplayReady + ", policy=" + mDisplayPowerRequest.policy + ", mWakefulness=" + mWakefulness + ", mWakeLockSummary=0x" + Integer.toHexString(mWakeLockSummary) + ", mUserActivitySummary=0x" + Integer.toHexString(mUserActivitySummary) + ", mBootCompleted=" + mBootCompleted);
+            Slog.d(TAG, "updateDisplayPowerStateLocked: mDisplayReady=" + mDisplayReady + ", policy=" + mDisplayPowerRequest.policy + ", mWakefulness=" + mWakefulness + ", mWakeLockSummary=0x" + Integer.toHexString(mWakeLockSummary) + ", mUserActivitySummary=0x" + Integer.toHexString(mUserActivitySummary) + ", mBootCompleted=" + mBootCompleted + ", mScreenBrightnessBoostInProgress=" + mScreenBrightnessBoostInProgress);
         }
     }
     return mDisplayReady && !oldDisplayReady;

Find a functionally equivalent code:android.net.wifi.WifiConfiguration.writeToParcel:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * Implement the Parcelable interface {@hide}
 */

@@ -28,39 +28,43 @@
     dest.writeInt(autoJoinStatus);
     dest.writeInt(selfAdded ? 1 : 0);
     dest.writeInt(didSelfAdd ? 1 : 0);
-    dest.writeInt(noInternetAccess ? 1 : 0);
+    dest.writeInt(validatedInternetAccess ? 1 : 0);
+    dest.writeInt(ephemeral ? 1 : 0);
     dest.writeInt(creatorUid);
     dest.writeInt(lastConnectUid);
     dest.writeInt(lastUpdateUid);
     dest.writeLong(blackListTimestamp);
     dest.writeLong(lastConnectionFailure);
+    dest.writeLong(lastRoamingFailure);
+    dest.writeInt(lastRoamingFailureReason);
+    dest.writeLong(roamingFailureBlackListTimeMilli);
     dest.writeInt(numConnectionFailures);
     dest.writeInt(numIpConfigFailures);
     dest.writeInt(numAuthFailures);
@@ -49,52 +53,57 @@
     dest.writeInt(numUserTriggeredJoinAttempts);
     dest.writeInt(autoJoinUseAggressiveJoinAttemptThreshold);
     dest.writeInt(autoJoinBailedDueToLowRssi ? 1 : 0);
+    dest.writeInt(numNoInternetAccessReports);
 }

Find a functionally equivalent code:android.view.accessibility.AccessibilityNodeInfo.getLabelFor:COMMENT
Method Modifier: public      
Comment:/**
 * Gets the node info for which the view represented by this info serves as
 * a label for accessibility purposes.
 * <p>
 * <strong>Note:</strong> It is a client responsibility to recycle the
 * received info by calling {@link AccessibilityNodeInfo#recycle()}
 * to avoid creating of multiple instances.
 * </p>
 *
 * @return The labeled info.
 */

@@ -1,8 +1,4 @@
 {
     enforceSealed();
-    if (!canPerformRequestOverConnection(mLabelForId)) {
-        return null;
-    }
-    AccessibilityInteractionClient client = AccessibilityInteractionClient.getInstance();
-    return client.findAccessibilityNodeInfoByAccessibilityId(mConnectionId, mWindowId, mLabelForId, false, FLAG_PREFETCH_PREDECESSORS | FLAG_PREFETCH_DESCENDANTS | FLAG_PREFETCH_SIBLINGS);
+    return getNodeForAccessibilityId(mLabelForId);
 }

Find a functionally equivalent code:com.android.systemui.statusbar.SignalClusterView.apply:COMMENT
Method Modifier: private     
Comment:// Run after each indicator change.

@@ -13,28 +13,31 @@
     }
     if (DEBUG)
         Log.d(TAG, String.format("wifi: %s sig=%d", (mWifiVisible ? "VISIBLE" : "GONE"), mWifiStrengthId));
-    if (mMobileVisible && !mIsAirplaneMode) {
-        mMobile.setImageResource(mMobileStrengthId);
-        mMobileType.setImageResource(mMobileTypeId);
-        mMobileGroup.setContentDescription(mMobileTypeDescription + " " + mMobileDescription);
-        mMobileGroup.setVisibility(View.VISIBLE);
-    } else {
-        mMobileGroup.setVisibility(View.GONE);
+    boolean anyMobileVisible = false;
+    int firstMobileTypeId = 0;
+    for (PhoneState state : mPhoneStates) {
+        if (state.apply(anyMobileVisible)) {
+            if (!anyMobileVisible) {
+                firstMobileTypeId = state.mMobileTypeId;
+                anyMobileVisible = true;
+            }
+        }
     }
     if (mIsAirplaneMode) {
         mAirplane.setImageResource(mAirplaneIconId);
+        mAirplane.setContentDescription(mAirplaneContentDescription != 0 ? mContext.getString(mAirplaneContentDescription) : null);
         mAirplane.setVisibility(View.VISIBLE);
     } else {
         mAirplane.setVisibility(View.GONE);
@@ -32,44 +35,46 @@
     } else {
         mWifiAirplaneSpacer.setVisibility(View.GONE);
     }
-    if (mRoaming && mMobileVisible && mWifiVisible) {
+    if (((anyMobileVisible && firstMobileTypeId != 0) || mNoSimsVisible) && mWifiVisible) {
         mWifiSignalSpacer.setVisibility(View.VISIBLE);
     } else {
         mWifiSignalSpacer.setVisibility(View.GONE);
     }
-    mMobile.setPaddingRelative(mIsMobileTypeIconWide ? mWideTypeIconStartPadding : 0, 0, 0, 0);
-    if (DEBUG)
-        Log.d(TAG, String.format("mobile: %s sig=%d typ=%d", (mMobileVisible ? "VISIBLE" : "GONE"), mMobileStrengthId, mMobileTypeId));
-    mMobileType.setVisibility((mRoaming || mMobileTypeId != 0) ? View.VISIBLE : View.GONE);
+    mNoSims.setVisibility(mNoSimsVisible ? View.VISIBLE : View.GONE);
+    boolean anythingVisible = mNoSimsVisible || mWifiVisible || mIsAirplaneMode || anyMobileVisible || mVpnVisible;
+    setPaddingRelative(0, 0, anythingVisible ? mEndPadding : mEndPaddingNothingVisible, 0);
 }

Find a functionally equivalent code:android.webkit.WebView.onResume:COMMENT
Method Modifier: public      
Comment:/**
 * Resumes a WebView after a previous call to onPause().
 */

@@ -1,6 +1,6 @@
 {
     checkThread();
-    if (DebugFlags.TRACE_API)
+    if (TRACE)
         Log.d(LOGTAG, "onResume");
     mProvider.onResume();
 }

Find a functionally equivalent code:com.android.server.wm.WindowStateAnimator.commitFinishDrawingLocked:COMMENT
Method Modifier: 
Comment:// This must be called while inside a transaction.

@@ -1,17 +1,16 @@
 {
     if (DEBUG_STARTING_WINDOW && mWin.mAttrs.type == WindowManager.LayoutParams.TYPE_APPLICATION_STARTING) {
-        Slog.i(TAG, "commitFinishDrawingLocked: " + mWin + " cur mDrawState=" + drawStateToString(mDrawState));
+        Slog.i(TAG, "commitFinishDrawingLocked: " + mWin + " cur mDrawState=" + drawStateToString());
     }
-    if (mDrawState != COMMIT_DRAW_PENDING) {
+    if (mDrawState != COMMIT_DRAW_PENDING && mDrawState != READY_TO_SHOW) {
         return false;
     }
     if (DEBUG_SURFACE_TRACE || DEBUG_ANIM) {
         Slog.i(TAG, "commitFinishDrawingLocked: mDrawState=READY_TO_SHOW " + mSurfaceControl);
     }
     mDrawState = READY_TO_SHOW;
-    final boolean starting = mWin.mAttrs.type == TYPE_APPLICATION_STARTING;
     final AppWindowToken atoken = mWin.mAppToken;
-    if (atoken == null || atoken.allDrawn || starting) {
+    if (atoken == null || atoken.allDrawn || mWin.mAttrs.type == TYPE_APPLICATION_STARTING) {
         performShowLocked();
     }
     return true;

Find a functionally equivalent code:android.telephony.ServiceState.getRoaming:COMMENT
Method Modifier: public      
Comment:/**
 * Get current roaming indicator of phone
 * (note: not just decoding from TS 27.007 7.2)
 *
 * @return true if TS 27.007 7.2 roaming is true
 * and ONS is different from SPN
 */

@@ -1,3 +1,3 @@
 {
-    return mRoaming;
+    return getVoiceRoaming() || getDataRoaming();
 }

Find a functionally equivalent code:android.app.BackStackRecord.configureTransitions:COMMENT
Method Modifier: private     
Comment:/**
 * Configures custom transitions for a specific fragment container.
 *
 * @param containerId The container ID of the fragments to configure the transition for.
 * @param state The Transition State keeping track of the executing transitions.
 * @param firstOutFragments The list of first fragments to be removed, keyed on the
 * container ID.
 * @param lastInFragments The list of last fragments to be added, keyed on the
 * container ID.
 * @param isBack true if this is popping the back stack or false if this is a
 * forward operation.
 */

@@ -17,27 +17,24 @@
         ArrayList<View> sharedElementTargets = new ArrayList<View>();
         if (sharedElementTransition != null) {
             namedViews = remapSharedElements(state, outFragment, isBack);
-            if (namedViews.isEmpty()) {
-                sharedElementTargets.add(state.nonExistentView);
-            } else {
-                sharedElementTargets.addAll(namedViews.values());
-            }
+            sharedElementTargets.add(state.nonExistentView);
+            sharedElementTargets.addAll(namedViews.values());
             addTargets(sharedElementTransition, sharedElementTargets);
             // Notify the start of the transition.
             SharedElementCallback callback = isBack ? outFragment.mEnterTransitionCallback : inFragment.mEnterTransitionCallback;
@@ -29,35 +26,32 @@
             ArrayList<View> views = new ArrayList<View>(namedViews.values());
             callback.onSharedElementStart(names, views, null);
         }
-        ArrayList<View> exitingViews = captureExitingViews(exitTransition, outFragment, namedViews);
+        ArrayList<View> exitingViews = captureExitingViews(exitTransition, outFragment, namedViews, state.nonExistentView);
         if (exitingViews == null || exitingViews.isEmpty()) {
             exitTransition = null;
         }

Find a functionally equivalent code:com.android.internal.widget.LockPatternUtils.deleteGallery:COMMENT
Method Modifier: internal    
Comment:/**
 * Calls back SetupFaceLock to delete the gallery file when the lock type is changed
 */

@@ -1,7 +1,7 @@
 {
-    if (usingBiometricWeak()) {
+    if (usingBiometricWeak(userId)) {
         Intent intent = new Intent().setAction("com.android.facelock.DELETE_GALLERY");
         intent.putExtra("deleteGallery", true);
-        mContext.sendBroadcast(intent);
+        mContext.sendBroadcastAsUser(intent, new UserHandle(userId));
     }
 }

Find a functionally equivalent code:android.webkit.WebSettings.setCursiveFontFamily:COMMENT
<android.webkit.WebSettings: void setCursiveFontFamily(String)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets the cursive font family name. The default is "cursive".
 *
 * @param font a font family name
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.systemui.recents.views.TaskViewHeader.startNoUserInteractionAnimation:COMMENT
Method Modifier: 
Comment:/**
 * Animates this task bar if the user does not interact with the stack after a certain time.
 */

@@ -1,5 +1,7 @@
 {
-    mDismissButton.setVisibility(View.VISIBLE);
-    mDismissButton.setAlpha(0f);
-    mDismissButton.animate().alpha(1f).setStartDelay(0).setInterpolator(mConfig.fastOutLinearInInterpolator).setDuration(mConfig.taskBarEnterAnimDuration).withLayer().start();
+    if (mDismissButton.getVisibility() != View.VISIBLE) {
+        mDismissButton.setVisibility(View.VISIBLE);
+        mDismissButton.setAlpha(0f);
+        mDismissButton.animate().alpha(1f).setStartDelay(0).setInterpolator(mConfig.fastOutLinearInInterpolator).setDuration(mConfig.taskViewEnterFromAppDuration).withLayer().start();
+    }
 }

Find a functionally equivalent code:android.content.pm.RegisteredServicesCache.getServiceInfo:COMMENT
Method Modifier: public      
Comment:/**
 * Accessor for the registered authenticators.
 * @param type the account type of the authenticator
 * @return the AuthenticatorInfo that matches the account type or null if none is present
 */

@@ -3,9 +3,9 @@
         // Find user and lazily populate cache
         final UserServices<V> user = findOrCreateUserLocked(userId);
         if (user.services == null) {
-            generateServicesMap(userId);
+            generateServicesMap(null, userId);
         }
         return user.services.get(type);
     }

Find a functionally equivalent code:android.media.AudioManager.abandonAudioFocusForCall:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * @hide
 * Used internally by telephony package to abandon audio focus, typically after a call or
 * when ringing ends and the call is rejected or not answered.
 * Should match one or more calls to {@link #requestAudioFocusForCall(int, int)}.
 */

@@ -1,8 +1,8 @@
 {
     IAudioService service = getService();
     try {
-        service.abandonAudioFocus(null, MediaFocusControl.IN_VOICE_COMM_FOCUS_ID);
+        service.abandonAudioFocus(null, MediaFocusControl.IN_VOICE_COMM_FOCUS_ID, null);
     } catch (RemoteException e) {
-        Log.e(TAG, "Can't call abandonAudioFocusForCall() on AudioService due to " + e);
+        Log.e(TAG, "Can't call abandonAudioFocusForCall() on AudioService:", e);
     }
 }

Find a functionally equivalent code:android.graphics.drawable.DrawableContainer.DrawableContainerState.ConstantStateFuture.get:COMMENT
Method Modifier: public      
Comment:/**
 * Obtains and prepares the Drawable represented by this future.
 *
 * @param state the container into which this future will be placed
 * @return a prepared Drawable
 */

@@ -2,11 +2,9 @@
     final Drawable result;
     if (state.mRes == null) {
         result = mConstantState.newDrawable();
-    } else if (state.mTheme == null) {
-        result = mConstantState.newDrawable(state.mRes);
     } else {
-        result = mConstantState.newDrawable(state.mRes, state.mTheme);
+        result = mConstantState.newDrawable(state.mRes);
     }
     result.setLayoutDirection(state.mLayoutDirection);
     result.setCallback(state.mOwner);

Find a functionally equivalent code:android.webkit.WebSettings.setUseDoubleTree:COMMENT
Method Modifier: public      hidden      deprecated  
Comment:/**
 * Controlled a rendering optimization that is no longer present. Setting
 * it now has no effect.
 *
 * @deprecated This setting now has no effect.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */


Find a functionally equivalent code:android.hardware.SensorManager.registerListenerImpl:COMMENT
Method Modifier: protected   abstract    hidden      
Comment:/**
 * @hide
 */


Find a functionally equivalent code:com.android.systemui.recents.views.TaskView.dismissTask:COMMENT
Method Modifier: 
Comment:/**
 * Dismisses this task.
 */

@@ -5,13 +5,13 @@
 
         @Override
         public void run() {
-            mCb.onTaskViewDismissed(tv);
+            if (mCb != null) {
+                mCb.onTaskViewDismissed(tv);
+            }
         }
     });
-    // Hide the footer
-    animateFooterVisibility(false, mConfig.taskViewRemoveAnimDuration);
 }

Find a functionally equivalent code:android.content.ContentProviderClient.openFile:COMMENT
Method Modifier: public      
Comment:/**
 * See {@link ContentProvider#openFile ContentProvider.openFile}.  Note that
 * this <em>does not</em>
 * take care of non-content: URIs such as file:.  It is strongly recommended
 * you use the {@link ContentResolver#openFileDescriptor
 * ContentResolver.openFileDescriptor} API instead.
 */

@@ -1,19 +1,3 @@
 {
-    beforeRemote();
-    try {
-        ICancellationSignal remoteSignal = null;
-        if (signal != null) {
-            signal.throwIfCanceled();
-            remoteSignal = mContentProvider.createCancellationSignal();
-            signal.setRemote(remoteSignal);
-        }
-        return mContentProvider.openFile(mPackageName, url, mode, remoteSignal);
-    } catch (DeadObjectException e) {
-        if (!mStable) {
-            mContentResolver.unstableProviderDied(mContentProvider);
-        }
-        throw e;
-    } finally {
-        afterRemote();
-    }
+    return openFile(url, mode, null);
 }

Find a functionally equivalent code:com.android.internal.policy.impl.PhoneWindowManager.removeStartingWindow:COMMENT
Method Modifier: public      internal    
Comment:/**
 * {@inheritDoc}
 */

@@ -1,9 +1,6 @@
 {
-    if (DEBUG_STARTING_WINDOW) {
-        RuntimeException e = new RuntimeException("here");
-        e.fillInStackTrace();
-        Log.v(TAG, "Removing starting window for " + appToken + ": " + window, e);
-    }
+    if (DEBUG_STARTING_WINDOW)
+        Slog.v(TAG, "Removing starting window for " + appToken + ": " + window + " Callers=" + Debug.getCallers(4));
     if (window != null) {
         WindowManager wm = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);
         wm.removeView(window);

Find a functionally equivalent code:android.net.ConnectivityManager.getMobileDataEnabled:COMMENT
Method Modifier: public      hidden      deprecated  
Comment:/**
 * @hide
 * @deprecated Talk to TelephonyManager directly
 */

@@ -3,11 +3,16 @@
     if (b != null) {
         try {
             ITelephony it = ITelephony.Stub.asInterface(b);
-            return it.getDataEnabled();
+            int subId = SubscriptionManager.getDefaultDataSubId();
+            Log.d("ConnectivityManager", "getMobileDataEnabled()+ subId=" + subId);
+            boolean retVal = it.getDataEnabled(subId);
+            Log.d("ConnectivityManager", "getMobileDataEnabled()- subId=" + subId + " retVal=" + retVal);
+            return retVal;
         } catch (RemoteException e) {
         }
     }
+    Log.d("ConnectivityManager", "getMobileDataEnabled()- remote exception retVal=false");
     return false;
 }

Find a functionally equivalent code:android.content.res.Resources.updateConfiguration:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * @hide
 */

@@ -20,40 +20,26 @@
         // consistently dealing with a compatible display everywhere in
         // the framework.
         mCompatibilityInfo.applyToDisplayMetrics(mMetrics);
-        int configChanges = 0xfffffff;
-        if (config != null) {
-            mTmpConfig.setTo(config);
-            int density = config.densityDpi;
-            if (density == Configuration.DENSITY_DPI_UNDEFINED) {
-                density = mMetrics.noncompatDensityDpi;
-            }
-            mCompatibilityInfo.applyToConfiguration(density, mTmpConfig);
-            if (mTmpConfig.locale == null) {
-                mTmpConfig.locale = Locale.getDefault();
-                mTmpConfig.setLayoutDirection(mTmpConfig.locale);
-            }
-            configChanges = mConfiguration.updateFrom(mTmpConfig);
-            configChanges = ActivityInfo.activityInfoConfigToNative(configChanges);
-        }
+        int configChanges = calcConfigChanges(config);
         if (mConfiguration.locale == null) {
             mConfiguration.locale = Locale.getDefault();
             mConfiguration.setLayoutDirection(mConfiguration.locale);
@@ -68,73 +54,61 @@
         }
         clearDrawableCachesLocked(mDrawableCache, configChanges);
         clearDrawableCachesLocked(mColorDrawableCache, configChanges);
+        mAnimatorCache.onConfigurationChange(configChanges);
+        mStateListAnimatorCache.onConfigurationChange(configChanges);
         mColorStateListCache.clear();
         flushLayoutCache();
     }

Find a functionally equivalent code:com.android.systemui.recents.RecentsActivity.dismissRecentsToFocusedTaskOrHome:COMMENT
Method Modifier: 
Comment:/**
 * Dismisses recents if we are already visible and the intent is to toggle the recents view
 */

@@ -1,5 +1,6 @@
 {
-    if (mVisible) {
+    SystemServicesProxy ssp = RecentsTaskLoader.getInstance().getSystemServicesProxy();
+    if (ssp.isRecentsTopMost(ssp.getTopMostTask(), null)) {
         // If we currently have filtered stacks, then unfilter those first
         if (checkFilteredStackState && mRecentsView.unfilterFilteredStacks())
             return true;

Find a functionally equivalent code:android.webkit.WebIconDatabase.requestIconForPageUrl:COMMENT
<android.webkit.WebIconDatabase: void requestIconForPageUrl(String,IconListener)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Request the Bitmap representing the icon for the given page
 * url. If the icon exists, the listener will be called with the result.
 * @param url The page's url.
 * @param listener An implementation on IconListener to receive the result.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebBackForwardList.clone:COMMENT
<android.webkit.WebBackForwardList: WebBackForwardList clone()>
Method Modifier: protected   abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Clone the entire object to be used in the UI thread by clients of
 * WebView. This creates a copy that should never be modified by any of the
 * webkit package classes.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebSettings.setJavaScriptCanOpenWindowsAutomatically:COMMENT
<android.webkit.WebSettings: void setJavaScriptCanOpenWindowsAutomatically(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Tells JavaScript to open windows automatically. This applies to the
 * JavaScript function window.open(). The default is false.
 *
 * @param flag true if JavaScript can open windows automatically
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:COMMENT
Method Modifier: public      
Comment:/**
 * Extracted from {@link #performLayoutAndPlaceSurfacesLockedInner} to reduce size of method.
 * @param windows List of windows on default display.
 * @return bitmap indicating if another pass through layout must be made.
 */

@@ -135,140 +135,161 @@
         AppWindowToken topClosingApp = null;
         int topOpeningLayer = 0;
         int topClosingLayer = 0;
+        // Process all applications animating in place
+        if (transit == AppTransition.TRANSIT_TASK_IN_PLACE) {
+            // Find the focused window
+            final WindowState win = findFocusedWindowLocked(getDefaultDisplayContentLocked());
+            if (win != null) {
+                final AppWindowToken wtoken = win.mAppToken;
+                final AppWindowAnimator appAnimator = wtoken.mAppAnimator;
+                if (DEBUG_APP_TRANSITIONS)
+                    Slog.v(TAG, "Now animating app in place " + wtoken);
+                appAnimator.clearThumbnail();
+                appAnimator.animation = null;
+                updateTokenInPlaceLocked(wtoken, transit);
+                wtoken.updateReportedVisibilityLocked();
+                appAnimator.mAllAppWinAnimators.clear();
+                final int N = wtoken.allAppWindows.size();
+                for (int j = 0; j < N; j++) {
+                    appAnimator.mAllAppWinAnimators.add(wtoken.allAppWindows.get(j).mWinAnimator);
+                }
+                mAnimator.mAnimating |= appAnimator.showAllWindowsLocked();
+            }
+        }
         NN = mOpeningApps.size();
         for (i = 0; i < NN; i++) {
             AppWindowToken wtoken = mOpeningApps.valueAt(i);
@@ -237,247 +258,263 @@
                     anim = mAppTransition.createThumbnailAspectScaleAnimationLocked(displayInfo.appWidth, displayInfo.appHeight, displayInfo.logicalWidth, transit);
                     openingAppAnimator.thumbnailForceAboveLayer = Math.max(topOpeningLayer, topClosingLayer);
                     openingAppAnimator.deferThumbnailDestruction = !mAppTransition.isNextThumbnailTransitionScaleUp();
-                    if (openingAppAnimator.deferThumbnailDestruction) {
-                        if (closingAppAnimator != null && closingAppAnimator.animation != null) {
-                            closingAppAnimator.deferredThumbnail = surfaceControl;
-                        }
-                    }
                 } else {
                     anim = mAppTransition.createThumbnailScaleAnimationLocked(displayInfo.appWidth, displayInfo.appHeight, transit);
                 }
@@ -271,276 +287,293 @@
         }
         updateFocusedWindowLocked(UPDATE_FOCUS_PLACING_SURFACES, true);
         mFocusMayChange = false;
+        notifyActivityDrawnForKeyguard();
     }
     return changes;
 }

Find a functionally equivalent code:android.media.AudioManager.registerAudioPortUpdateListener:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * Register an audio port list update listener.
 * @hide
 */

@@ -1,3 +1,3 @@
 {
-    mAudioPortEventHandler.registerListener(l);
+    sAudioPortEventHandler.registerListener(l);
 }

Find a functionally equivalent code:android.graphics.drawable.RippleDrawable.tryRippleEnter:COMMENT
Method Modifier: private     
Comment:/**
 * Attempts to start an enter animation for the active hotspot. Fails if
 * there are too many animating ripples.
 */

@@ -16,22 +16,21 @@
         }
         mRipple = new Ripple(this, mHotspotBounds, x, y);
     }
-    final int color = mState.mColor.getColorForState(getState(), Color.TRANSPARENT);
-    mRipple.setup(mState.mMaxRadius, color, mDensity);
+    mRipple.setup(mState.mMaxRadius, mDensity);
     mRipple.enter();
 }

Find a functionally equivalent code:android.hardware.camera2.legacy.SurfaceTextureRenderer.drawIntoSurfaces:COMMENT
Method Modifier: public      
Comment:/**
 * Draw the current buffer in the {@link SurfaceTexture} returned from
 * {@link #getSurfaceTexture()} into the set of target {@link Surface}s
 * in the next request from the given {@link CaptureCollector}, or drop
 * the frame if none is available.
 *
 * <p>
 * Any {@link Surface}s targeted must be a subset of the {@link Surface}s
 * set in the last {@link #configureSurfaces(java.util.Collection)} call.
 * </p>
 *
 * @param targetCollector the surfaces to draw to.
 */

@@ -28,38 +28,38 @@
     List<Long> targetSurfaceIds = LegacyCameraDevice.getSurfaceIds(targetSurfaces);
     for (EGLSurfaceHolder holder : mSurfaces) {
         if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)) {
-            makeCurrent(holder.eglSurface);
             try {
                 LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height);
+                makeCurrent(holder.eglSurface);
                 LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second);
-                drawFrame(mSurfaceTexture, holder.width, holder.height);
+                drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing == CameraCharacteristics.LENS_FACING_FRONT) ? FLIP_TYPE_HORIZONTAL : FLIP_TYPE_NONE);
                 swapBuffers(holder.eglSurface);
             } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                 Log.w(TAG, "Surface abandoned, dropping frame. ", e);
@@ -42,48 +42,49 @@
     for (EGLSurfaceHolder holder : mConversionSurfaces) {
         if (LegacyCameraDevice.containsSurfaceId(holder.surface, targetSurfaceIds)) {
             makeCurrent(holder.eglSurface);
-            drawFrame(mSurfaceTexture, holder.width, holder.height);
+            // glReadPixels reads from the bottom of the buffer, so add an extra vertical flip
+            drawFrame(mSurfaceTexture, holder.width, holder.height, (mFacing == CameraCharacteristics.LENS_FACING_FRONT) ? FLIP_TYPE_BOTH : FLIP_TYPE_VERTICAL);
             mPBufferPixels.clear();
             GLES20.glReadPixels(/*x*/
             0, /*y*/
@@ -50,58 +51,59 @@
             checkGlError("glReadPixels");
             try {
                 int format = LegacyCameraDevice.detectSurfaceType(holder.surface);
+                LegacyCameraDevice.setSurfaceDimens(holder.surface, holder.width, holder.height);
                 LegacyCameraDevice.setNextTimestamp(holder.surface, captureHolder.second);
                 LegacyCameraDevice.produceFrame(holder.surface, mPBufferPixels.array(), holder.width, holder.height, format);
-                swapBuffers(holder.eglSurface);
             } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {
                 Log.w(TAG, "Surface abandoned, dropping frame. ", e);
             }

Find a functionally equivalent code:android.view.accessibility.AccessibilityNodeInfo.getParent:COMMENT
Method Modifier: public      
Comment:/**
 * Gets the parent.
 * <p>
 * <strong>Note:</strong> It is a client responsibility to recycle the
 * received info by calling {@link AccessibilityNodeInfo#recycle()}
 * to avoid creating of multiple instances.
 * </p>
 *
 * @return The parent.
 */

@@ -1,8 +1,4 @@
 {
     enforceSealed();
-    if (!canPerformRequestOverConnection(mParentNodeId)) {
-        return null;
-    }
-    AccessibilityInteractionClient client = AccessibilityInteractionClient.getInstance();
-    return client.findAccessibilityNodeInfoByAccessibilityId(mConnectionId, mWindowId, mParentNodeId, false, FLAG_PREFETCH_PREDECESSORS | FLAG_PREFETCH_DESCENDANTS | FLAG_PREFETCH_SIBLINGS);
+    return getNodeForAccessibilityId(mParentNodeId);
 }

Find a functionally equivalent code:android.view.DisplayInfo.toString:COMMENT
Method Modifier: public      
Comment:// For debugging purposes

@@ -2,7 +2,9 @@
     StringBuilder sb = new StringBuilder();
     sb.append("DisplayInfo{\"");
     sb.append(name);
+    sb.append("\", uniqueId \"");
+    sb.append(uniqueId);
     sb.append("\", app ");
     sb.append(appWidth);
     sb.append(" x ");

Find a functionally equivalent code:android.bluetooth.BluetoothAdapter.getBluetoothLeAdvertiser:COMMENT
Method Modifier: public      
Comment:/**
 * Returns a {@link BluetoothLeAdvertiser} object for Bluetooth LE Advertising operations.
 * Will return null if Bluetooth is turned off or if Bluetooth LE Advertising is not
 * supported on this device.
 * <p>
 * Use {@link #isMultipleAdvertisementSupported()} to check whether LE Advertising is supported
 * on this device before calling this method.
 */

@@ -2,8 +2,9 @@
     if (getState() != STATE_ON) {
         return null;
     }
-    if (!isMultipleAdvertisementSupported()) {
+    if (!isMultipleAdvertisementSupported() && !isPeripheralModeSupported()) {
+        Log.e(TAG, "bluetooth le advertising not supported");
         return null;
     }
     synchronized (mLock) {

Find a functionally equivalent code:android.webkit.WebViewDatabase.clearUsernamePassword:COMMENT
<android.webkit.WebViewDatabase: void clearUsernamePassword()>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
Comment:/**
 * Clears any saved username/password pairs for web forms.
 * Note that these are unrelated to HTTP authentication credentials.
 *
 * @see WebView#savePassword
 * @see #hasUsernamePassword
 * @deprecated Saving passwords in WebView will not be supported in future versions.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.widget.RadialTimePickerView.getCurrentHour:COMMENT
Method Modifier: public      
Comment:/**
 * Returns the current hour in 24-hour time.
 *
 * @return the current hour between 0 and 23 (inclusive)
 */

@@ -1,16 +1,3 @@
 {
-    int hour = (mSelectionDegrees[mIsOnInnerCircle ? HOURS_INNER : HOURS] / DEGREES_FOR_ONE_HOUR) % 12;
-    if (mIs24HourMode) {
-        // selector is positioned.
-        if (mIsOnInnerCircle && hour == 0) {
-            // Inner circle is 1 through 12.
-            hour = 12;
-        } else if (!mIsOnInnerCircle && hour != 0) {
-            // Outer circle is 13 through 23 and 0.
-            hour += 12;
-        }
-    } else if (mAmOrPm == PM) {
-        hour += 12;
-    }
-    return hour;
+    return getHourForDegrees(mSelectionDegrees[mIsOnInnerCircle ? HOURS_INNER : HOURS], mIsOnInnerCircle);
 }

Find a functionally equivalent code:com.android.internal.policy.impl.PhoneWindowManager.systemReady:COMMENT
Method Modifier: public      internal    
Comment:/**
 * {@inheritDoc}
 */

@@ -1,5 +1,5 @@
 {
-    mKeyguardDelegate = new KeyguardServiceDelegate(mContext, null);
+    mKeyguardDelegate = new KeyguardServiceDelegate(mContext);
     mKeyguardDelegate.onSystemReady();
     readCameraLensCoverState();
     updateUiMode();

Find a functionally equivalent code:android.webkit.WebSettings.setUserAgentString:COMMENT
<android.webkit.WebSettings: void setUserAgentString(String)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets the WebView's user-agent string. If the string is null or empty,
 * the system default value will be used.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.server.power.PowerManagerService.lowLevelReboot:COMMENT
Method Modifier: public      static      
Comment:/**
 * Low-level function to reboot the device. On success, this
 * function doesn't return. If more than 20 seconds passes from
 * the time a reboot is requested (120 seconds for reboot to
 * recovery), this method returns.
 *
 * @param reason code to pass to the kernel (e.g. "recovery"), or null.
 */

@@ -11,19 +11,19 @@
         // 
         // This preparation can take more than 20 seconds if
         // there's a very large update package, so lengthen the
-        // timeout.
+        // timeout.  We have seen 750MB packages take 3-4 minutes
         SystemProperties.set("ctl.start", "pre-recovery");
-        duration = 120 * 1000L;
+        duration = 300 * 1000L;
     } else {
         SystemProperties.set("sys.powerctl", "reboot," + reason);
         duration = 20 * 1000L;

Find a functionally equivalent code:android.media.AudioManager.getRingerMode:COMMENT
Method Modifier: public      
Comment:/**
 * Returns the current ringtone mode.
 *
 * @return The current ringtone mode, one of {@link #RINGER_MODE_NORMAL},
 * {@link #RINGER_MODE_SILENT}, or {@link #RINGER_MODE_VIBRATE}.
 * @see #setRingerMode(int)
 */

@@ -1,7 +1,7 @@
 {
     IAudioService service = getService();
     try {
-        return service.getRingerMode();
+        return service.getRingerModeExternal();
     } catch (RemoteException e) {
         Log.e(TAG, "Dead object in getRingerMode", e);
         return RINGER_MODE_NORMAL;

Find a functionally equivalent code:android.net.ConnectivityManager.stopUsingNetworkFeature:COMMENT
Method Modifier: public      deprecated  
Comment:/**
 * Tells the underlying networking system that the caller is finished
 * using the named feature. The interpretation of {@code feature}
 * is completely up to each networking implementation.
 * <p>This method requires the caller to hold the permission
 * {@link android.Manifest.permission#CHANGE_NETWORK_STATE}.
 * @param networkType specifies which network the request pertains to
 * @param feature the name of the feature that is no longer needed
 * @return an integer value representing the outcome of the request.
 * The interpretation of this value is specific to each networking
 * implementation+feature combination, except that the value {@code -1}
 * always indicates failure.
 *
 * @deprecated Deprecated in favor of the cleaner {@link #requestNetwork} api.
 */

@@ -4,13 +4,11 @@
         Log.d(TAG, "Can't satisfy stopUsingNetworkFeature for " + networkType + ", " + feature);
         return -1;
     }
-    NetworkCallback networkCallback = removeRequestForFeature(netCap);
-    if (networkCallback != null) {
+    if (removeRequestForFeature(netCap)) {
         Log.d(TAG, "stopUsingNetworkFeature for " + networkType + ", " + feature);
-        unregisterNetworkCallback(networkCallback);
     }
     return 1;
 }

Find a functionally equivalent code:android.animation.ValueAnimator.animationFrame:COMMENT
Method Modifier: 
Comment:/**
 * This internal function processes a single animation frame for a given animation. The
 * currentTime parameter is the timing pulse sent by the handler, used to calculate the
 * elapsed duration, and therefore
 * the elapsed fraction, of the animation. The return value indicates whether the animation
 * should be ended (which happens when the elapsed time of the animation exceeds the
 * animation's duration, including the repeatCount).
 *
 * @param currentTime The current time, as tracked by the static timing handler
 * @return true if the animation's duration, including any repetitions due to
 * <code>repeatCount</code>, has been exceeded and the animation should be ended.
 */

@@ -4,9 +4,16 @@
         case RUNNING:
         case SEEKED:
             float fraction = mDuration > 0 ? (float) (currentTime - mStartTime) / mDuration : 1f;
+            if (mDuration == 0 && mRepeatCount != INFINITE) {
+                // Skip to the end
+                mCurrentIteration = mRepeatCount;
+                if (!mReversing) {
+                    mPlayingBackwards = false;
+                }
+            }
             if (fraction >= 1f) {
                 if (mCurrentIteration < mRepeatCount || mRepeatCount == INFINITE) {
                     // Time to repeat

Find a functionally equivalent code:android.webkit.WebSettings.setAppCacheEnabled:COMMENT
<android.webkit.WebSettings: void setAppCacheEnabled(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets whether the Application Caches API should be enabled. The default
 * is false. Note that in order for the Application Caches API to be
 * enabled, a valid database path must also be supplied to
 * {@link #setAppCachePath}.
 *
 * @param flag true if the WebView should enable Application Caches
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.systemui.recents.views.TaskView.startLaunchTaskAnimation:COMMENT
Method Modifier: 
Comment:/**
 * Animates this task view as it exits recents
 */

@@ -3,11 +3,11 @@
         // Animate the thumbnail alpha back into full opacity for the window animation out
         mThumbnailView.startLaunchTaskAnimation(postAnimRunnable);
         // Animate the dim
-        if (mDim > 0) {
+        if (mDimAlpha > 0) {
             ObjectAnimator anim = ObjectAnimator.ofInt(this, "dim", 0);
-            anim.setDuration(mConfig.taskBarExitAnimDuration);
+            anim.setDuration(mConfig.taskViewExitToAppDuration);
             anim.setInterpolator(mConfig.fastOutLinearInInterpolator);
             anim.start();
         }
@@ -14,26 +14,26 @@
             float toScale = 0.9f;
             mActionButtonView.animate().scaleX(toScale).scaleY(toScale);
         }
-        mActionButtonView.animate().alpha(0f).setStartDelay(0).setDuration(mConfig.taskBarExitAnimDuration).setInterpolator(mConfig.fastOutLinearInInterpolator).withLayer().start();
+        mActionButtonView.animate().alpha(0f).setStartDelay(0).setDuration(mConfig.taskViewExitToAppDuration).setInterpolator(mConfig.fastOutLinearInInterpolator).withLayer().start();
     } else {
         // Hide the dismiss button
         mHeaderView.startLaunchTaskDismissAnimation();
         // animate it away first
         if (occludesLaunchTarget) {
-            animate().alpha(0f).translationY(getTranslationY() + mConfig.taskViewAffiliateGroupEnterOffsetPx).setStartDelay(0).setUpdateListener(null).setInterpolator(mConfig.fastOutLinearInInterpolator).setDuration(mConfig.taskBarExitAnimDuration).start();
+            animate().alpha(0f).translationY(getTranslationY() + mConfig.taskViewAffiliateGroupEnterOffsetPx).setStartDelay(0).setUpdateListener(null).setInterpolator(mConfig.fastOutLinearInInterpolator).setDuration(mConfig.taskViewExitToAppDuration).start();
         }
     }
 }

Find a functionally equivalent code:android.graphics.Canvas.saveLayer:COMMENT
Method Modifier: public      
Comment:/**
 * Helper version of saveLayer() that takes 4 values rather than a RectF.
 */


Find a functionally equivalent code:android.webkit.WebIconDatabase.retainIconForPageUrl:COMMENT
<android.webkit.WebIconDatabase: void retainIconForPageUrl(String)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Retain the icon for the given page url.
 * @param url The page's url.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebSettings.setFixedFontFamily:COMMENT
<android.webkit.WebSettings: void setFixedFontFamily(String)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets the fixed font family name. The default is "monospace".
 *
 * @param font a font family name
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.systemui.recents.views.TaskView.prepareEnterRecentsAnimation:COMMENT
Method Modifier: 
Comment:/**
 * Prepares this task view for the enter-recents animations.  This is called earlier in the
 * first layout because the actual animation into recents may take a long time.
 */

@@ -1,20 +1,13 @@
 {
     int initialDim = getDim();
-    if (mConfig.launchedFromAppWithScreenshot) {
-        if (isTaskViewLaunchTargetTask) {
-            // Hide the footer during the transition in, and animate it out afterwards?
-            if (mFooterView != null) {
-                mFooterView.animateFooterVisibility(false, 0);
-            }
-        } else {
-        // Don't do anything for the side views when animating in
-        }
+    if (mConfig.launchedHasConfigurationChanged) {
+    // Just load the views as-is
     } else if (mConfig.launchedFromAppWithThumbnail) {
         if (isTaskViewLaunchTargetTask) {
-            // Hide the action button if it exists
-            mActionButtonView.setAlpha(0f);
             // Set the dim to 0 so we can animate it in
             initialDim = 0;
+            // Hide the action button
+            mActionButtonView.setAlpha(0f);
         } else if (occludesLaunchTarget) {
             // Move the task view off screen (below) so we can animate it in
             setTranslationY(offscreenY);

Find a functionally equivalent code:android.util.PathParser.extract:COMMENT
Method Modifier: private     static      
Comment:/**
 * Calculate the position of the next comma or space or negative sign
 * @param s the string to search
 * @param start the position to start searching
 * @param result the result of the extraction, including the position of the
 * the starting position of next number, whether it is ending with a '-'.
 */

@@ -1,9 +1,13 @@
 {
-    // Now looking for ' ', ',' or '-' from the start.
+    // Now looking for ' ', ',', '.' or '-' from the start.
     int currentIndex = start;
     boolean foundSeparator = false;
-    result.mEndWithNegSign = false;
+    result.mEndWithNegOrDot = false;
+    boolean secondDot = false;
+    boolean isExponential = false;
     for (; currentIndex < s.length(); currentIndex++) {
+        boolean isPrevExponential = isExponential;
+        isExponential = false;
         char currentChar = s.charAt(currentIndex);
         switch(currentChar) {
             case ' ':
@@ -11,21 +15,39 @@
                 foundSeparator = true;
                 break;
             case '-':
-                if (currentIndex != start) {
+                // The negative sign following a 'e' or 'E' is not a separator.
+                if (currentIndex != start && !isPrevExponential) {
                     foundSeparator = true;
-                    result.mEndWithNegSign = true;
+                    result.mEndWithNegOrDot = true;
                 }
                 break;
+            case '.':
+                if (!secondDot) {
+                    secondDot = true;
+                } else {
+                    // This is the second dot, and it is considered as a separator.
+                    foundSeparator = true;
+                    result.mEndWithNegOrDot = true;
+                }
+                break;
+            case 'e':
+            case 'E':
+                isExponential = true;
+                break;
         }
         if (foundSeparator) {
             break;

Find a functionally equivalent code:android.webkit.WebSettings.getUserAgentString:COMMENT
<android.webkit.WebSettings: String getUserAgentString()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets the WebView's user-agent string.
 *
 * @return the WebView's user-agent string
 * @see #setUserAgentString
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.os.AsyncTask.publishProgress:COMMENT
Method Modifier: protected   final       
Comment:/**
 * This method can be invoked from {@link #doInBackground} to
 * publish updates on the UI thread while the background computation is
 * still running. Each call to this method will trigger the execution of
 * {@link #onProgressUpdate} on the UI thread.
 *
 * {@link #onProgressUpdate} will not be called if the task has been
 * canceled.
 *
 * @param values The progress values to update the UI with.
 *
 * @see #onProgressUpdate
 * @see #doInBackground
 */

@@ -1,5 +1,5 @@
 {
     if (!isCancelled()) {
-        sHandler.obtainMessage(MESSAGE_POST_PROGRESS, new AsyncTaskResult<Progress>(this, values)).sendToTarget();
+        getHandler().obtainMessage(MESSAGE_POST_PROGRESS, new AsyncTaskResult<Progress>(this, values)).sendToTarget();
     }
 }

Find a functionally equivalent code:com.android.layoutlib.bridge.impl.RenderSessionImpl.setupTabHost:COMMENT
Method Modifier: private     
Comment:/**
 * Sets up a {@link TabHost} object.
 * @param tabHost the TabHost to setup.
 * @param projectCallback The project callback object to access the project R class.
 * @throws PostInflateException
 */

@@ -37,43 +37,44 @@
         for (int i = 0; i < count; i++) {
             View child = content.getChildAt(i);
             String tabSpec = String.format("tab_spec%d", i + 1);
-            int id = child.getId();
+            // child cannot be null.
+            @SuppressWarnings("ConstantConditions") int id = child.getId();
             @SuppressWarnings("deprecation") Pair<ResourceType, String> resource = projectCallback.resolveResourceId(id);
             String name;
             if (resource != null) {

Find a functionally equivalent code:android.webkit.WebSettings.getMediaPlaybackRequiresUserGesture:COMMENT
<android.webkit.WebSettings: boolean getMediaPlaybackRequiresUserGesture()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets whether the WebView requires a user gesture to play media.
 *
 * @return true if the WebView requires a user gesture to play media
 * @see #setMediaPlaybackRequiresUserGesture
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.animation.ValueAnimator.doAnimationFrame:COMMENT
Method Modifier: default     final       
Comment:/**
 * Processes a frame of the animation, adjusting the start time if needed.
 *
 * @param frameTime The frame time.
 * @return true if the animation has ended.
 */

@@ -1,12 +1,12 @@
 {
     if (mPlayingState == STOPPED) {
         mPlayingState = RUNNING;
-        if (mSeekTime < 0) {
+        if (mSeekFraction < 0) {
             mStartTime = frameTime;
         } else {
-            mStartTime = frameTime - mSeekTime;
-            // Now that we're playing, reset the seek time
-            mSeekTime = -1;
+            long seekTime = (long) (mDuration * mSeekFraction);
+            mStartTime = frameTime - seekTime;
+            mSeekFraction = -1;
         }
     }
     if (mPaused) {

Find a functionally equivalent code:com.android.server.net.NetworkStatsRecorder.getOrLoadCompleteLocked:COMMENT
Method Modifier: public      
Comment:/**
 * Load complete history represented by {@link FileRotator}. Caches
 * internally as a {@link WeakReference}, and updated with future
 * {@link #recordSnapshotLocked(NetworkStats, Map, long)} snapshots as long
 * as reference is valid.
 */

@@ -1,20 +1,8 @@
 {
-    NetworkStatsCollection complete = mComplete != null ? mComplete.get() : null;
-    if (complete == null) {
-        if (LOGD)
-            Slog.d(TAG, "getOrLoadCompleteLocked() reading from disk for " + mCookie);
-        try {
-            complete = new NetworkStatsCollection(mBucketDuration);
-            mRotator.readMatching(complete, Long.MIN_VALUE, Long.MAX_VALUE);
-            complete.recordCollection(mPending);
-            mComplete = new WeakReference<NetworkStatsCollection>(complete);
-        } catch (IOException e) {
-            Log.wtf(TAG, "problem completely reading network stats", e);
-            recoverFromWtf();
-        } catch (OutOfMemoryError e) {
-            Log.wtf(TAG, "problem completely reading network stats", e);
-            recoverFromWtf();
-        }
+    NetworkStatsCollection res = mComplete != null ? mComplete.get() : null;
+    if (res == null) {
+        res = loadLocked(Long.MIN_VALUE, Long.MAX_VALUE);
+        mComplete = new WeakReference<NetworkStatsCollection>(res);
     }
-    return complete;
+    return res;
 }

Find a functionally equivalent code:com.android.systemui.statusbar.ExpandableNotificationRow.isClearable:COMMENT
Method Modifier: public      
Comment:/**
 * @return Can the underlying notification be cleared?
 */

@@ -1,3 +1,3 @@
 {
-    return mClearable;
+    return mStatusBarNotification != null && mStatusBarNotification.isClearable();
 }

Find a functionally equivalent code:com.android.systemui.recents.views.TaskView.setDim:COMMENT
Method Modifier: public      
Comment:/**
 * Returns the current dim.
 */

@@ -1,23 +1,14 @@
 {
-    mDim = dim;
-    if (mDimAnimator != null) {
-        mDimAnimator.removeAllListeners();
-        mDimAnimator.cancel();
-    }
+    mDimAlpha = dim;
     if (mConfig.useHardwareLayers) {
         // Defer setting hardware layers if we have not yet measured, or there is no dim to draw
         if (getMeasuredWidth() > 0 && getMeasuredHeight() > 0) {
-            if (mDimAnimator != null) {
-                mDimAnimator.removeAllListeners();
-                mDimAnimator.cancel();
-            }
-            int inverse = 255 - mDim;
-            mDimColorFilter.setColor(Color.argb(0xFF, inverse, inverse, inverse));
-            mLayerPaint.setColorFilter(mDimColorFilter);
-            mContent.setLayerType(LAYER_TYPE_HARDWARE, mLayerPaint);
+            mDimColorFilter.setColor(Color.argb(mDimAlpha, 0, 0, 0));
+            mDimLayerPaint.setColorFilter(mDimColorFilter);
+            mContent.setLayerType(LAYER_TYPE_HARDWARE, mDimLayerPaint);
         }
     } else {
-        float dimAlpha = mDim / 255.0f;
+        float dimAlpha = mDimAlpha / 255.0f;
         if (mThumbnailView != null) {
             mThumbnailView.setDimAlpha(dimAlpha);
         }

Find a functionally equivalent code:com.android.layoutlib.bridge.Bridge.getResourceId:COMMENT
Method Modifier: public      static      
Comment:/**
 * Returns the integer id of a framework resource, from a given resource type and resource name.
 * @param type the type of the resource
 * @param name the name of the resource.
 * @return an {@link Integer} containing the resource id, or null if no resource were found.
 */

@@ -4,11 +4,8 @@
     if (map != null) {
         value = map.get(name);
     }
-    if (value == null) {
-        value = sDynamicIds.getId(type, name);
-    }
-    return value;
+    return value == null ? sDynamicIds.getId(type, name) : value;
 }

Find a functionally equivalent code:android.bluetooth.BluetoothGattCharacteristic.getStringValue:COMMENT
Method Modifier: public      
Comment:/**
 * Return the stored value of this characteristic.
 * <p>See {@link #getValue} for details.
 *
 * @param offset Offset at which the string value can be found.
 * @return Cached value of the characteristic
 */

@@ -1,5 +1,5 @@
 {
-    if (offset > mValue.length)
+    if (mValue == null || offset > mValue.length)
         return null;
     byte[] strBytes = new byte[mValue.length - offset];
     for (int i = 0; i != (mValue.length - offset); ++i) strBytes[i] = mValue[offset + i];

Find a functionally equivalent code:android.webkit.CookieManager.acceptThirdPartyCookies:COMMENT
<android.webkit.CookieManager: boolean acceptThirdPartyCookies(WebView)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets whether the {@link WebView} should allow third party cookies to be set.
 *
 * @param webview the {@link WebView} instance to get the cookie policy for
 * @return true if the {@link WebView} accepts third party cookies
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebView.getHitTestResult:COMMENT
Method Modifier: public      
Comment:/**
 * Gets a HitTestResult based on the current cursor node. If a HTML::a
 * tag is found and the anchor has a non-JavaScript URL, the HitTestResult
 * type is set to SRC_ANCHOR_TYPE and the URL is set in the "extra" field.
 * If the anchor does not have a URL or if it is a JavaScript URL, the type
 * will be UNKNOWN_TYPE and the URL has to be retrieved through
 * {@link #requestFocusNodeHref} asynchronously. If a HTML::img tag is
 * found, the HitTestResult type is set to IMAGE_TYPE and the URL is set in
 * the "extra" field. A type of
 * SRC_IMAGE_ANCHOR_TYPE indicates an anchor with a URL that has an image as
 * a child node. If a phone number is found, the HitTestResult type is set
 * to PHONE_TYPE and the phone number is set in the "extra" field of
 * HitTestResult. If a map address is found, the HitTestResult type is set
 * to GEO_TYPE and the address is set in the "extra" field of HitTestResult.
 * If an email address is found, the HitTestResult type is set to EMAIL_TYPE
 * and the email is set in the "extra" field of HitTestResult. Otherwise,
 * HitTestResult type is set to UNKNOWN_TYPE.
 */

@@ -1,6 +1,6 @@
 {
     checkThread();
-    if (DebugFlags.TRACE_API)
+    if (TRACE)
         Log.d(LOGTAG, "getHitTestResult");
     return mProvider.getHitTestResult();
 }

Find a functionally equivalent code:android.media.tv.TvInputManager.Session.selectTrack:COMMENT
Method Modifier: public      
Comment:/**
 * Selects a track.
 *
 * @param type The type of the track to select. The type can be
 * {@link TvTrackInfo#TYPE_AUDIO}, {@link TvTrackInfo#TYPE_VIDEO} or
 * {@link TvTrackInfo#TYPE_SUBTITLE}.
 * @param trackId The ID of the track to select. When {@code null}, the currently selected
 * track of the given type will be unselected.
 * @see #getTracks
 */

@@ -1,21 +1,23 @@
 {
-    if (type == TvTrackInfo.TYPE_AUDIO) {
-        if (trackId != null && !containsTrack(mAudioTracks, trackId)) {
-            Log.w(TAG, "Invalid audio trackId: " + trackId);
-            return;
+    synchronized (mTrackLock) {
+        if (type == TvTrackInfo.TYPE_AUDIO) {
+            if (trackId != null && !containsTrack(mAudioTracks, trackId)) {
+                Log.w(TAG, "Invalid audio trackId: " + trackId);
+                return;
+            }
+        } else if (type == TvTrackInfo.TYPE_VIDEO) {
+            if (trackId != null && !containsTrack(mVideoTracks, trackId)) {
+                Log.w(TAG, "Invalid video trackId: " + trackId);
+                return;
+            }
+        } else if (type == TvTrackInfo.TYPE_SUBTITLE) {
+            if (trackId != null && !containsTrack(mSubtitleTracks, trackId)) {
+                Log.w(TAG, "Invalid subtitle trackId: " + trackId);
+                return;
+            }
+        } else {
+            throw new IllegalArgumentException("invalid type: " + type);
         }
-    } else if (type == TvTrackInfo.TYPE_VIDEO) {
-        if (trackId != null && !containsTrack(mVideoTracks, trackId)) {
-            Log.w(TAG, "Invalid video trackId: " + trackId);
-            return;
-        }
-    } else if (type == TvTrackInfo.TYPE_SUBTITLE) {
-        if (trackId != null && !containsTrack(mSubtitleTracks, trackId)) {
-            Log.w(TAG, "Invalid subtitle trackId: " + trackId);
-            return;
-        }
-    } else {
-        throw new IllegalArgumentException("invalid type: " + type);
     }
     if (mToken == null) {
         Log.w(TAG, "The session has been already released");

Find a functionally equivalent code:android.webkit.WebView.setNetworkAvailable:COMMENT
Method Modifier: public      
Comment:/**
 * Informs WebView of the network state. This is used to set
 * the JavaScript property window.navigator.isOnline and
 * generates the online/offline event as specified in HTML5, sec. 5.7.7
 *
 * @param networkUp a boolean indicating if network is available
 */

@@ -1,6 +1,6 @@
 {
     checkThread();
-    if (DebugFlags.TRACE_API)
+    if (TRACE)
         Log.d(LOGTAG, "setNetworkAvailable=" + networkUp);
     mProvider.setNetworkAvailable(networkUp);
 }

Find a functionally equivalent code:com.android.internal.policy.impl.GlobalKeyManager.handleGlobalKey:COMMENT
Method Modifier: internal    
Comment:/**
 * Broadcasts an intent if the keycode is part of the global key mapping.
 *
 * @param context context used to broadcast the event
 * @param keyCode keyCode which triggered this function
 * @param event keyEvent which trigged this function
 * @return {@code true} if this was handled
 */

@@ -2,8 +2,8 @@
     if (mKeyMapping.size() > 0) {
         ComponentName component = mKeyMapping.get(keyCode);
         if (component != null) {
-            Intent intent = new Intent(Intent.ACTION_GLOBAL_BUTTON).setComponent(component).putExtra(Intent.EXTRA_KEY_EVENT, event);
+            Intent intent = new Intent(Intent.ACTION_GLOBAL_BUTTON).setComponent(component).setFlags(Intent.FLAG_RECEIVER_FOREGROUND).putExtra(Intent.EXTRA_KEY_EVENT, event);
             context.sendBroadcastAsUser(intent, UserHandle.CURRENT, null);
             return true;
         }

Find a functionally equivalent code:android.telephony.SubscriptionManager.allDefaultsSelected:COMMENT
<android.telephony.SubscriptionManager: boolean allDefaultsSelected()>
Method Modifier: public      static      hidden      
Method Modifier: Yes         Yes         Yes         
Method Updated:  Yes         No          Yes         
Comment:/**
 * @hide
 */

@@ -1,11 +1,11 @@
 {
-    if (getDefaultDataSubId() == INVALID_SUB_ID) {
+    if (!isValidSubscriptionId(getDefaultDataSubId())) {
         return false;
     }
-    if (getDefaultSmsSubId() == INVALID_SUB_ID) {
+    if (!isValidSubscriptionId(getDefaultSmsSubId())) {
         return false;
     }
-    if (getDefaultVoiceSubId() == INVALID_SUB_ID) {
+    if (!isValidSubscriptionId(getDefaultVoiceSubId())) {
         return false;
     }
     return true;

Find a functionally equivalent code:com.android.server.wm.DragState.register:COMMENT
Method Modifier: 
Comment:/**
 * @param display The Display that the window being dragged is on.
 */

@@ -18,24 +18,23 @@
         mDragWindowHandle.inputChannel = mServerChannel;
         mDragWindowHandle.layer = getDragLayerLw();
         mDragWindowHandle.layoutParamsFlags = 0;
-        mDragWindowHandle.layoutParamsPrivateFlags = 0;
         mDragWindowHandle.layoutParamsType = WindowManager.LayoutParams.TYPE_DRAG;
         mDragWindowHandle.dispatchingTimeoutNanos = WindowManagerService.DEFAULT_INPUT_DISPATCHING_TIMEOUT_NANOS;
         mDragWindowHandle.visible = true;

Find a functionally equivalent code:com.android.internal.widget.LockPatternUtils.setLockPatternEnabled:COMMENT
Method Modifier: public      internal    
Comment:/**
 * Set whether the lock pattern is enabled.
 */

@@ -1,3 +1,3 @@
 {
-    setBoolean(Settings.Secure.LOCK_PATTERN_ENABLED, enabled);
+    setBoolean(Settings.Secure.LOCK_PATTERN_ENABLED, enabled, userHandle);
 }

Find a functionally equivalent code:android.webkit.WebSettings.getDomStorageEnabled:COMMENT
<android.webkit.WebSettings: boolean getDomStorageEnabled()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets whether the DOM Storage APIs are enabled.
 *
 * @return true if the DOM Storage APIs are enabled
 * @see #setDomStorageEnabled
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.telephony.SubscriptionManager.isValidPhoneId:COMMENT
Method Modifier: public      static      hidden      
Comment:/**
 * @hide
 */

@@ -1,4 +1,3 @@
 {
-    // value is invalid.
-    return phoneId != INVALID_PHONE_ID && phoneId >= 0 && phoneId < TelephonyManager.getDefault().getPhoneCount();
+    return phoneId >= 0 && phoneId < TelephonyManager.getDefault().getPhoneCount();
 }

Find a functionally equivalent code:com.android.server.power.PowerManagerService.updateWakeLockSummaryLocked:COMMENT
Method Modifier: private     
Comment:/**
 * Updates the value of mWakeLockSummary to summarize the state of all active wake locks.
 * Note that most wake-locks are ignored when the system is asleep.
 *
 * This function must have no other side-effects.
 */

@@ -44,50 +44,50 @@
             }
         }
         if (DEBUG_SPEW) {
-            Slog.d(TAG, "updateWakeLockSummaryLocked: mWakefulness=" + wakefulnessToString(mWakefulness) + ", mWakeLockSummary=0x" + Integer.toHexString(mWakeLockSummary));
+            Slog.d(TAG, "updateWakeLockSummaryLocked: mWakefulness=" + PowerManagerInternal.wakefulnessToString(mWakefulness) + ", mWakeLockSummary=0x" + Integer.toHexString(mWakeLockSummary));
         }
     }
 }

Find a functionally equivalent code:android.view.Surface.unlockCanvasAndPost:COMMENT
Method Modifier: public      
Comment:/**
 * Posts the new contents of the {@link Canvas} to the surface and
 * releases the {@link Canvas}.
 *
 * @param canvas The canvas previously obtained from {@link #lockCanvas}.
 */

@@ -1,20 +1,10 @@
 {
-    if (canvas != mCanvas) {
-        throw new IllegalArgumentException("canvas object must be the same instance that " + "was previously returned by lockCanvas");
-    }
     synchronized (mLock) {
         checkNotReleasedLocked();
-        if (mNativeObject != mLockedObject) {
-            Log.w(TAG, "WARNING: Surface's mNativeObject (0x" + Long.toHexString(mNativeObject) + ") != mLockedObject (0x" + Long.toHexString(mLockedObject) + ")");
-        }
-        if (mLockedObject == 0) {
-            throw new IllegalStateException("Surface was not locked");
-        }
-        try {
-            nativeUnlockCanvasAndPost(mLockedObject, canvas);
-        } finally {
-            nativeRelease(mLockedObject);
-            mLockedObject = 0;
+        if (mHwuiContext != null) {
+            mHwuiContext.unlockAndPost(canvas);
+        } else {
+            unlockSwCanvasAndPost(canvas);
         }
     }
 }

Find a functionally equivalent code:android.widget.SearchView.onActionViewExpanded:COMMENT
Method Modifier: public      
Comment:/**
 * {@inheritDoc}
 */

@@ -2,9 +2,9 @@
     if (mExpandedInActionView)
         return;
     mExpandedInActionView = true;
-    mCollapsedImeOptions = mQueryTextView.getImeOptions();
-    mQueryTextView.setImeOptions(mCollapsedImeOptions | EditorInfo.IME_FLAG_NO_FULLSCREEN);
-    mQueryTextView.setText("");
+    mCollapsedImeOptions = mSearchSrcTextView.getImeOptions();
+    mSearchSrcTextView.setImeOptions(mCollapsedImeOptions | EditorInfo.IME_FLAG_NO_FULLSCREEN);
+    mSearchSrcTextView.setText("");
     setIconified(false);
 }

Find a functionally equivalent code:android.provider.DocumentsProvider.call:COMMENT
Method Modifier: public      
Comment:/**
 * Implementation is provided by the parent class. Can be overridden to
 * provide additional functionality, but subclasses <em>must</em> always
 * call the superclass. If the superclass returns {@code null}, the subclass
 * may implement custom behavior.
 */

@@ -14,20 +14,20 @@
     final Bundle out = new Bundle();
     try {
         if (METHOD_CREATE_DOCUMENT.equals(method)) {
-            enforceWritePermissionInner(documentUri);
+            enforceWritePermissionInner(documentUri, null);
             final String mimeType = extras.getString(Document.COLUMN_MIME_TYPE);
             final String displayName = extras.getString(Document.COLUMN_DISPLAY_NAME);
             final String newDocumentId = createDocument(documentId, mimeType, displayName);
@@ -24,30 +24,30 @@
             final Uri newDocumentUri = buildDocumentUriMaybeUsingTree(documentUri, newDocumentId);
             out.putParcelable(DocumentsContract.EXTRA_URI, newDocumentUri);
         } else if (METHOD_RENAME_DOCUMENT.equals(method)) {
-            enforceWritePermissionInner(documentUri);
+            enforceWritePermissionInner(documentUri, null);
             final String displayName = extras.getString(Document.COLUMN_DISPLAY_NAME);
             final String newDocumentId = renameDocument(documentId, displayName);
             if (newDocumentId != null) {
@@ -39,45 +39,45 @@
                 revokeDocumentPermission(documentId);
             }
         } else if (METHOD_DELETE_DOCUMENT.equals(method)) {
-            enforceWritePermissionInner(documentUri);
+            enforceWritePermissionInner(documentUri, null);
             deleteDocument(documentId);
             // Document no longer exists, clean up any grants
             revokeDocumentPermission(documentId);

Find a functionally equivalent code:android.webkit.WebViewDatabase.clearHttpAuthUsernamePassword:COMMENT
<android.webkit.WebViewDatabase: void clearHttpAuthUsernamePassword()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Clears any saved credentials for HTTP authentication.
 *
 * @see WebView#getHttpAuthUsernamePassword
 * @see WebView#setHttpAuthUsernamePassword
 * @see #hasHttpAuthUsernamePassword
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebSettings.setUserAgent:COMMENT
<android.webkit.WebSettings: void setUserAgent(int)>
Method Modifier: public      abstract    hidden      deprecated  
Method Modifier: Yes         No          Yes         Yes         
Method Updated:  Yes         Yes         Yes         Yes         
Comment:/**
 * Sets the user-agent string using an integer code.
 * <ul>
 * <li>0 means the WebView should use an Android user-agent string</li>
 * <li>1 means the WebView should use a desktop user-agent string</li>
 * </ul>
 * Other values are ignored. The default is an Android user-agent string,
 * i.e. code value 0.
 *
 * @param ua the integer code for the user-agent string
 * @deprecated Please use {@link #setUserAgentString} instead.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebBackForwardList.getSize:COMMENT
<android.webkit.WebBackForwardList: int getSize()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Get the total size of the back/forward list.
 * @return The size of the list.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.view.ViewTreeObserver.merge:COMMENT
Method Modifier: 
Comment:/**
 * Merges all the listeners registered on the specified observer with the listeners
 * registered on this object. After this method is invoked, the specified observer
 * will return false in {@link #isAlive()} and should not be used anymore.
 *
 * @param observer The ViewTreeObserver whose listeners must be added to this observer
 */

@@ -55,59 +55,66 @@
             mOnScrollChangedListeners = observer.mOnScrollChangedListeners;
         }
     }
+    if (observer.mOnWindowShownListeners != null) {
+        if (mOnWindowShownListeners != null) {
+            mOnWindowShownListeners.addAll(observer.mOnWindowShownListeners);
+        } else {
+            mOnWindowShownListeners = observer.mOnWindowShownListeners;
+        }
+    }
     observer.kill();
 }

Find a functionally equivalent code:com.android.internal.os.ZygoteInit.preloadClasses:COMMENT
Method Modifier: private     static      internal    
Comment:/**
 * Performs Zygote process initialization. Loads and initializes
 * commonly used classes.
 *
 * Most classes only cause a few hundred bytes to be allocated, but
 * a few will allocate a dozen Kbytes (in one case, 500+K).
 */

@@ -1,74 +1,76 @@
 {
     final VMRuntime runtime = VMRuntime.getRuntime();
-    InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream(PRELOADED_CLASSES);
-    if (is == null) {
+    InputStream is;
+    try {
+        is = new FileInputStream(PRELOADED_CLASSES);
+    } catch (FileNotFoundException e) {
         Log.e(TAG, "Couldn't find " + PRELOADED_CLASSES + ".");
-    } else {
-        Log.i(TAG, "Preloading classes...");
-        long startTime = SystemClock.uptimeMillis();
-        // Drop root perms while running static initializers.
-        setEffectiveGroup(UNPRIVILEGED_GID);
-        setEffectiveUser(UNPRIVILEGED_UID);
-        // Alter the target heap utilization.  With explicit GCs this
-        // is not likely to have any effect.
-        float defaultUtilization = runtime.getTargetHeapUtilization();
-        runtime.setTargetHeapUtilization(0.8f);
-        // Start with a clean slate.
-        System.gc();
-        runtime.runFinalizationSync();
-        Debug.startAllocCounting();
-        try {
-            BufferedReader br = new BufferedReader(new InputStreamReader(is), 256);
-            int count = 0;
-            String line;
-            while ((line = br.readLine()) != null) {
-                // Skip comments and blank lines.
-                line = line.trim();
-                if (line.startsWith("#") || line.equals("")) {
-                    continue;
+        return;
+    }
+    Log.i(TAG, "Preloading classes...");
+    long startTime = SystemClock.uptimeMillis();
+    // Drop root perms while running static initializers.
+    setEffectiveGroup(UNPRIVILEGED_GID);
+    setEffectiveUser(UNPRIVILEGED_UID);
+    // Alter the target heap utilization.  With explicit GCs this
+    // is not likely to have any effect.
+    float defaultUtilization = runtime.getTargetHeapUtilization();
+    runtime.setTargetHeapUtilization(0.8f);
+    // Start with a clean slate.
+    System.gc();
+    runtime.runFinalizationSync();
+    Debug.startAllocCounting();
+    try {
+        BufferedReader br = new BufferedReader(new InputStreamReader(is), 256);
+        int count = 0;
+        String line;
+        while ((line = br.readLine()) != null) {
+            // Skip comments and blank lines.
+            line = line.trim();
+            if (line.startsWith("#") || line.equals("")) {
+                continue;
+            }
+            try {
+                if (false) {
+                    Log.v(TAG, "Preloading " + line + "...");
                 }
-                try {
+                Class.forName(line);
+                if (Debug.getGlobalAllocSize() > PRELOAD_GC_THRESHOLD) {
                     if (false) {
-                        Log.v(TAG, "Preloading " + line + "...");
-                    }
-                    Class.forName(line);
-                    if (Debug.getGlobalAllocSize() > PRELOAD_GC_THRESHOLD) {
-                        if (false) {
-                            Log.v(TAG, " GC at " + Debug.getGlobalAllocSize());
-                        }
-                        System.gc();
-                        runtime.runFinalizationSync();
-                        Debug.resetGlobalAllocSize();
-                    }
-                    count++;
-                } catch (ClassNotFoundException e) {
-                    Log.w(TAG, "Class not found for preloading: " + line);
-                } catch (UnsatisfiedLinkError e) {
-                    Log.w(TAG, "Problem preloading " + line + ": " + e);
-                } catch (Throwable t) {
-                    Log.e(TAG, "Error preloading " + line + ".", t);
-                    if (t instanceof Error) {
-                        throw (Error) t;
+                        Log.v(TAG, " GC at " + Debug.getGlobalAllocSize());
                     }
-                    if (t instanceof RuntimeException) {
-                        throw (RuntimeException) t;
-                    }
-                    throw new RuntimeException(t);
+                    System.gc();
+                    runtime.runFinalizationSync();
+                    Debug.resetGlobalAllocSize();
+                }
+                count++;
+            } catch (ClassNotFoundException e) {
+                Log.w(TAG, "Class not found for preloading: " + line);
+            } catch (UnsatisfiedLinkError e) {
+                Log.w(TAG, "Problem preloading " + line + ": " + e);
+            } catch (Throwable t) {
+                Log.e(TAG, "Error preloading " + line + ".", t);
+                if (t instanceof Error) {
+                    throw (Error) t;
+                }
+                if (t instanceof RuntimeException) {
+                    throw (RuntimeException) t;
                 }
+                throw new RuntimeException(t);
             }
-            Log.i(TAG, "...preloaded " + count + " classes in " + (SystemClock.uptimeMillis() - startTime) + "ms.");
-        } catch (IOException e) {
-            Log.e(TAG, "Error reading " + PRELOADED_CLASSES + ".", e);
-        } finally {
-            IoUtils.closeQuietly(is);
-            // Restore default.
-            runtime.setTargetHeapUtilization(defaultUtilization);
-            // Fill in dex caches with classes, fields, and methods brought in by preloading.
-            runtime.preloadDexCaches();
-            Debug.stopAllocCounting();
-            // Bring back root. We'll need it later.
-            setEffectiveUser(ROOT_UID);
-            setEffectiveGroup(ROOT_GID);
         }
+        Log.i(TAG, "...preloaded " + count + " classes in " + (SystemClock.uptimeMillis() - startTime) + "ms.");
+    } catch (IOException e) {
+        Log.e(TAG, "Error reading " + PRELOADED_CLASSES + ".", e);
+    } finally {
+        IoUtils.closeQuietly(is);
+        // Restore default.
+        runtime.setTargetHeapUtilization(defaultUtilization);
+        // Fill in dex caches with classes, fields, and methods brought in by preloading.
+        runtime.preloadDexCaches();
+        Debug.stopAllocCounting();
+        // Bring back root. We'll need it later.
+        setEffectiveUser(ROOT_UID);
+        setEffectiveGroup(ROOT_GID);
     }
 }

Find a functionally equivalent code:android.widget.TextClock.is24HourModeEnabled:COMMENT
Method Modifier: public      
Comment:/**
 * Indicates whether the system is currently using the 24-hour mode.
 *
 * When the system is in 24-hour mode, this view will use the pattern
 * returned by {@link #getFormat24Hour()}. In 12-hour mode, the pattern
 * returned by {@link #getFormat12Hour()} is used instead.
 *
 * If either one of the formats is null, the other format is used. If
 * both formats are null, the default formats for the current locale are used.
 *
 * @return true if time should be displayed in 24-hour format, false if it
 * should be displayed in 12-hour format.
 *
 * @see #setFormat12Hour(CharSequence)
 * @see #getFormat12Hour()
 * @see #setFormat24Hour(CharSequence)
 * @see #getFormat24Hour()
 */

@@ -1,3 +1,7 @@
 {
-    return DateFormat.is24HourFormat(getContext());
+    if (mShowCurrentUserTime) {
+        return DateFormat.is24HourFormat(getContext(), ActivityManager.getCurrentUser());
+    } else {
+        return DateFormat.is24HourFormat(getContext());
+    }
 }

Find a functionally equivalent code:android.media.AudioManager.isValidRingerMode:COMMENT
Method Modifier: public      static      hidden      
Comment:/**
 * Checks valid ringer mode values.
 *
 * @return true if the ringer mode indicated is valid, false otherwise.
 *
 * @see #setRingerMode(int)
 * @hide
 */

@@ -2,6 +2,12 @@
     if (ringerMode < 0 || ringerMode > RINGER_MODE_MAX) {
         return false;
     }
-    return true;
+    IAudioService service = getService();
+    try {
+        return service.isValidRingerMode(ringerMode);
+    } catch (RemoteException e) {
+        Log.e(TAG, "Dead object in isValidRingerMode", e);
+        return false;
+    }
 }

Find a functionally equivalent code:android.widget.DayPickerView.goTo:COMMENT
<android.widget.DayPickerView: boolean goTo(Calendar,boolean,boolean,boolean)>
Method Modifier: public      private     
Method Modifier: Yes         No          
Method Updated:  No          Yes         
Comment:/**
 * This moves to the specified time in the view. If the time is not already
 * in range it will move the list so that the first of the month containing
 * the time is at the top of the view. If the new time is already in view
 * the list will not be scrolled unless forceScroll is true. This time may
 * optionally be highlighted as selected as well.
 *
 * @param day The day to move to
 * @param animate Whether to scroll to the given time or just redraw at the
 * new location
 * @param setSelected Whether to set the given time as selected
 * @param forceScroll Whether to recenter even if the time is already
 * visible
 * @return Whether or not the view animated to the new location
 */

@@ -1,9 +1,9 @@
 {
     // Set the selected day
     if (setSelected) {
-        mSelectedDay.setTimeInMillis(day.getTimeInMillis());
+        mSelectedDay.setTimeInMillis(day);
     }
-    mTempDay.setTimeInMillis(day.getTimeInMillis());
+    mTempDay.setTimeInMillis(day);
     final int position = getPositionFromDay(day);
     View child;
     int i = 0;

Find a functionally equivalent code:android.webkit.WebIconDatabase.close:COMMENT
<android.webkit.WebIconDatabase: void close()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Close the shared instance of the icon database.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.view.accessibility.AccessibilityNodeInfo.clear:COMMENT
Method Modifier: private     
Comment:/**
 * Clears the state of this instance.
 */

@@ -4,9 +4,11 @@
     mParentNodeId = ROOT_NODE_ID;
     mLabelForId = ROOT_NODE_ID;
     mLabeledById = ROOT_NODE_ID;
+    mTraversalBefore = ROOT_NODE_ID;
+    mTraversalAfter = ROOT_NODE_ID;
     mWindowId = UNDEFINED_ITEM_ID;
     mConnectionId = UNDEFINED_CONNECTION_ID;
     mMaxTextLength = -1;

Find a functionally equivalent code:android.webkit.WebSettings.getFantasyFontFamily:COMMENT
<android.webkit.WebSettings: String getFantasyFontFamily()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets the fantasy font family name.
 *
 * @return the fantasy font family name as a string
 * @see #setFantasyFontFamily
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.server.hdmi.HdmiCecKeycode.isSupportedKeycode:COMMENT
Method Modifier: default     static      
Comment:/**
 * Returns {@code true} if given Android keycode is supported, otherwise {@code false}.
 */

@@ -1,3 +1,3 @@
 {
-    return HdmiCecKeycode.androidKeyToCecKey(androidKeycode) != HdmiCecKeycode.UNSUPPORTED_KEYCODE;
+    return HdmiCecKeycode.androidKeyToCecKey(androidKeycode) != null;
 }

Find a functionally equivalent code:com.android.server.display.LogicalDisplay.updateLocked:COMMENT
Method Modifier: public      
Comment:/**
 * Updates the state of the logical display based on the available display devices.
 * The logical display might become invalid if it is attached to a display device
 * that no longer exists.
 *
 * @param devices The list of all connected display devices.
 */

@@ -32,37 +32,38 @@
         mBaseDisplayInfo.type = deviceInfo.type;
         mBaseDisplayInfo.address = deviceInfo.address;
         mBaseDisplayInfo.name = deviceInfo.name;
+        mBaseDisplayInfo.uniqueId = deviceInfo.uniqueId;
         mBaseDisplayInfo.appWidth = deviceInfo.width;
         mBaseDisplayInfo.appHeight = deviceInfo.height;
         mBaseDisplayInfo.logicalWidth = deviceInfo.width;

Find a functionally equivalent code:android.telephony.SignalStrength.getLteLevel:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * Get LTE as level 0..4
 *
 * @hide
 */

@@ -6,22 +6,29 @@
          * = -10log P1/P2 dB
          */
     int rssiIconLevel = SIGNAL_STRENGTH_NONE_OR_UNKNOWN, rsrpIconLevel = -1, snrIconLevel = -1;
-    if (mLteRsrp > -44)
+    int rsrpThreshType = Resources.getSystem().getInteger(com.android.internal.R.integer.config_LTE_RSRP_threshold_type);
+    int[] threshRsrp;
+    if (rsrpThreshType == RSRP_THRESH_TYPE_STRICT) {
+        threshRsrp = RSRP_THRESH_STRICT;
+    } else {
+        threshRsrp = RSRP_THRESH_LENIENT;
+    }
+    if (mLteRsrp > threshRsrp[5])
         rsrpIconLevel = -1;
-    else if (mLteRsrp >= -85)
+    else if (mLteRsrp >= threshRsrp[4])
         rsrpIconLevel = SIGNAL_STRENGTH_GREAT;
-    else if (mLteRsrp >= -95)
+    else if (mLteRsrp >= threshRsrp[3])
         rsrpIconLevel = SIGNAL_STRENGTH_GOOD;
-    else if (mLteRsrp >= -105)
+    else if (mLteRsrp >= threshRsrp[2])
         rsrpIconLevel = SIGNAL_STRENGTH_MODERATE;
-    else if (mLteRsrp >= -115)
+    else if (mLteRsrp >= threshRsrp[1])
         rsrpIconLevel = SIGNAL_STRENGTH_POOR;
-    else if (mLteRsrp >= -140)
+    else if (mLteRsrp >= threshRsrp[0])
         rsrpIconLevel = SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
     /*
          * Values are -200 dB to +300 (SNR*10dB) RS_SNR >= 13.0 dB =>4 bars 4.5

Find a functionally equivalent code:android.widget.SearchView.onActionViewCollapsed:COMMENT
Method Modifier: public      
Comment:/**
 * {@inheritDoc}
 */

@@ -2,7 +2,7 @@
     setQuery("", false);
     clearFocus();
     updateViewsVisibility(true);
-    mQueryTextView.setImeOptions(mCollapsedImeOptions);
+    mSearchSrcTextView.setImeOptions(mCollapsedImeOptions);
     mExpandedInActionView = false;
 }

Find a functionally equivalent code:android.app.Dialog.invalidateOptionsMenu:COMMENT
Method Modifier: public      
Comment:/**
 * @see Activity#invalidateOptionsMenu()
 */

@@ -1,3 +1,5 @@
 {
-    mWindow.invalidatePanelMenu(Window.FEATURE_OPTIONS_PANEL);
+    if (mWindow.hasFeature(Window.FEATURE_OPTIONS_PANEL)) {
+        mWindow.invalidatePanelMenu(Window.FEATURE_OPTIONS_PANEL);
+    }
 }

Find a functionally equivalent code:com.android.server.am.ActivityStack.destroyActivityLocked:COMMENT
Method Modifier: default     final       
Comment:/**
 * Destroy the current CLIENT SIDE instance of an activity.  This may be
 * called both when actually finishing an activity, or when performing
 * a configuration switch where we destroy the current client-side object
 * but then create a new client-side object for this same HistoryRecord.
 */

@@ -29,35 +29,35 @@
         } catch (Exception e) {
             // Slog.w(TAG, "Exception thrown during finish", e);
             if (r.finishing) {
-                removeActivityFromHistoryLocked(r);
+                removeActivityFromHistoryLocked(r, reason + " exceptionInScheduleDestroy");
                 removedFromHistory = true;
                 skipDestroy = true;
             }
@@ -53,59 +53,59 @@
     } else {
         // remove this record from the history.
         if (r.finishing) {
-            removeActivityFromHistoryLocked(r);
+            removeActivityFromHistoryLocked(r, reason + " hadNoApp");
             removedFromHistory = true;
         } else {
             if (DEBUG_STATES)

Find a functionally equivalent code:android.media.audiofx.AudioEffect.isEffectTypeAvailable:COMMENT
Method Modifier: public      static      hidden      
Comment:/**
 * Checks if the device implements the specified effect type.
 * @param type the requested effect type.
 * @return true if the device implements the specified effect type, false otherwise.
 * @hide
 */

@@ -1,5 +1,8 @@
 {
     AudioEffect.Descriptor[] desc = AudioEffect.queryEffects();
+    if (desc == null) {
+        return false;
+    }
     for (int i = 0; i < desc.length; i++) {
         if (desc[i].type.equals(type)) {
             return true;

Find a functionally equivalent code:android.telephony.SubscriptionManager.getDefaultSubId:COMMENT
Method Modifier: public      static      hidden      
Comment:/**
 * @return the "system" defaultSubId on a voice capable device this
 * will be getDefaultVoiceSubId() and on a data only device it will be
 * getDefaultDataSubId().
 * @hide
 */

@@ -1,5 +1,5 @@
 {
-    long subId = INVALID_SUB_ID;
+    int subId = INVALID_SUBSCRIPTION_ID;
     try {
         ISub iSub = ISub.Stub.asInterface(ServiceManager.getService("isub"));
         if (iSub != null) {

Find a functionally equivalent code:android.telephony.SubscriptionManager.getSubId:COMMENT
Method Modifier: public      static      hidden      
Comment:/**
 * @hide
 */

@@ -3,9 +3,9 @@
         logd("[getSubId]- fail");
         return null;
     }
-    long[] subId = null;
+    int[] subId = null;
     try {
         ISub iSub = ISub.Stub.asInterface(ServiceManager.getService("isub"));
         if (iSub != null) {

Find a functionally equivalent code:android.animation.StateListAnimator.addState:COMMENT
Method Modifier: public      
Comment:/**
 * Associates the given animator with the provided drawable state specs so that it will be run
 * when the View's drawable state matches the specs.
 *
 * @param specs The drawable state specs to match against
 * @param animator The animator to run when the specs match
 */

@@ -2,5 +2,6 @@
     Tuple tuple = new Tuple(specs, animator);
     tuple.mAnimator.addListener(mAnimatorListener);
     mTuples.add(tuple);
+    mChangingConfigurations |= animator.getChangingConfigurations();
 }

Find a functionally equivalent code:com.android.systemui.recents.model.RecentsPackageMonitor.unregister:COMMENT
Method Modifier: public      
Comment:/**
 * Unregisters the broadcast receivers.
 */

@@ -6,10 +6,9 @@
     }
     mSystemServicesProxy = null;
     mCb = null;
-    mTasks.clear();
 }

Find a functionally equivalent code:android.webkit.WebSettings.setGeolocationDatabasePath:COMMENT
<android.webkit.WebSettings: void setGeolocationDatabasePath(String)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:// This will update WebCore when the Sync runs in the C++ side.

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.content.pm.PackageManagerTests.testReplaceMatchSomeCerts2:COMMENT
Method Modifier: public      
Comment:/*
     * Test that an app signed with two certificates cannot be upgraded by
     * an app signed with the last certificate.
     */

@@ -1,3 +1,3 @@
 {
-    replaceCerts(APP1_CERT1_CERT2, APP1_CERT2, true, true, PackageManager.INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES);
+    replaceCerts(APP1_CERT1_CERT2, APP1_CERT2, true, true, PackageManager.INSTALL_FAILED_UPDATE_INCOMPATIBLE);
 }

Find a functionally equivalent code:android.content.pm.PackageManagerTests.testReplaceMatchSomeCerts1:COMMENT
Method Modifier: public      
Comment:/*
     * Test that an app signed with two certificates cannot be upgraded by
     * an app signed with a subset of initial certificates.
     */

@@ -1,3 +1,3 @@
 {
-    replaceCerts(APP1_CERT1_CERT2, APP1_CERT1, true, true, PackageManager.INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES);
+    replaceCerts(APP1_CERT1_CERT2, APP1_CERT1, true, true, PackageManager.INSTALL_FAILED_UPDATE_INCOMPATIBLE);
 }

Find a functionally equivalent code:android.widget.SearchView.onKeyDown:COMMENT
Method Modifier: public      
Comment:/**
 * Handles the key down event for dealing with action keys.
 *
 * @param keyCode This is the keycode of the typed key, and is the same value as
 * found in the KeyEvent parameter.
 * @param event The complete event record for the typed key
 *
 * @return true if the event was handled here, or false if not.
 */

@@ -6,12 +6,12 @@
     // entered query with the action key
     SearchableInfo.ActionKeyInfo actionKey = mSearchable.findActionKey(keyCode);
     if ((actionKey != null) && (actionKey.getQueryActionMsg() != null)) {
-        launchQuerySearch(keyCode, actionKey.getQueryActionMsg(), mQueryTextView.getText().toString());
+        launchQuerySearch(keyCode, actionKey.getQueryActionMsg(), mSearchSrcTextView.getText().toString());
         return true;
     }
     return super.onKeyDown(keyCode, event);

Find a functionally equivalent code:com.android.systemui.recents.model.RecentsTaskLoader.getAndUpdateActivityIcon:COMMENT
Method Modifier: public      
Comment:/**
 * Returns the activity icon using as many cached values as we can.
 */

@@ -4,11 +4,10 @@
     if (icon != null) {
         return icon;
     }
-    // activity icon
-    if (preloadTask) {
+    if (loadIfNotCached) {
         // Return and cache the task description icon if it exists
         Drawable tdDrawable = mLoader.getTaskDescriptionIcon(taskKey, td.getInMemoryIcon(), td.getIconFilename(), ssp, res);
         if (tdDrawable != null) {
@@ -24,29 +23,28 @@
             }
         }
     }
-    // If we couldn't load any icon, return null
+    // We couldn't load any icon
     return null;
 }

Find a functionally equivalent code:com.android.systemui.recents.AlternateRecentsComponent.startAlternateRecentsActivity:COMMENT
Method Modifier: 
Comment:/**
 * Starts the recents activity
 */

@@ -1,15 +1,21 @@
 {
+    // Update the configuration based on the launch options
+    mConfig.launchedFromHome = fromSearchHome || fromHome;
+    mConfig.launchedFromSearchHome = fromSearchHome;
+    mConfig.launchedFromAppWithThumbnail = fromThumbnail;
+    mConfig.launchedToTaskId = (topTask != null) ? topTask.id : -1;
+    mConfig.launchedWithAltTab = mTriggeredFromAltTab;
+    mConfig.launchedReuseTaskStackViews = mCanReuseTaskStackViews;
+    mConfig.launchedNumVisibleTasks = vr.numVisibleTasks;
+    mConfig.launchedNumVisibleThumbnails = vr.numVisibleThumbnails;
+    mConfig.launchedHasConfigurationChanged = false;
     Intent intent = new Intent(sToggleRecentsAction);
     intent.setClassName(sRecentsPackage, sRecentsActivity);
     intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS | Intent.FLAG_ACTIVITY_TASK_ON_HOME);
-    if (extraFlag != null) {
-        intent.putExtra(extraFlag, true);
-    }
-    intent.putExtra(EXTRA_TRIGGERED_FROM_ALT_TAB, mTriggeredFromAltTab);
-    intent.putExtra(EXTRA_FROM_TASK_ID, (topTask != null) ? topTask.id : -1);
     if (opts != null) {
         mContext.startActivityAsUser(intent, opts.toBundle(), UserHandle.CURRENT);
     } else {
         mContext.startActivityAsUser(intent, UserHandle.CURRENT);
     }
+    mCanReuseTaskStackViews = true;
 }

Find a functionally equivalent code:com.android.server.usb.UsbHostManager.usbDeviceRemoved:COMMENT
Method Modifier: private     
Comment:/* Called from JNI in monitorUsbHostBus to report USB device removal */

@@ -1,18 +1,8 @@
 {
-    if (DEBUG_AUDIO) {
-        Slog.d(TAG, "usb:UsbHostManager.usbDeviceRemoved() nm:" + deviceName);
-    }
-    if (mConnectedUsbCard != -1 && mConnectedUsbDeviceNum != -1) {
-        sendDeviceNotification(mConnectedUsbCard, mConnectedUsbDeviceNum, false, mConnectedHasPlayback, mConnectedHasCapture, mConnectedHasMIDI);
-        mConnectedUsbCard = -1;
-        mConnectedUsbDeviceNum = -1;
-        mConnectedHasPlayback = false;
-        mConnectedHasCapture = false;
-        mConnectedHasMIDI = false;
-    }
     synchronized (mLock) {
         UsbDevice device = mDevices.remove(deviceName);
         if (device != null) {
+            mUsbAudioManager.deviceRemoved(device);
             getCurrentSettings().deviceDetached(device);
         }
     }

Find a functionally equivalent code:android.app.ActivityOptions.toBundle:COMMENT
Method Modifier: public      
Comment:/**
 * Returns the created options as a Bundle, which can be passed to
 * {@link android.content.Context#startActivity(android.content.Intent, android.os.Bundle)
 * Context.startActivity(Intent, Bundle)} and related methods.
 * Note that the returned Bundle is still owned by the ActivityOptions
 * object; you must not modify it, but can supply it to the startActivity
 * methods that take an options Bundle.
 */

@@ -13,18 +13,21 @@
             b.putInt(KEY_ANIM_EXIT_RES_ID, mCustomExitResId);
             b.putBinder(KEY_ANIM_START_LISTENER, mAnimationStartedListener != null ? mAnimationStartedListener.asBinder() : null);
             break;
+        case ANIM_CUSTOM_IN_PLACE:
+            b.putInt(KEY_ANIM_IN_PLACE_RES_ID, mCustomInPlaceResId);
+            break;
         case ANIM_SCALE_UP:
             b.putInt(KEY_ANIM_START_X, mStartX);
             b.putInt(KEY_ANIM_START_Y, mStartY);

Find a functionally equivalent code:android.graphics.drawable.RippleBackground.cancelHardwareAnimations:COMMENT
Method Modifier: private     
Comment:/**
 * Cancels any running hardware animations.
 */

@@ -2,12 +2,20 @@
     final ArrayList<RenderNodeAnimator> runningAnimations = mRunningAnimations;
     final int N = runningAnimations.size();
     for (int i = 0; i < N; i++) {
-        runningAnimations.get(i).cancel();
+        if (jumpToEnd) {
+            runningAnimations.get(i).end();
+        } else {
+            runningAnimations.get(i).cancel();
+        }
     }
     runningAnimations.clear();
-    if (cancelPending && !mPendingAnimations.isEmpty()) {
-        mPendingAnimations.clear();
+    if (mHasPendingHardwareExit) {
+        // If we had a pending hardware exit, jump to the end state.
+        mHasPendingHardwareExit = false;
+        if (jumpToEnd) {
+            mOuterOpacity = 0;
+        }
     }
     mHardwareAnimating = false;
 }

Find a functionally equivalent code:com.android.internal.policy.impl.PhoneWindowManager.prepareAddWindowLw:COMMENT
Method Modifier: public      internal    
Comment:/**
 * Preflight adding a window to the system.
 *
 * Currently enforces that three window types are singletons:
 * <ul>
 * <li>STATUS_BAR_TYPE</li>
 * <li>KEYGUARD_TYPE</li>
 * </ul>
 *
 * @param win The window to be added
 * @param attrs Information about the window to be added
 *
 * @return If ok, WindowManagerImpl.ADD_OKAY.  If too many singletons,
 * WindowManagerImpl.ADD_MULTIPLE_SINGLETON
 */

@@ -9,15 +9,14 @@
             }
             mStatusBar = win;
             mStatusBarController.setWindow(win);
-            mKeyguardDelegate.hideScrim();
             break;
         case TYPE_NAVIGATION_BAR:
             mContext.enforceCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR_SERVICE, "PhoneWindowManager");

Find a functionally equivalent code:android.graphics.drawable.RippleBackground.exit:COMMENT
Method Modifier: public      
Comment:/**
 * Starts the exit animation.
 */

@@ -9,17 +9,17 @@
     // inner(t) = mOpacity - t * WAVE_OPACITY_DECAY_VELOCITY / 1000
     // outer(t) = mOuterOpacity + t * WAVE_OUTER_OPACITY_VELOCITY / 1000
     final int inflectionDuration = Math.max(0, (int) (1000 * (1 - mOuterOpacity) / (WAVE_OPACITY_DECAY_VELOCITY + outerOpacityVelocity) + 0.5f));
-    final int inflectionOpacity = (int) (mColorAlpha * (mOuterOpacity + inflectionDuration * outerOpacityVelocity * outerSizeInfluence / 1000) + 0.5f);
+    final int inflectionOpacity = (int) (Color.alpha(mColor) * (mOuterOpacity + inflectionDuration * outerOpacityVelocity * outerSizeInfluence / 1000) + 0.5f);
     if (mCanUseHardware) {
-        exitHardware(opacityDuration, inflectionDuration, inflectionOpacity);
+        createPendingHardwareExit(opacityDuration, inflectionDuration, inflectionOpacity);
     } else {
         exitSoftware(opacityDuration, inflectionDuration, inflectionOpacity);
     }

Find a functionally equivalent code:android.widget.OverScroller.SplineOverScroller.update:COMMENT
Method Modifier: 
Comment:/*
         * Update the current position and velocity for current time. Returns
         * true if update has been done and false if animation duration has been
         * reached.
         */

@@ -1,6 +1,10 @@
 {
     final long time = AnimationUtils.currentAnimationTimeMillis();
     final long currentTime = time - mStartTime;
+    if (currentTime == 0) {
+        // Skip work but report that we're still going if we have a nonzero duration.
+        return mDuration > 0;
+    }
     if (currentTime > mDuration) {
         return false;
     }

Find a functionally equivalent code:android.webkit.WebSettings.setDefaultFontSize:COMMENT
<android.webkit.WebSettings: void setDefaultFontSize(int)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets the default font size. The default is 16.
 *
 * @param size a non-negative integer between 1 and 72. Any number outside
 * the specified range will be pinned.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.graphics.drawable.InsetDrawable.setLayoutDirection:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * {@hide}
 */

@@ -1,3 +1,3 @@
 {
-    mInsetState.mDrawable.setLayoutDirection(layoutDirection);
+    mState.mDrawable.setLayoutDirection(layoutDirection);
 }

Find a functionally equivalent code:android.webkit.WebSettings.getFixedFontFamily:COMMENT
<android.webkit.WebSettings: String getFixedFontFamily()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets the fixed font family name.
 *
 * @return the fixed font family name as a string
 * @see #setFixedFontFamily
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.systemui.recents.AlternateRecentsComponent.toggleRecentsActivity:COMMENT
Method Modifier: 
Comment:/**
 * Toggles the recents activity
 */

@@ -1,19 +1,17 @@
 {
     // NOTE: Ideally, the screenshot mechanism would take the window transform into account
-    if (System.currentTimeMillis() - mLastToggleTime < sMinToggleDelay) {
+    if ((SystemClock.elapsedRealtime() - mLastToggleTime) < sMinToggleDelay) {
         return;
     }
     // If Recents is the front most activity, then we should just communicate with it directly
     // to launch the first task or dismiss itself
-    ActivityManager.RunningTaskInfo topTask = getTopMostTask();
-    AtomicBoolean isTopTaskHome = new AtomicBoolean();
-    if (isRecentsTopMost(topTask, isTopTaskHome)) {
+    ActivityManager.RunningTaskInfo topTask = mSystemServicesProxy.getTopMostTask();
+    AtomicBoolean isTopTaskHome = new AtomicBoolean(true);
+    if (topTask != null && mSystemServicesProxy.isRecentsTopMost(topTask, isTopTaskHome)) {
         // Notify recents to toggle itself
-        Intent intent = new Intent(ACTION_TOGGLE_RECENTS_ACTIVITY);
-        intent.setPackage(mContext.getPackageName());
-        intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT | Intent.FLAG_RECEIVER_FOREGROUND);
+        Intent intent = createLocalBroadcastIntent(mContext, ACTION_TOGGLE_RECENTS_ACTIVITY);
         mContext.sendBroadcastAsUser(intent, UserHandle.CURRENT);
-        mLastToggleTime = System.currentTimeMillis();
+        mLastToggleTime = SystemClock.elapsedRealtime();
         return;
     } else {
         // Otherwise, start the recents activity

Find a functionally equivalent code:com.android.systemui.volume.ZenModePanel.setRequestingConditions:COMMENT
Method Modifier: private     
Comment:/**
 * Start or stop requesting relevant zen mode exit conditions
 */

@@ -5,11 +5,17 @@
         Log.d(mTag, "setRequestingConditions " + requesting);
     mRequestingConditions = requesting;
     if (mController != null) {
-        mController.requestConditions(mRequestingConditions);
+        AsyncTask.execute(new Runnable() {
+
+            @Override
+            public void run() {
+                mController.requestConditions(requesting);
+            }
+        });
     }
     if (mRequestingConditions) {
         mTimeCondition = parseExistingTimeCondition(mExitCondition);
@@ -13,19 +19,25 @@
             mBucketIndex = -1;
         } else {
             mBucketIndex = DEFAULT_BUCKET_INDEX;
-            mTimeCondition = ZenModeConfig.toTimeCondition(MINUTE_BUCKETS[mBucketIndex]);
+            mTimeCondition = ZenModeConfig.toTimeCondition(mContext, MINUTE_BUCKETS[mBucketIndex], ActivityManager.getCurrentUser());
         }
         if (DEBUG)
             Log.d(mTag, "Initial bucket index: " + mBucketIndex);
@@ -21,26 +27,32 @@
         mConditions = null;
         handleUpdateConditions();
     } else {
-        mZenConditions.removeAllViews();
+        hideAllConditions();
     }
 }

Find a functionally equivalent code:android.view.ViewRootImpl.drawSoftware:COMMENT
Method Modifier: private     
Comment:/**
 * @return true if drawing was successful, false if an error occurred
 */

@@ -50,55 +50,56 @@
             canvas.setScreenDensity(scalingRequired ? mNoncompatDensity : 0);
             attachInfo.mSetIgnoreDirtyState = false;
             mView.draw(canvas);
+            drawAccessibilityFocusedDrawableIfNeeded(canvas);
         } finally {
             if (!attachInfo.mSetIgnoreDirtyState) {
                 // Only clear the flag if it was not set during the mView.draw() call

Find a functionally equivalent code:android.graphics.drawable.Ripple.cancel:COMMENT
Method Modifier: public      
Comment:/**
 * Cancels all animations. The caller is responsible for removing
 * the ripple from the list of animating ripples.
 */

@@ -1,6 +1,6 @@
 {
     mCanceled = true;
     cancelSoftwareAnimations();
-    cancelHardwareAnimations(true);
+    cancelHardwareAnimations(false);
     mCanceled = false;
 }

Find a functionally equivalent code:android.nfc.NfcActivityManager.createBeamShareData:COMMENT
Method Modifier: public      
Comment:/**
 * Callback from NFC service, usually on binder thread
 */

@@ -23,39 +23,43 @@
     if (urisCallback != null) {
         uris = urisCallback.createBeamUris(mDefaultEvent);
         if (uris != null) {
+            ArrayList<Uri> validUris = new ArrayList<Uri>();
             for (Uri uri : uris) {
                 if (uri == null) {
                     Log.e(TAG, "Uri not allowed to be null.");
-                    return null;
+                    continue;
                 }
                 String scheme = uri.getScheme();
                 if (scheme == null || (!scheme.equalsIgnoreCase("file") && !scheme.equalsIgnoreCase("content"))) {
                     Log.e(TAG, "Uri needs to have " + "either scheme file or scheme content");
-                    return null;
+                    continue;
                 }
+                uri = ContentProvider.maybeAddUserId(uri, UserHandle.myUserId());
+                validUris.add(uri);
             }
+            uris = validUris.toArray(new Uri[validUris.size()]);
         }
     }
     if (uris != null && uris.length > 0) {
@@ -42,46 +46,50 @@
             activity.grantUriPermission("com.android.nfc", uri, Intent.FLAG_GRANT_READ_URI_PERMISSION);
         }
     }
-    return new BeamShareData(message, uris, flags);
+    return new BeamShareData(message, uris, UserHandle.CURRENT, flags);
 }

Find a functionally equivalent code:com.android.server.connectivity.Tethering.sendTetherStateChangedBroadcast:COMMENT
Method Modifier: private     
Comment:// to clarify what needs synchronized protection.

@@ -48,54 +48,55 @@
         if (bluetoothTethered) {
             showTetheredNotification(com.android.internal.R.drawable.stat_sys_tether_general);
         } else {
-            showTetheredNotification(com.android.internal.R.drawable.stat_sys_tether_wifi);
+            /* We now have a status bar icon for WifiTethering, so drop the notification */
+            clearTetheredNotification();
         }
     } else if (bluetoothTethered) {
         showTetheredNotification(com.android.internal.R.drawable.stat_sys_tether_bluetooth);

Find a functionally equivalent code:android.webkit.WebSettings.setPluginState:COMMENT
<android.webkit.WebSettings: void setPluginState(PluginState)>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
Comment:/**
 * Tells the WebView to enable, disable, or have plugins on demand. On
 * demand mode means that if a plugin exists that can handle the embedded
 * content, a placeholder icon will be shown instead of the plugin. When
 * the placeholder is clicked, the plugin will be enabled. The default is
 * {@link PluginState#OFF}.
 *
 * @param state a PluginState value
 * @deprecated Plugins will not be supported in future, and should not be used.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.internal.widget.LockPatternUtils.savedPasswordExists:COMMENT
Method Modifier: public      internal    
Comment:/**
 * Check to see if the user has stored a lock pattern.
 * @return Whether a saved pattern exists.
 */

@@ -1,6 +1,6 @@
 {
     try {
-        return getLockSettings().havePassword(getCurrentOrCallingUserId());
+        return getLockSettings().havePassword(userId);
     } catch (RemoteException re) {
         return false;
     }

Find a functionally equivalent code:android.view.SurfaceView.updateWindow:COMMENT
Method Modifier: protected   hidden      
Comment:/**
 * @hide
 */

@@ -50,56 +50,56 @@
                 mWindow = new MyWindow(this);
                 mLayout.type = mWindowType;
                 mLayout.gravity = Gravity.START | Gravity.TOP;
-                mSession.addToDisplayWithoutInputChannel(mWindow, mWindow.mSeq, mLayout, mVisible ? VISIBLE : GONE, display.getDisplayId(), mContentInsets);
+                mSession.addToDisplayWithoutInputChannel(mWindow, mWindow.mSeq, mLayout, mVisible ? VISIBLE : GONE, display.getDisplayId(), mContentInsets, mStableInsets);
             }
             boolean realSizeChanged;
             boolean reportDrawNeeded;

Find a functionally equivalent code:android.view.ViewRootImpl.setView:COMMENT
Method Modifier: public      
Comment:/**
 * We have one child
 */

@@ -68,74 +68,74 @@
                 mOrigWindowType = mWindowAttributes.type;
                 mAttachInfo.mRecomputeGlobalAttributes = true;
                 collectViewAttributes();
-                res = mWindowSession.addToDisplay(mWindow, mSeq, mWindowAttributes, getHostVisibility(), mDisplay.getDisplayId(), mAttachInfo.mContentInsets, mInputChannel);
+                res = mWindowSession.addToDisplay(mWindow, mSeq, mWindowAttributes, getHostVisibility(), mDisplay.getDisplayId(), mAttachInfo.mContentInsets, mAttachInfo.mStableInsets, mInputChannel);
             } catch (RemoteException e) {
                 mAdded = false;
                 mView = null;
@@ -117,122 +117,124 @@
                         throw new WindowManager.BadTokenException("Unable to add window " + mWindow + " -- permission denied for this window type");
                     case WindowManagerGlobal.ADD_INVALID_DISPLAY:
                         throw new WindowManager.InvalidDisplayException("Unable to add window " + mWindow + " -- the specified display can not be found");
+                    case WindowManagerGlobal.ADD_INVALID_TYPE:
+                        throw new WindowManager.InvalidDisplayException("Unable to add window " + mWindow + " -- the specified window type is not valid");
                 }
                 throw new RuntimeException("Unable to add window -- unknown error code " + res);
             }

Find a functionally equivalent code:android.webkit.WebSettings.setDatabaseEnabled:COMMENT
<android.webkit.WebSettings: void setDatabaseEnabled(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets whether the database storage API is enabled. The default value is
 * false. See also {@link #setDatabasePath} for how to correctly set up the
 * database storage API.
 *
 * This setting is global in effect, across all WebView instances in a process.
 * Note you should only modify this setting prior to making <b>any</b> WebView
 * page load within a given process, as the WebView implementation may ignore
 * changes to this setting after that point.
 *
 * @param flag true if the WebView should use the database storage API
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebSettings.getMinimumLogicalFontSize:COMMENT
<android.webkit.WebSettings: int getMinimumLogicalFontSize()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets the minimum logical font size.
 *
 * @return a non-negative integer between 1 and 72
 * @see #setMinimumLogicalFontSize
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebSettings.setNavDump:COMMENT
<android.webkit.WebSettings: void setNavDump(boolean)>
Method Modifier: public      abstract    hidden      deprecated  
Method Modifier: Yes         No          Yes         Yes         
Method Updated:  Yes         Yes         Yes         Yes         
Comment:/**
 * Enables dumping the pages navigation cache to a text file. The default
 * is false.
 *
 * @deprecated This method is now obsolete.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.media.Image.setCropRect:COMMENT
Method Modifier: public      
Comment:/**
 * Set the crop rectangle associated with this frame.
 * <p>
 * The crop rectangle specifies the region of valid pixels in the image,
 * using coordinates in the largest-resolution plane.
 */

@@ -1,6 +1,8 @@
 {
-    // make a copy
-    cropRect = new Rect(cropRect);
-    cropRect.intersect(0, 0, getWidth(), getHeight());
+    if (cropRect != null) {
+        // make a copy
+        cropRect = new Rect(cropRect);
+        cropRect.intersect(0, 0, getWidth(), getHeight());
+    }
     mCropRect = cropRect;
 }

Find a functionally equivalent code:android.app.Notification.Action.WearableExtender.extend:COMMENT
Method Modifier: public      
Comment:/**
 * Apply wearable extensions to a notification action that is being built. This is
 * typically called by the {@link android.app.Notification.Action.Builder#extend}
 * method of {@link android.app.Notification.Action.Builder}.
 */

@@ -3,8 +3,17 @@
     if (mFlags != DEFAULT_FLAGS) {
         wearableBundle.putInt(KEY_FLAGS, mFlags);
     }
+    if (mInProgressLabel != null) {
+        wearableBundle.putCharSequence(KEY_IN_PROGRESS_LABEL, mInProgressLabel);
+    }
+    if (mConfirmLabel != null) {
+        wearableBundle.putCharSequence(KEY_CONFIRM_LABEL, mConfirmLabel);
+    }
+    if (mCancelLabel != null) {
+        wearableBundle.putCharSequence(KEY_CANCEL_LABEL, mCancelLabel);
+    }
     builder.getExtras().putBundle(EXTRA_WEARABLE_EXTENSIONS, wearableBundle);
     return builder;
 }

Find a functionally equivalent code:android.webkit.WebSettings.getSansSerifFontFamily:COMMENT
<android.webkit.WebSettings: String getSansSerifFontFamily()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets the sans-serif font family name.
 *
 * @return the sans-serif font family name as a string
 * @see #setSansSerifFontFamily
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebView.removeJavascriptInterface:COMMENT
Method Modifier: public      
Comment:/**
 * Removes a previously injected Java object from this WebView. Note that
 * the removal will not be reflected in JavaScript until the page is next
 * (re)loaded. See {@link #addJavascriptInterface}.
 *
 * @param name the name used to expose the object in JavaScript
 */

@@ -1,6 +1,6 @@
 {
     checkThread();
-    if (DebugFlags.TRACE_API)
+    if (TRACE)
         Log.d(LOGTAG, "removeJavascriptInterface=" + name);
     mProvider.removeJavascriptInterface(name);
 }

Find a functionally equivalent code:android.webkit.WebSettings.setLoadWithOverviewMode:COMMENT
<android.webkit.WebSettings: void setLoadWithOverviewMode(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets whether the WebView loads pages in overview mode, that is,
 * zooms out the content to fit on screen by width. This setting is
 * taken into account when the content width is greater than the width
 * of the WebView control, for example, when {@link #getUseWideViewPort}
 * is enabled. The default is false.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebSettings.setSupportZoom:COMMENT
<android.webkit.WebSettings: void setSupportZoom(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets whether the WebView should support zooming using its on-screen zoom
 * controls and gestures. The particular zoom mechanisms that should be used
 * can be set with {@link #setBuiltInZoomControls}. This setting does not
 * affect zooming performed using the {@link WebView#zoomIn()} and
 * {@link WebView#zoomOut()} methods. The default is true.
 *
 * @param support whether the WebView should support zoom
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.media.tv.TvInputManager.Session.tune:COMMENT
Method Modifier: public      
Comment:/**
 * Tunes to a given channel.
 *
 * @param channelUri The URI of a channel.
 * @throws IllegalArgumentException if the argument is {@code null}.
 */


Find a functionally equivalent code:android.app.backup.WallpaperBackupHelper.restoreEntity:COMMENT
Method Modifier: public      
Comment:/**
 * Restore one absolute file entity from the restore stream.  If we're restoring the
 * magic wallpaper file, take specific action to determine whether it is suitable for
 * the current device.
 */

@@ -15,23 +15,26 @@
                     // We accept any wallpaper that is at least as wide as our preference
                     // (i.e. wide enough to fill the screen), and is within a comfortable
                     // factor of the target height, to avoid significant clipping/scaling/
-                    // letterboxing.
+                    // letterboxing.  At this point we know that mDesiredMinWidth is the
+                    // smallest dimension, regardless of current orientation, so we can
+                    // safely require that the candidate's width and height both exceed
+                    // that hard minimum.
                     final double heightRatio = mDesiredMinHeight / options.outHeight;
-                    if (options.outWidth < mDesiredMinWidth || heightRatio >= MAX_HEIGHT_RATIO || heightRatio <= MIN_HEIGHT_RATIO) {
+                    if (options.outWidth < mDesiredMinWidth || options.outHeight < mDesiredMinWidth || heightRatio >= MAX_HEIGHT_RATIO || heightRatio <= MIN_HEIGHT_RATIO) {
                         // Not wide enough for the screen, or too short/tall to be a good fit
                         // for the height of the screen, broken image file, or the system's
                         // desires for wallpaper size are in a bad state.  Probably one of the

Find a functionally equivalent code:com.android.systemui.recents.views.TaskView.resetViewProperties:COMMENT
Method Modifier: 
Comment:/**
 * Resets this view's properties
 */

@@ -1,4 +1,11 @@
 {
     setDim(0);
+    setLayerType(View.LAYER_TYPE_NONE, null);
     TaskViewTransform.reset(this);
+    if (mActionButtonView != null) {
+        mActionButtonView.setScaleX(1f);
+        mActionButtonView.setScaleY(1f);
+        mActionButtonView.setAlpha(1f);
+        mActionButtonView.setTranslationZ(mActionButtonTranslationZ);
+    }
 }

Find a functionally equivalent code:com.android.systemui.recents.views.TaskStackViewLayoutAlgorithm.computeMinMaxScroll:COMMENT
Method Modifier: 
Comment:/**
 * Computes the minimum and maximum scroll progress values.  This method may be called before
 * the RecentsConfiguration is set, so we need to pass in the alt-tab state.
 */

@@ -20,26 +20,25 @@
     // Update the task offsets
     float pAtBackMostCardTop = 0.5f;
     float pAtFrontMostCardTop = pAtBackMostCardTop;
-    float pAtSecondFrontMostCardTop = pAtBackMostCardTop;
     int taskCount = tasks.size();
     for (int i = 0; i < taskCount; i++) {
         Task task = tasks.get(i);
@@ -28,49 +27,42 @@
         if (i < (taskCount - 1)) {
             // Increment the peek height
             float pPeek = task.group.isFrontMostTask(task) ? pBetweenAffiliateOffset : pWithinAffiliateOffset;
-            pAtSecondFrontMostCardTop = pAtFrontMostCardTop;
             pAtFrontMostCardTop += pPeek;
         }
     }
     mMaxScrollP = pAtFrontMostCardTop - ((1f - pTaskHeightOffset - pNavBarOffset));
     mMinScrollP = tasks.size() == 1 ? Math.max(mMaxScrollP, 0f) : 0f;
-    if (launchedWithAltTab) {
-        if (launchedFromHome) {
-            // Center the top most task, since that will be focused first
-            mInitialScrollP = pAtSecondFrontMostCardTop - 0.5f;
-        } else {
-            // Center the second top most task, since that will be focused first
-            mInitialScrollP = pAtSecondFrontMostCardTop - 0.5f;
-        }
+    if (launchedWithAltTab && launchedFromHome) {
+        // Center the top most task, since that will be focused first
+        mInitialScrollP = mMaxScrollP;
     } else {
         mInitialScrollP = pAtFrontMostCardTop - 0.825f;
     }
-    mInitialScrollP = Math.max(0, mInitialScrollP);
+    mInitialScrollP = Math.min(mMaxScrollP, Math.max(0, mInitialScrollP));
 }

Find a functionally equivalent code:com.android.systemui.recents.views.TaskView.getDim:COMMENT
Method Modifier: public      
Comment:/**
 * Returns the current dim.
 */

@@ -1,3 +1,3 @@
 {
-    return mDim;
+    return mDimAlpha;
 }

Find a functionally equivalent code:com.android.systemui.recents.views.RecentsView.startExitToHomeAnimation:COMMENT
Method Modifier: public      
Comment:/**
 * Requests all task stacks to start their exit-recents animation
 */

@@ -1,4 +1,7 @@
 {
+    // We have to increment/decrement the post animation trigger in case there are no children
+    // to ensure that it runs
+    ctx.postAnimationTrigger.increment();
     int childCount = getChildCount();
     for (int i = 0; i < childCount; i++) {
         View child = getChildAt(i);
@@ -7,12 +10,16 @@
             stackView.startExitToHomeAnimation(ctx);
         }
     }
+    ctx.postAnimationTrigger.decrement();
     // Notify of the exit animation
     mCb.onExitToHomeAnimationTriggered();
 }

Find a functionally equivalent code:android.webkit.WebView.setCertificate:COMMENT
Method Modifier: public      deprecated  
Comment:/**
 * Sets the SSL certificate for the main top-level page.
 *
 * @deprecated Calling this function has no useful effect, and will be
 * ignored in future releases.
 */

@@ -1,6 +1,6 @@
 {
     checkThread();
-    if (DebugFlags.TRACE_API)
+    if (TRACE)
         Log.d(LOGTAG, "setCertificate=" + certificate);
     mProvider.setCertificate(certificate);
 }

Find a functionally equivalent code:android.view.accessibility.AccessibilityNodeInfo.writeToParcel:COMMENT
Method Modifier: public      
Comment:/**
 * {@inheritDoc}
 * <p>
 * <strong>Note:</strong> After the instance is written to a parcel it
 * is recycled. You must not touch the object after calling this function.
 * </p>
 */

@@ -5,10 +5,12 @@
     parcel.writeLong(mParentNodeId);
     parcel.writeLong(mLabelForId);
     parcel.writeLong(mLabeledById);
+    parcel.writeLong(mTraversalBefore);
+    parcel.writeLong(mTraversalAfter);
     parcel.writeInt(mConnectionId);
     final LongArray childIds = mChildNodeIds;
     if (childIds == null) {

Find a functionally equivalent code:android.widget.SearchView.clearFocus:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * @hide
 */

@@ -2,7 +2,7 @@
     mClearingFocus = true;
     setImeVisibility(false);
     super.clearFocus();
-    mQueryTextView.clearFocus();
+    mSearchSrcTextView.clearFocus();
     mClearingFocus = false;
 }

Find a functionally equivalent code:android.webkit.WebView.findAllAsync:COMMENT
Method Modifier: public      
Comment:/**
 * Finds all instances of find on the page and highlights them,
 * asynchronously. Notifies any registered {@link FindListener}.
 * Successive calls to this will cancel any pending searches.
 *
 * @param find the string to find.
 * @see #setFindListener
 */

@@ -1,6 +1,6 @@
 {
     checkThread();
-    if (DebugFlags.TRACE_API)
+    if (TRACE)
         Log.d(LOGTAG, "findAllAsync");
     mProvider.findAllAsync(find);
 }

Find a functionally equivalent code:com.android.server.power.PowerManagerService.updateSuspendBlockerLocked:COMMENT
Method Modifier: private     
Comment:/**
 * Updates the suspend blocker that keeps the CPU alive.
 *
 * This function must have no other side-effects.
 */

@@ -2,15 +2,11 @@
     final boolean needWakeLockSuspendBlocker = ((mWakeLockSummary & WAKE_LOCK_CPU) != 0);
     final boolean needDisplaySuspendBlocker = needDisplaySuspendBlockerLocked();
     final boolean autoSuspend = !needDisplaySuspendBlocker;
-    // Disable auto-suspend if needed.
-    if (!autoSuspend) {
-        if (mDecoupleHalAutoSuspendModeFromDisplayConfig) {
-            setHalAutoSuspendModeLocked(false);
-        }
-        if (mDecoupleHalInteractiveModeFromDisplayConfig) {
-            setHalInteractiveModeLocked(true);
-        }
+    final boolean interactive = mDisplayPowerRequest.isBrightOrDim();
+    // we already hold the necessary wakelocks.
+    if (!autoSuspend && mDecoupleHalAutoSuspendModeFromDisplayConfig) {
+        setHalAutoSuspendModeLocked(false);
     }
     // First acquire suspend blockers if needed.
     if (needWakeLockSuspendBlocker && !mHoldingWakeLockSuspendBlocker) {
@@ -20,25 +16,28 @@
         mDisplaySuspendBlocker.acquire();
         mHoldingDisplaySuspendBlocker = true;
     }
+    // Refer to getDesiredScreenPolicyLocked() for details.
+    if (mDecoupleHalInteractiveModeFromDisplayConfig) {
+        // too tangled over here...
+        if (interactive || mDisplayReady) {
+            setHalInteractiveModeLocked(interactive);
+        }
+    }
     // Then release suspend blockers if needed.
     if (!needWakeLockSuspendBlocker && mHoldingWakeLockSuspendBlocker) {
         mWakeLockSuspendBlocker.release();
@@ -30,41 +33,39 @@
         mHoldingDisplaySuspendBlocker = false;
     }
     // Enable auto-suspend if needed.
-    if (autoSuspend) {
-        if (mDecoupleHalInteractiveModeFromDisplayConfig) {
-            setHalInteractiveModeLocked(false);
-        }
-        if (mDecoupleHalAutoSuspendModeFromDisplayConfig) {
-            setHalAutoSuspendModeLocked(true);
-        }
+    if (autoSuspend && mDecoupleHalAutoSuspendModeFromDisplayConfig) {
+        setHalAutoSuspendModeLocked(true);
     }
 }

Find a functionally equivalent code:com.android.internal.widget.ExploreByTouchHelper.createNodeForChild:COMMENT
Method Modifier: private     internal    
Comment:/**
 * Constructs and returns an {@link AccessibilityNodeInfo} for the
 * specified item. Automatically manages accessibility focus actions.
 * <p>
 * Allows the implementing class to specify most node properties, but
 * overrides the following:
 * <ul>
 * <li>{@link AccessibilityNodeInfo#setPackageName}
 * <li>{@link AccessibilityNodeInfo#setClassName}
 * <li>{@link AccessibilityNodeInfo#setParent(View)}
 * <li>{@link AccessibilityNodeInfo#setSource(View, int)}
 * <li>{@link AccessibilityNodeInfo#setVisibleToUser}
 * <li>{@link AccessibilityNodeInfo#setBoundsInScreen(Rect)}
 * </ul>
 * <p>
 * Uses the bounds of the parent view and the parent-relative bounding
 * rectangle specified by
 * {@link AccessibilityNodeInfo#getBoundsInParent} to automatically
 * update the following properties:
 * <ul>
 * <li>{@link AccessibilityNodeInfo#setVisibleToUser}
 * <li>{@link AccessibilityNodeInfo#setBoundsInParent}
 * </ul>
 *
 * @param virtualViewId The virtual view id for item for which to construct
 * a node.
 * @return An {@link AccessibilityNodeInfo} for the specified item.
 */

@@ -1,16 +1,21 @@
 {
+    ensureTempRects();
+    final Rect tempParentRect = mTempParentRect;
+    final int[] tempGlobalRect = mTempGlobalRect;
+    final Rect tempScreenRect = mTempScreenRect;
     final AccessibilityNodeInfo node = AccessibilityNodeInfo.obtain();
     // Ensure the client has good defaults.
     node.setEnabled(true);
     node.setClassName(DEFAULT_CLASS_NAME);
+    node.setBoundsInParent(INVALID_PARENT_BOUNDS);
     // Allow the client to populate the node.
     onPopulateNodeForVirtualView(virtualViewId, node);
     // Make sure the developer is following the rules.
     if ((node.getText() == null) && (node.getContentDescription() == null)) {
         throw new RuntimeException("Callbacks must add text or a content description in " + "populateNodeForVirtualViewId()");
     }
-    node.getBoundsInParent(mTempParentRect);
-    if (mTempParentRect.isEmpty()) {
+    node.getBoundsInParent(tempParentRect);
+    if (tempParentRect.equals(INVALID_PARENT_BOUNDS)) {
         throw new RuntimeException("Callbacks must set parent bounds in " + "populateNodeForVirtualViewId()");
     }
     final int actions = node.getActions();
@@ -27,48 +32,53 @@
     // Manage internal accessibility focus state.
     if (mFocusedVirtualViewId == virtualViewId) {
         node.setAccessibilityFocused(true);
-        node.addAction(AccessibilityNodeInfo.ACTION_CLEAR_ACCESSIBILITY_FOCUS);
+        node.addAction(AccessibilityAction.ACTION_CLEAR_ACCESSIBILITY_FOCUS);
     } else {
         node.setAccessibilityFocused(false);
-        node.addAction(AccessibilityNodeInfo.ACTION_ACCESSIBILITY_FOCUS);
+        node.addAction(AccessibilityAction.ACTION_ACCESSIBILITY_FOCUS);
     }
     // Set the visibility based on the parent bound.
-    if (intersectVisibleToUser(mTempParentRect)) {
+    if (intersectVisibleToUser(tempParentRect)) {
         node.setVisibleToUser(true);
-        node.setBoundsInParent(mTempParentRect);
+        node.setBoundsInParent(tempParentRect);
     }
     // Calculate screen-relative bound.
-    mView.getLocationOnScreen(mTempGlobalRect);
-    final int offsetX = mTempGlobalRect[0];
-    final int offsetY = mTempGlobalRect[1];
-    mTempScreenRect.set(mTempParentRect);
-    mTempScreenRect.offset(offsetX, offsetY);
-    node.setBoundsInScreen(mTempScreenRect);
+    mView.getLocationOnScreen(tempGlobalRect);
+    final int offsetX = tempGlobalRect[0];
+    final int offsetY = tempGlobalRect[1];
+    tempScreenRect.set(tempParentRect);
+    tempScreenRect.offset(offsetX, offsetY);
+    node.setBoundsInScreen(tempScreenRect);
     return node;
 }

Find a functionally equivalent code:android.os.Debug.MemoryInfo.getOtherLabel:COMMENT
Method Modifier: public      static      hidden      
Comment:/**
 * @hide
 */

@@ -9,47 +9,55 @@
         case 3:
             return "Ashmem";
         case 4:
-            return "Other dev";
+            return "Gfx dev";
         case 5:
-            return ".so mmap";
+            return "Other dev";
         case 6:
-            return ".jar mmap";
+            return ".so mmap";
         case 7:
-            return ".apk mmap";
+            return ".jar mmap";
         case 8:
-            return ".ttf mmap";
+            return ".apk mmap";
         case 9:
-            return ".dex mmap";
+            return ".ttf mmap";
         case 10:
-            return "code mmap";
+            return ".dex mmap";
         case 11:
-            return "image mmap";
+            return ".oat mmap";
         case 12:
-            return "Other mmap";
+            return ".art mmap";
         case 13:
-            return "Graphics";
+            return "Other mmap";
         case 14:
-            return "GL";
+            return "EGL mtrack";
         case 15:
-            return "Memtrack";
+            return "GL mtrack";
         case 16:
-            return ".Heap";
+            return "Other mtrack";
         case 17:
-            return ".LOS";
+            return ".Heap";
         case 18:
-            return ".LinearAlloc";
+            return ".LOS";
         case 19:
-            return ".GC";
+            return ".LinearAlloc";
         case 20:
+            return ".GC";
+        case 21:
             return ".JITCache";
+        case 22:
+            return ".Zygote";
+        case 23:
+            return ".NonMoving";
+        case 24:
+            return ".IndirectRef";
         default:
             return "????";
     }

Find a functionally equivalent code:android.graphics.drawable.InsetDrawable.getOpticalInsets:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * @hide
 */

@@ -1,4 +1,4 @@
 {
     final Insets contentInsets = super.getOpticalInsets();
-    return Insets.of(contentInsets.left + mInsetState.mInsetLeft, contentInsets.top + mInsetState.mInsetTop, contentInsets.right + mInsetState.mInsetRight, contentInsets.bottom + mInsetState.mInsetBottom);
+    return Insets.of(contentInsets.left + mState.mInsetLeft, contentInsets.top + mState.mInsetTop, contentInsets.right + mState.mInsetRight, contentInsets.bottom + mState.mInsetBottom);
 }

Find a functionally equivalent code:android.webkit.WebSettings.getUserAgent:COMMENT
<android.webkit.WebSettings: int getUserAgent()>
Method Modifier: public      abstract    hidden      deprecated  
Method Modifier: Yes         No          Yes         Yes         
Method Updated:  Yes         Yes         Yes         Yes         
Comment:/**
 * Gets the user-agent as an integer code.
 * <ul>
 * <li>-1 means the WebView is using a custom user-agent string set with
 * {@link #setUserAgentString}</li>
 * <li>0 means the WebView should use an Android user-agent string</li>
 * <li>1 means the WebView should use a desktop user-agent string</li>
 * </ul>
 *
 * @return the integer code for the user-agent string
 * @see #setUserAgent
 * @deprecated Please use {@link #getUserAgentString} instead.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.systemui.statusbar.stack.StackScrollState.apply:COMMENT
Method Modifier: public      
Comment:/**
 * Apply the properties saved in {@link #mStateMap} to the children of the {@link #mHostView}.
 * The properties are only applied if they effectively changed.
 */

@@ -30,38 +30,36 @@
                     child.setLayerType(newLayerType, null);
                 }
                 // apply alpha
-                if (!becomesInvisible) {
-                    child.setAlpha(newAlpha);
-                }
+                child.setAlpha(newAlpha);
             }
             // apply visibility
             int oldVisibility = child.getVisibility();
@@ -60,66 +58,65 @@
             // apply dimming
             child.setDimmed(state.dimmed, false);
             // apply dark
-            child.setDark(state.dark, false);
+            child.setDark(state.dark, false, /* animate */
+            0);
             // apply hiding sensitive
             child.setHideSensitive(state.hideSensitive, false, /* animated */
             0, /* delay */

Find a functionally equivalent code:com.android.systemui.recents.views.TaskStackView.focusTask:COMMENT
Method Modifier: 
Comment:/**
 * Focuses the task at the specified index in the stack
 */

@@ -9,15 +9,15 @@
         TaskView tv = getChildViewForTask(t);
         Runnable postScrollRunnable = null;
         if (tv != null) {
-            tv.setFocusedTask();
+            tv.setFocusedTask(animateFocusedState);
         } else {
             postScrollRunnable = new Runnable() {
 
@@ -18,24 +18,24 @@
                     Task t = mStack.getTasks().get(mFocusedTaskIndex);
                     TaskView tv = getChildViewForTask(t);
                     if (tv != null) {
-                        tv.setFocusedTask();
+                        tv.setFocusedTask(animateFocusedState);
                     }
                 }
             };

Find a functionally equivalent code:com.android.internal.policy.impl.PhoneWindowManager.finishPostLayoutPolicyLw:COMMENT
Method Modifier: public      internal    
Comment:/**
 * {@inheritDoc}
 */

@@ -71,79 +71,79 @@
     if (mKeyguardDelegate != null && mStatusBar != null) {
         if (localLOGV)
             Slog.v(TAG, "finishPostLayoutPolicyLw: mHideKeyguard=" + mHideLockScreen);
-        if (mDismissKeyguard != DISMISS_KEYGUARD_NONE && !isKeyguardSecure()) {
+        if (mDismissKeyguard != DISMISS_KEYGUARD_NONE && !mKeyguardSecure) {
             mKeyguardHidden = true;
-            if (processKeyguardSetHiddenResultLw(mKeyguardDelegate.setOccluded(true))) {
+            if (setKeyguardOccludedLw(true)) {
                 changes |= FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
             }
             if (mKeyguardDelegate.isShowing()) {
@@ -87,93 +87,93 @@
             }
         } else if (mHideLockScreen) {
             mKeyguardHidden = true;
-            if (processKeyguardSetHiddenResultLw(mKeyguardDelegate.setOccluded(true))) {
+            if (setKeyguardOccludedLw(true)) {
                 changes |= FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
             }
         } else if (mDismissKeyguard != DISMISS_KEYGUARD_NONE) {
@@ -95,101 +95,101 @@
             if (mDismissKeyguard == DISMISS_KEYGUARD_START) {
                 // Only launch the next keyguard unlock window once per window.
                 mKeyguardHidden = false;
-                if (processKeyguardSetHiddenResultLw(mKeyguardDelegate.setOccluded(false))) {
+                if (setKeyguardOccludedLw(false)) {
                     changes |= FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
                 }
                 mHandler.post(new Runnable() {
@@ -109,115 +109,115 @@
         } else {
             mWinDismissingKeyguard = null;
             mKeyguardHidden = false;
-            if (processKeyguardSetHiddenResultLw(mKeyguardDelegate.setOccluded(false))) {
+            if (setKeyguardOccludedLw(false)) {
                 changes |= FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
             }
         }

Find a functionally equivalent code:android.webkit.WebSettings.setDatabasePath:COMMENT
<android.webkit.WebSettings: void setDatabasePath(String)>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
Comment:// once.

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.app.Dialog.openOptionsMenu:COMMENT
Method Modifier: public      
Comment:/**
 * @see Activity#openOptionsMenu()
 */

@@ -1,3 +1,5 @@
 {
-    mWindow.openPanel(Window.FEATURE_OPTIONS_PANEL, null);
+    if (mWindow.hasFeature(Window.FEATURE_OPTIONS_PANEL)) {
+        mWindow.openPanel(Window.FEATURE_OPTIONS_PANEL, null);
+    }
 }

Find a functionally equivalent code:com.android.systemui.recents.views.TaskView.unsetFocusedTask:COMMENT
Method Modifier: 
Comment:/**
 * Unsets the focused task explicitly.
 */

@@ -2,12 +2,14 @@
     mIsFocused = false;
     if (mFocusAnimationsEnabled) {
         // Un-focus the header bar
-        mHeaderView.onTaskViewFocusChanged(false);
+        mHeaderView.onTaskViewFocusChanged(false, true);
     }
     // Update the thumbnail alpha with the focus
     mThumbnailView.onFocusChanged(false);
     // Call the callback
-    mCb.onTaskViewFocusChanged(this, false);
+    if (mCb != null) {
+        mCb.onTaskViewFocusChanged(this, false);
+    }
     invalidate();
 }

Find a functionally equivalent code:android.webkit.CookieManager.removeExpiredCookie:COMMENT
<android.webkit.CookieManager: void removeExpiredCookie()>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
Comment:/**
 * Removes all expired cookies.
 * @deprecated The WebView handles removing expired cookies automatically.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.server.power.PowerManagerService.needDisplaySuspendBlockerLocked:COMMENT
Method Modifier: private     
Comment:/**
 * Return true if we must keep a suspend blocker active on behalf of the display.
 * We do so if the screen is on or is in transition between states.
 */

@@ -8,13 +8,16 @@
             return true;
         }
     }
+    if (mScreenBrightnessBoostInProgress) {
+        return true;
+    }
     // Let the system suspend if the screen is off or dozing.
     return false;
 }

Find a functionally equivalent code:android.hardware.camera2.params.StreamConfigurationMap.getPublicFormatCount:COMMENT
Method Modifier: private     
Comment:/**
 * Count the number of publicly-visible output formats
 */

@@ -4,8 +4,11 @@
     if (formatsMap.containsKey(HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED)) {
         size -= 1;
     }
+    if (formatsMap.containsKey(HAL_PIXEL_FORMAT_RAW_OPAQUE)) {
+        size -= 1;
+    }
     return size;
 }

Find a functionally equivalent code:android.graphics.drawable.InsetDrawable.getDrawable:COMMENT
Method Modifier: public      
Comment:/**
 * Returns the drawable wrapped by this InsetDrawable. May be null.
 */

@@ -1,3 +1,3 @@
 {
-    return mInsetState.mDrawable;
+    return mState.mDrawable;
 }

Find a functionally equivalent code:android.webkit.WebSettings.setUseWebViewBackgroundForOverscrollBackground:COMMENT
<android.webkit.WebSettings: void setUseWebViewBackgroundForOverscrollBackground(boolean)>
Method Modifier: public      abstract    hidden      deprecated  
Method Modifier: Yes         No          Yes         Yes         
Method Updated:  Yes         Yes         Yes         Yes         
Comment:/**
 * Sets whether the WebView uses its background for over scroll background.
 * If true, it will use the WebView's background. If false, it will use an
 * internal pattern. Default is true.
 *
 * @deprecated This method is now obsolete.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.media.AudioService.setStreamMute:COMMENT
Method Modifier: public      
Comment:/**
 * @see AudioManager#setStreamMute(int, boolean)
 */

@@ -2,19 +2,23 @@
     if (mUseFixedVolume) {
         return;
     }
-    if (isStreamAffectedByMute(streamType)) {
-        if (mHdmiManager != null) {
-            synchronized (mHdmiManager) {
-                if (streamType == AudioSystem.STREAM_MUSIC && mHdmiTvClient != null) {
-                    synchronized (mHdmiTvClient) {
-                        if (mHdmiSystemAudioSupported) {
-                            mHdmiTvClient.setSystemAudioMute(state);
-                        }
-                    }
-                }
+    if (streamType == AudioManager.USE_DEFAULT_STREAM_TYPE) {
+        streamType = getActiveStreamType(streamType);
+    }
+    int streamAlias = mStreamVolumeAlias[streamType];
+    if (isStreamAffectedByMute(streamAlias)) {
+        if (streamAlias == AudioSystem.STREAM_MUSIC) {
+            setSystemAudioMute(state);
+        }
+        for (int stream = 0; stream < mStreamStates.length; stream++) {
+            if (streamAlias == mStreamVolumeAlias[stream]) {
+                mStreamStates[stream].mute(cb, state);
+                Intent intent = new Intent(AudioManager.STREAM_MUTE_CHANGED_ACTION);
+                intent.putExtra(AudioManager.EXTRA_VOLUME_STREAM_TYPE, stream);
+                intent.putExtra(AudioManager.EXTRA_STREAM_VOLUME_MUTED, state);
+                sendBroadcastToAll(intent);
             }
         }
-        mStreamStates[streamType].mute(cb, state);
     }
 }

Find a functionally equivalent code:com.android.layoutlib.bridge.impl.ResourceHelper.getDrawable:COMMENT
Method Modifier: public      static      
Comment:/**
 * Returns a drawable from the given value.
 * @param value The value that contains a path to a 9 patch, a bitmap or a xml based drawable,
 * or an hexadecimal color
 * @param context the current context
 */

@@ -1,74 +1,3 @@
 {
-    if (value == null) {
-        return null;
-    }
-    String stringValue = value.getValue();
-    if (RenderResources.REFERENCE_NULL.equals(stringValue)) {
-        return null;
-    }
-    String lowerCaseValue = stringValue.toLowerCase();
-    Density density = Density.MEDIUM;
-    if (value instanceof DensityBasedResourceValue) {
-        density = ((DensityBasedResourceValue) value).getResourceDensity();
-    }
-    if (lowerCaseValue.endsWith(NinePatch.EXTENSION_9PATCH)) {
-        File file = new File(stringValue);
-        if (file.isFile()) {
-            try {
-                return getNinePatchDrawable(new FileInputStream(file), density, value.isFramework(), stringValue, context);
-            } catch (IOException e) {
-                // failed to read the file, we'll return null below.
-                Bridge.getLog().error(LayoutLog.TAG_RESOURCES_READ, "Failed lot load " + file.getAbsolutePath(), e, null);
-            }
-        }
-        return null;
-    } else if (lowerCaseValue.endsWith(".xml")) {
-        // create a block parser for the file
-        File f = new File(stringValue);
-        if (f.isFile()) {
-            try {
-                // let the framework inflate the Drawable from the XML file.
-                XmlPullParser parser = ParserFactory.create(f);
-                BridgeXmlBlockParser blockParser = new BridgeXmlBlockParser(parser, context, value.isFramework());
-                try {
-                    return Drawable.createFromXml(context.getResources(), blockParser);
-                } finally {
-                    blockParser.ensurePopped();
-                }
-            } catch (Exception e) {
-                // this is an error and not warning since the file existence is checked before
-                // attempting to parse it.
-                Bridge.getLog().error(null, "Failed to parse file " + stringValue, e, null);
-            }
-        } else {
-            Bridge.getLog().error(LayoutLog.TAG_BROKEN, String.format("File %s does not exist (or is not a file)", stringValue), null);
-        }
-        return null;
-    } else {
-        File bmpFile = new File(stringValue);
-        if (bmpFile.isFile()) {
-            try {
-                Bitmap bitmap = Bridge.getCachedBitmap(stringValue, value.isFramework() ? null : context.getProjectKey());
-                if (bitmap == null) {
-                    bitmap = Bitmap_Delegate.createBitmap(bmpFile, false, /*isMutable*/
-                    density);
-                    Bridge.setCachedBitmap(stringValue, bitmap, value.isFramework() ? null : context.getProjectKey());
-                }
-                return new BitmapDrawable(context.getResources(), bitmap);
-            } catch (IOException e) {
-                // we'll return null below
-                Bridge.getLog().error(LayoutLog.TAG_RESOURCES_READ, "Failed lot load " + bmpFile.getAbsolutePath(), e, null);
-            }
-        } else {
-            // attempt to get a color from the value
-            try {
-                int color = getColor(stringValue);
-                return new ColorDrawable(color);
-            } catch (NumberFormatException e) {
-                // we'll return null below.
-                Bridge.getLog().error(LayoutLog.TAG_RESOURCES_FORMAT, "Failed to convert " + stringValue + " into a drawable", e, null);
-            }
-        }
-    }
-    return null;
+    return getDrawable(value, context, null);
 }

Find a functionally equivalent code:android.graphics.drawable.ClipDrawable.setLayoutDirection:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * @hide
 */

@@ -1,4 +1,4 @@
 {
-    mClipState.mDrawable.setLayoutDirection(layoutDirection);
+    mState.mDrawable.setLayoutDirection(layoutDirection);
     super.setLayoutDirection(layoutDirection);
 }

Find a functionally equivalent code:android.webkit.WebSettings.setDefaultFixedFontSize:COMMENT
<android.webkit.WebSettings: void setDefaultFixedFontSize(int)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets the default fixed font size. The default is 16.
 *
 * @param size a non-negative integer between 1 and 72. Any number outside
 * the specified range will be pinned.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebSettings.enableSmoothTransition:COMMENT
<android.webkit.WebSettings: boolean enableSmoothTransition()>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
Comment:/**
 * Gets whether the WebView enables smooth transition while panning or
 * zooming.
 *
 * @see #setEnableSmoothTransition
 *
 * @deprecated This method is now obsolete, and will become a no-op in future.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.server.display.LogicalDisplay.getDisplayInfoLocked:COMMENT
Method Modifier: public      
Comment:/**
 * Gets information about the logical display.
 *
 * @return The device info, which should be treated as immutable by the caller.
 * The logical display should allocate a new display info object whenever
 * the data changes.
 */

@@ -5,10 +5,11 @@
             mInfo.copyFrom(mOverrideDisplayInfo);
             mInfo.layerStack = mBaseDisplayInfo.layerStack;
             mInfo.name = mBaseDisplayInfo.name;
+            mInfo.uniqueId = mBaseDisplayInfo.uniqueId;
             mInfo.state = mBaseDisplayInfo.state;
         } else {
             mInfo.copyFrom(mBaseDisplayInfo);

Find a functionally equivalent code:android.media.AudioTrack.setPlaybackHeadPosition:COMMENT
Method Modifier: public      
Comment:/**
 * Sets the playback head position.
 * The track must be stopped or paused for the position to be changed,
 * and must use the {@link #MODE_STATIC} mode.
 * @param positionInFrames playback head position expressed in frames
 * Zero corresponds to start of buffer.
 * The position must not be greater than the buffer size in frames, or negative.
 * @return error code or success, see {@link #SUCCESS}, {@link #ERROR_BAD_VALUE},
 * {@link #ERROR_INVALID_OPERATION}
 */

@@ -1,5 +1,5 @@
 {
-    if (mDataLoadMode == MODE_STREAM || mState != STATE_INITIALIZED || getPlayState() == PLAYSTATE_PLAYING) {
+    if (mDataLoadMode == MODE_STREAM || mState == STATE_UNINITIALIZED || getPlayState() == PLAYSTATE_PLAYING) {
         return ERROR_INVALID_OPERATION;
     }
     if (!(0 <= positionInFrames && positionInFrames <= mNativeBufferSizeInFrames)) {

Find a functionally equivalent code:android.net.NetworkTemplate.matchesMobile:COMMENT
Method Modifier: private     
Comment:/**
 * Check if mobile network with matching IMSI.
 */

@@ -3,8 +3,9 @@
         // TODO: consider matching against WiMAX subscriber identity
         return true;
     } else {
-        return ((sForceAllNetworkTypes || contains(DATA_USAGE_NETWORK_TYPES, ident.mType)) && Objects.equals(mSubscriberId, ident.mSubscriberId));
+        final boolean matchesType = (sForceAllNetworkTypes || contains(DATA_USAGE_NETWORK_TYPES, ident.mType));
+        return matchesType && ArrayUtils.contains(mMatchSubscriberIds, ident.mSubscriberId);
     }
 }

Find a functionally equivalent code:android.widget.AbsListView.shouldShowSelector:COMMENT
Method Modifier: 
Comment:/**
 * Indicates whether this view is in a state where the selector should be drawn. This will
 * happen if we have focus but are not in touch mode, or we are in the middle of displaying
 * the pressed state for an item.
 *
 * @return True if the selector should be shown
 */

@@ -1,3 +1,3 @@
 {
-    return (!isInTouchMode()) || (touchModeDrawsInPressedState() && isPressed());
+    return (isFocused() && !isInTouchMode()) || (touchModeDrawsInPressedState() && isPressed());
 }

Find a functionally equivalent code:android.view.ViewGroup.removeAllViewsInLayout:COMMENT
Method Modifier: public      
Comment:/**
 * Called by a ViewGroup subclass to remove child views from itself,
 * when it must first know its size on screen before it can calculate how many
 * child views it will render. An example is a Gallery or a ListView, which
 * may "have" 50 children, but actually only render the number of children
 * that can currently fit inside the object on screen. Do not call
 * this method unless you are extending ViewGroup and understand the
 * view measuring and layout pipeline.
 *
 * <p><strong>Note:</strong> do not invoke this method from
 * {@link #draw(android.graphics.Canvas)}, {@link #onDraw(android.graphics.Canvas)},
 * {@link #dispatchDraw(android.graphics.Canvas)} or any related method.</p>
 */

@@ -18,26 +18,24 @@
             view.unFocus(null);
             clearChildFocus = true;
         }
-        if (view.isAccessibilityFocused()) {
-            view.clearAccessibilityFocus();
-        }
+        view.clearAccessibilityFocus();
         cancelTouchTarget(view);
         cancelHoverTarget(view);
         if (view.getAnimation() != null || (mTransitioningViews != null && mTransitioningViews.contains(view))) {

Find a functionally equivalent code:android.app.Activity.onKeyDown:COMMENT
Method Modifier: public      
Comment:/**
 * Called when a key was pressed down and not handled by any of the views
 * inside of the activity. So, for example, key presses while the cursor
 * is inside a TextView will not trigger the event (unless it is a navigation
 * to another object) because TextView handles its own key presses.
 *
 * <p>If the focused view didn't want this event, this method is called.
 *
 * <p>The default implementation takes care of {@link KeyEvent#KEYCODE_BACK}
 * by calling {@link #onBackPressed()}, though the behavior varies based
 * on the application compatibility mode: for
 * {@link android.os.Build.VERSION_CODES#ECLAIR} or later applications,
 * it will set up the dispatch to call {@link #onKeyUp} where the action
 * will be performed; for earlier applications, it will perform the
 * action immediately in on-down, as those versions of the platform
 * behaved.
 *
 * <p>Other additional default key handling may be performed
 * if configured with {@link #setDefaultKeyMode}.
 *
 * @return Return <code>true</code> to prevent this event from being propagated
 * further, or <code>false</code> to indicate that you have not handled
 * this event and it should continue to be propagated.
 * @see #onKeyUp
 * @see android.view.KeyEvent
 */

@@ -10,16 +10,17 @@
     if (mDefaultKeyMode == DEFAULT_KEYS_DISABLE) {
         return false;
     } else if (mDefaultKeyMode == DEFAULT_KEYS_SHORTCUT) {
-        if (getWindow().performPanelShortcut(Window.FEATURE_OPTIONS_PANEL, keyCode, event, Menu.FLAG_ALWAYS_PERFORM_CLOSE)) {
+        Window w = getWindow();
+        if (w.hasFeature(Window.FEATURE_OPTIONS_PANEL) && w.performPanelShortcut(Window.FEATURE_OPTIONS_PANEL, keyCode, event, Menu.FLAG_ALWAYS_PERFORM_CLOSE)) {
             return true;
         }
         return false;

Find a functionally equivalent code:com.android.systemui.screenshot.ScreenshotTest.testScreenshot:COMMENT
Method Modifier: public      
Comment:/**
 * A simple test for screenshots that launches an Activity, injects the key event combo
 * to trigger the screenshot, and verifies the screenshot was taken successfully.
 */

@@ -1,4 +1,8 @@
 {
+    if (true) {
+        // Disable until this works again.
+        return;
+    }
     Log.d(LOG_TAG, "starting testScreenshot");
     // launch the activity.
     ScreenshotStubActivity activity = getActivity();

Find a functionally equivalent code:android.media.AudioRecord.audioParamCheck:COMMENT
Method Modifier: private     
Comment:// mSampleRate is valid

@@ -1,6 +1,6 @@
 {
     // audio source
-    if ((audioSource < MediaRecorder.AudioSource.DEFAULT) || ((audioSource > MediaRecorder.getAudioSourceMax()) && (audioSource != MediaRecorder.AudioSource.HOTWORD))) {
+    if ((audioSource < MediaRecorder.AudioSource.DEFAULT) || ((audioSource > MediaRecorder.getAudioSourceMax()) && (audioSource != MediaRecorder.AudioSource.FM_TUNER) && (audioSource != MediaRecorder.AudioSource.HOTWORD))) {
         throw new IllegalArgumentException("Invalid audio source.");
     }
     mRecordSource = audioSource;

Find a functionally equivalent code:android.graphics.drawable.ScaleDrawable.getDrawable:COMMENT
Method Modifier: public      
Comment:/**
 * Returns the drawable scaled by this ScaleDrawable.
 */

@@ -1,3 +1,3 @@
 {
-    return mScaleState.mDrawable;
+    return mState.mDrawable;
 }

Find a functionally equivalent code:android.webkit.WebBackForwardList.getItemAtIndex:COMMENT
<android.webkit.WebBackForwardList: WebHistoryItem getItemAtIndex(int)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Get the history item at the given index. The index range is from 0...n
 * where 0 is the first item and n is the last item.
 * @param index The index to retrieve.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.app.BackStackRecord.addTransitionTargets:COMMENT
Method Modifier: private     
Comment:/**
 * Prepares the enter transition by adding a non-existent view to the transition's target list
 * and setting it epicenter callback. By adding a non-existent view to the target list,
 * we can prevent any view from being targeted at the beginning of the transition.
 * We will add to the views before the end state of the transition is captured so that the
 * views will appear. At the start of the transition, we clear the list of targets so that
 * we can restore the state of the transition and use it again.
 *
 * <p>The shared element transition maps its shared elements immediately prior to
 * capturing the final state of the Transition.</p>
 */

@@ -15,25 +15,22 @@
                 namedViews = mapSharedElementsIn(state, isBack, inFragment);
                 removeTargets(sharedElementTransition, sharedElementTargets);
                 sharedElementTargets.clear();
-                if (namedViews.isEmpty()) {
-                    sharedElementTargets.add(state.nonExistentView);
-                } else {
-                    sharedElementTargets.addAll(namedViews.values());
-                }
+                sharedElementTargets.add(state.nonExistentView);
+                sharedElementTargets.addAll(namedViews.values());
                 addTargets(sharedElementTransition, sharedElementTargets);
                 setEpicenterIn(namedViews, state);
                 callSharedElementEnd(state, inFragment, outFragment, isBack, namedViews);
@@ -31,36 +28,36 @@
                     if (namedViews != null) {
                         enteringViews.removeAll(namedViews.values());
                     }
+                    enteringViews.add(state.nonExistentView);
+                    // We added this earlier to prevent any views being targeted.
+                    enterTransition.removeTarget(state.nonExistentView);
                     addTargets(enterTransition, enteringViews);
                 }
                 setSharedElementEpicenter(enterTransition, state);

Find a functionally equivalent code:android.webkit.WebSettings.supportZoom:COMMENT
<android.webkit.WebSettings: boolean supportZoom()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets whether the WebView supports zoom.
 *
 * @return true if the WebView supports zoom
 * @see #setSupportZoom
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.internal.widget.LockPatternUtils.isLockPatternEnabled:COMMENT
Method Modifier: public      internal    
Comment:/**
 * @return Whether the lock pattern is enabled, or if it is set as a backup for biometric weak
 */

@@ -1,4 +1,3 @@
 {
-    final boolean backupEnabled = getLong(PASSWORD_TYPE_ALTERNATE_KEY, DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED) == DevicePolicyManager.PASSWORD_QUALITY_SOMETHING;
-    return getBoolean(Settings.Secure.LOCK_PATTERN_ENABLED, false) && (getLong(PASSWORD_TYPE_KEY, DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED) == DevicePolicyManager.PASSWORD_QUALITY_SOMETHING || (usingBiometricWeak() && backupEnabled));
+    return isLockPatternEnabled(getCurrentOrCallingUserId());
 }

Find a functionally equivalent code:com.android.layoutlib.bridge.intensive.Main.testRendering:COMMENT
Method Modifier: public      
Comment:/**
 * Create a new rendering session and test that rendering /layout/activity.xml on nexus 5
 * doesn't throw any exceptions.
 */

@@ -16,19 +16,25 @@
     if (!renderResult.isSuccess()) {
         getLogger().error(session.getResult().getException(), session.getResult().getErrorMessage());
     }
+    try {
+        String goldenImagePath = APP_TEST_DIR + "/golden/activity.png";
+        ImageUtils.requireSimilar(goldenImagePath, session.getImage());
+    } catch (IOException e) {
+        getLogger().error(e, e.getMessage());
+    }
 }

Find a functionally equivalent code:android.media.AudioManager.forceVolumeControlStream:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * forces the stream controlled by hard volume keys
 * specifying streamType == -1 releases control to the
 * logic.
 *
 * @hide
 */

@@ -1,4 +1,7 @@
 {
+    if (mUseMasterVolume) {
+        return;
+    }
     IAudioService service = getService();
     try {
         service.forceVolumeControlStream(streamType, mICallBack);

Find a functionally equivalent code:android.telephony.ServiceState.setFromNotifierBundle:COMMENT
Method Modifier: private     hidden      
Comment:/**
 * Set ServiceState based on intent notifier map.
 *
 * @param m intent notifier map
 * @hide
 */

@@ -1,10 +1,14 @@
 {
     mVoiceRegState = m.getInt("voiceRegState");
     mDataRegState = m.getInt("dataRegState");
-    mRoaming = m.getBoolean("roaming");
-    mOperatorAlphaLong = m.getString("operator-alpha-long");
-    mOperatorAlphaShort = m.getString("operator-alpha-short");
-    mOperatorNumeric = m.getString("operator-numeric");
+    mVoiceRoamingType = m.getInt("voiceRoamingType");
+    mDataRoamingType = m.getInt("dataRoamingType");
+    mVoiceOperatorAlphaLong = m.getString("operator-alpha-long");
+    mVoiceOperatorAlphaShort = m.getString("operator-alpha-short");
+    mVoiceOperatorNumeric = m.getString("operator-numeric");
+    mDataOperatorAlphaLong = m.getString("data-operator-alpha-long");
+    mDataOperatorAlphaShort = m.getString("data-operator-alpha-short");
+    mDataOperatorNumeric = m.getString("data-operator-numeric");
     mIsManualNetworkSelection = m.getBoolean("manual");
     mRilVoiceRadioTechnology = m.getInt("radioTechnology");
     mRilDataRadioTechnology = m.getInt("dataRadioTechnology");

Find a functionally equivalent code:android.webkit.WebHistoryItem.getId:COMMENT
<android.webkit.WebHistoryItem: int getId()>
Method Modifier: public      abstract    hidden      deprecated  
Method Modifier: Yes         No          Yes         Yes         
Method Updated:  Yes         Yes         Yes         Yes         
Comment:/**
 * Return an identifier for this history item. If an item is a copy of
 * another item, the identifiers will be the same even if they are not the
 * same object.
 * @return The id for this item.
 * @deprecated This method is now obsolete.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.media.AudioService.adjustMasterVolume:COMMENT
Method Modifier: public      
Comment:/**
 * @see AudioManager#adjustMasterVolume(int, int)
 */

@@ -1,16 +1,3 @@
 {
-    if (mUseFixedVolume) {
-        return;
-    }
-    ensureValidSteps(steps);
-    int volume = Math.round(AudioSystem.getMasterVolume() * MAX_MASTER_VOLUME);
-    int delta = 0;
-    int numSteps = Math.abs(steps);
-    int direction = steps > 0 ? AudioManager.ADJUST_RAISE : AudioManager.ADJUST_LOWER;
-    for (int i = 0; i < numSteps; ++i) {
-        delta = findVolumeDelta(direction, volume);
-        volume += delta;
-    }
-    // Log.d(TAG, "adjustMasterVolume volume: " + volume + " steps: " + steps);
-    setMasterVolume(volume, flags, callingPackage);
+    adjustMasterVolume(steps, flags, callingPackage, Binder.getCallingUid());
 }

Find a functionally equivalent code:com.android.server.wm.WindowManagerService.performLayoutAndPlaceSurfacesLockedInner:COMMENT
Method Modifier: private     final       
Comment:// "Something has changed!  Let's make it correct now."

@@ -106,112 +106,112 @@
                     for (i = windows.size() - 1; i >= 0; i--) {
                         WindowState w = windows.get(i);
                         if (w.mHasSurface) {
-                            mPolicy.applyPostLayoutPolicyLw(w, w.mAttrs);
+                            mPolicy.applyPostLayoutPolicyLw(w, w.mAttrs, w.mAttachedWindow);
                         }
                     }
                     displayContent.pendingLayoutChanges |= mPolicy.finishPostLayoutPolicyLw();
@@ -163,169 +163,169 @@
                 // Slog.i(TAG, "Window " + this + " clearing mContentChanged - done placing");
                 w.mContentChanged = false;
                 // Moved from updateWindowsAndWallpaperLocked().
-                if (w.mHasSurface) {
+                if (w.mHasSurface && !w.isHiddenFromUserLocked()) {
                     // Take care of the window being ready to display.
                     final boolean committed = winAnimator.commitFinishDrawingLocked(currentTime);
                     if (isDefaultDisplay && committed) {
@@ -198,208 +198,208 @@
                             atoken.numInterestingWindows = atoken.numDrawnWindows = 0;
                             atoken.startingDisplayed = false;
                         }
-                        if ((w.isOnScreen() || winAnimator.mAttrType == TYPE_BASE_APPLICATION) && !w.mExiting && !w.mDestroying) {
+                        if ((w.isOnScreenIgnoringKeyguard() || winAnimator.mAttrType == TYPE_BASE_APPLICATION) && !w.mExiting && !w.mDestroying) {
                             if (DEBUG_VISIBILITY || DEBUG_ORIENTATION) {
                                 Slog.v(TAG, "Eval win " + w + ": isDrawn=" + w.isDrawnLw() + ", isAnimating=" + winAnimator.isAnimating());
                                 if (!w.isDrawnLw()) {
-                                    Slog.v(TAG, "Not displayed: s=" + winAnimator.mSurfaceControl + " pv=" + w.mPolicyVisibility + " mDrawState=" + winAnimator.mDrawState + " ah=" + w.mAttachedHidden + " th=" + atoken.hiddenRequested + " a=" + winAnimator.mAnimating);
+                                    Slog.v(TAG, "Not displayed: s=" + winAnimator.mSurfaceControl + " pv=" + w.mPolicyVisibility + " mDrawState=" + winAnimator.drawStateToString() + " ah=" + w.mAttachedHidden + " th=" + atoken.hiddenRequested + " a=" + winAnimator.mAnimating);
                                 }
                             }
                             if (w != atoken.startingWindow) {
@@ -351,357 +351,357 @@
         final AppTokenList exitingAppTokens = mStackIdToStack.valueAt(stackNdx).mExitingAppTokens;
         for (i = exitingAppTokens.size() - 1; i >= 0; i--) {
             AppWindowToken token = exitingAppTokens.get(i);
-            if (!token.hasVisible && !mClosingApps.contains(token) && !token.mDeferRemoval) {
+            if (!token.hasVisible && !mClosingApps.contains(token) && (!token.mDeferRemoval || token.allAppWindows.isEmpty())) {
                 // Make sure there is no animation running on this token,
                 // so any windows associated with it will be removed as
                 // soon as their animations are complete
@@ -361,366 +361,370 @@
                     Slog.v(TAG, "performLayout: App token exiting now removed" + token);
                 removeAppFromTaskLocked(token);
                 exitingAppTokens.remove(i);
+                final Task task = mTaskIdToTask.get(token.groupId);
+                if (task != null && task.mDeferRemoval && task.mAppTokens.isEmpty()) {
+                    removeTaskLocked(task);
+                }
             }
         }
     }
@@ -400,408 +404,414 @@
         mPowerManagerInternal.setUserActivityTimeoutOverrideFromWindowManager(mInnerFields.mUserActivityTimeout);
     }
     if (mTurnOnScreen) {
-        if (DEBUG_VISIBILITY)
-            Slog.v(TAG, "Turning screen on after layout!");
-        mPowerManager.wakeUp(SystemClock.uptimeMillis());
+        if (mAllowTheaterModeWakeFromLayout || Settings.Global.getInt(mContext.getContentResolver(), Settings.Global.THEATER_MODE_ON, 0) == 0) {
+            if (DEBUG_VISIBILITY)
+                Slog.v(TAG, "Turning screen on after layout!");
+            mPowerManager.wakeUp(SystemClock.uptimeMillis());
+        }
         mTurnOnScreen = false;
     }
     if (mInnerFields.mUpdateRotation) {

Find a functionally equivalent code:android.appwidget.AppWidgetHost.startAppWidgetConfigureActivityForResult:COMMENT
Method Modifier: public      final       
Comment:/**
 * Starts an app widget provider configure activity for result on behalf of the caller.
 * Use this method if the provider is in another profile as you are not allowed to start
 * an activity in another profile. You can optionally provide a request code that is
 * returned in {@link Activity#onActivityResult(int, int, android.content.Intent)} and
 * an options bundle to be passed to the started activity.
 * <p>
 * Note that the provided app widget has to be bound for this method to work.
 * </p>
 *
 * @param activity The activity from which to start the configure one.
 * @param appWidgetId The bound app widget whose provider's config activity to start.
 * @param requestCode Optional request code retuned with the result.
 * @param intentFlags Optional intent flags.
 *
 * @throws android.content.ActivityNotFoundException If the activity is not found.
 *
 * @see AppWidgetProviderInfo#getProfile()
 */

@@ -1,6 +1,6 @@
 {
     try {
-        IntentSender intentSender = sService.createAppWidgetConfigIntentSender(mContext.getOpPackageName(), appWidgetId, intentFlags);
+        IntentSender intentSender = sService.createAppWidgetConfigIntentSender(mContextOpPackageName, appWidgetId, intentFlags);
         if (intentSender != null) {
             activity.startIntentSenderForResult(intentSender, requestCode, null, 0, 0, 0, options);
         } else {

Find a functionally equivalent code:com.android.server.media.MediaSessionRecord.adjustVolume:COMMENT
Method Modifier: public      
Comment:/**
 * Send a volume adjustment to the session owner. Direction must be one of
 * {@link AudioManager#ADJUST_LOWER}, {@link AudioManager#ADJUST_RAISE},
 * {@link AudioManager#ADJUST_SAME}.
 *
 * @param direction The direction to adjust volume in.
 * @param flags Any of the flags from {@link AudioManager}.
 * @param packageName The package that made the original volume request.
 * @param uid The uid that made the original volume request.
 * @param useSuggested True to use adjustSuggestedStreamVolume instead of
 * adjustStreamVolume.
 */

@@ -3,30 +3,72 @@
     if (isPlaybackActive(false) || hasFlag(MediaSession.FLAG_EXCLUSIVE_GLOBAL_PRIORITY)) {
         flags &= ~AudioManager.FLAG_PLAY_SOUND;
     }
+    boolean isMute = direction == MediaSessionManager.DIRECTION_MUTE;
     if (direction > 1) {
         direction = 1;
     } else if (direction < -1) {
         direction = -1;
     }
     if (mVolumeType == PlaybackInfo.PLAYBACK_TYPE_LOCAL) {
+        if (mUseMasterVolume) {
+            // If this device only uses master volume and playback is local
+            // just adjust the master volume and return.
+            boolean isMasterMute = mAudioManager.isMasterMute();
+            if (isMute) {
+                mAudioManagerInternal.setMasterMuteForUid(!isMasterMute, flags, packageName, mService.mICallback, uid);
+            } else {
+                mAudioManagerInternal.adjustMasterVolumeForUid(direction, flags, packageName, uid);
+                if (isMasterMute) {
+                    mAudioManagerInternal.setMasterMuteForUid(false, flags, packageName, mService.mICallback, uid);
+                }
+            }
+            return;
+        }
         int stream = AudioAttributes.toLegacyStreamType(mAudioAttrs);
+        boolean isStreamMute = mAudioManager.isStreamMute(stream);
         if (useSuggested) {
             if (AudioSystem.isStreamActive(stream, 0)) {
-                mAudioManagerInternal.adjustSuggestedStreamVolumeForUid(stream, direction, flags, packageName, uid);
+                if (isMute) {
+                    mAudioManager.setStreamMute(stream, !isStreamMute);
+                } else {
+                    mAudioManagerInternal.adjustSuggestedStreamVolumeForUid(stream, direction, flags, packageName, uid);
+                    if (isStreamMute && direction != 0) {
+                        mAudioManager.setStreamMute(stream, false);
+                    }
+                }
             } else {
                 flags |= previousFlagPlaySound;
-                mAudioManagerInternal.adjustSuggestedStreamVolumeForUid(AudioManager.USE_DEFAULT_STREAM_TYPE, direction, flags, packageName, uid);
+                isStreamMute = mAudioManager.isStreamMute(AudioManager.USE_DEFAULT_STREAM_TYPE);
+                if (isMute) {
+                    mAudioManager.setStreamMute(AudioManager.USE_DEFAULT_STREAM_TYPE, !isStreamMute);
+                } else {
+                    mAudioManagerInternal.adjustSuggestedStreamVolumeForUid(AudioManager.USE_DEFAULT_STREAM_TYPE, direction, flags, packageName, uid);
+                    if (isStreamMute && direction != 0) {
+                        mAudioManager.setStreamMute(AudioManager.USE_DEFAULT_STREAM_TYPE, false);
+                    }
+                }
             }
         } else {
-            mAudioManagerInternal.adjustStreamVolumeForUid(stream, direction, flags, packageName, uid);
+            if (isMute) {
+                mAudioManager.setStreamMute(stream, !isStreamMute);
+            } else {
+                mAudioManagerInternal.adjustStreamVolumeForUid(stream, direction, flags, packageName, uid);
+                if (isStreamMute && direction != 0) {
+                    mAudioManager.setStreamMute(stream, false);
+                }
+            }
         }
     } else {
         if (mVolumeControlType == VolumeProvider.VOLUME_CONTROL_FIXED) {
             // Nothing to do, the volume cannot be changed
             return;
         }
+        if (isMute) {
+            Log.w(TAG, "Muting remote playback is not supported");
+            return;
+        }
         mSessionCb.adjustVolume(direction);
         int volumeBefore = (mOptimisticVolume < 0 ? mCurrentVolume : mOptimisticVolume);
         mOptimisticVolume = volumeBefore + direction;
@@ -34,39 +76,82 @@
         if (volumeBefore != mOptimisticVolume) {
             pushVolumeUpdate();
         }
+        mService.notifyRemoteVolumeChanged(flags, this);
         if (DEBUG) {
             Log.d(TAG, "Adjusted optimistic volume to " + mOptimisticVolume + " max is " + mMaxVolume);
         }

Find a functionally equivalent code:android.app.ActivityOptions.update:COMMENT
Method Modifier: public      
Comment:/**
 * Update the current values in this ActivityOptions from those supplied
 * in <var>otherOptions</var>.  Any values
 * defined in <var>otherOptions</var> replace those in the base options.
 */

@@ -22,27 +22,30 @@
             }
             mAnimationStartedListener = otherOptions.mAnimationStartedListener;
             break;
+        case ANIM_CUSTOM_IN_PLACE:
+            mCustomInPlaceResId = otherOptions.mCustomInPlaceResId;
+            break;
         case ANIM_SCALE_UP:
             mStartX = otherOptions.mStartX;
             mStartY = otherOptions.mStartY;

Find a functionally equivalent code:android.net.Network.openConnection:COMMENT
Method Modifier: public      
Comment:/**
 * Opens the specified {@link URL} on this {@code Network}, such that all traffic will be sent
 * on this Network. The URL protocol must be {@code HTTP} or {@code HTTPS}.
 *
 * @return a {@code URLConnection} to the resource referred to by this URL.
 * @throws MalformedURLException if the URL protocol is not HTTP or HTTPS.
 * @throws IOException if an error occurs while opening the connection.
 * @see java.net.URL#openConnection()
 */

@@ -1,15 +1,18 @@
 {
-    maybeInitHttpClient();
-    String protocol = url.getProtocol();
-    OkHttpClient client;
-    // TODO: Should the network's proxy be specified?
-    if (protocol.equals("http")) {
-        client = HttpHandler.createHttpOkHttpClient(null);
-    } else if (protocol.equals("https")) {
-        client = HttpsHandler.createHttpsOkHttpClient(null);
+    final ConnectivityManager cm = ConnectivityManager.getInstance();
+    // TODO: Should this be optimized to avoid fetching the global proxy for every request?
+    ProxyInfo proxyInfo = cm.getGlobalProxy();
+    if (proxyInfo == null) {
+        // TODO: Should this be optimized to avoid fetching LinkProperties for every request?
+        final LinkProperties lp = cm.getLinkProperties(this);
+        if (lp != null)
+            proxyInfo = lp.getHttpProxy();
+    }
+    java.net.Proxy proxy = null;
+    if (proxyInfo != null) {
+        proxy = proxyInfo.makeProxy();
     } else {
-        // passed another protocol.
-        throw new MalformedURLException("Invalid URL or unrecognized protocol " + protocol);
+        proxy = java.net.Proxy.NO_PROXY;
     }
-    return client.setSocketFactory(getSocketFactory()).setHostResolver(mHostResolver).setConnectionPool(mConnectionPool).open(url);
+    return openConnection(url, proxy);
 }

Find a functionally equivalent code:android.webkit.WebView.findAll:COMMENT
Method Modifier: public      deprecated  
Comment:/**
 * Finds all instances of find on the page and highlights them.
 * Notifies any registered {@link FindListener}.
 *
 * @param find the string to find
 * @return the number of occurances of the String "find" that were found
 * @deprecated {@link #findAllAsync} is preferred.
 * @see #setFindListener
 */

@@ -1,6 +1,6 @@
 {
     checkThread();
-    if (DebugFlags.TRACE_API)
+    if (TRACE)
         Log.d(LOGTAG, "findAll");
     StrictMode.noteSlowCall("findAll blocks UI: prefer findAllAsync");
     return mProvider.findAll(find);

Find a functionally equivalent code:android.graphics.drawable.Ripple.cancelHardwareAnimations:COMMENT
Method Modifier: private     
Comment:/**
 * Cancels any running hardware animations.
 */

@@ -2,12 +2,23 @@
     final ArrayList<RenderNodeAnimator> runningAnimations = mRunningAnimations;
     final int N = runningAnimations.size();
     for (int i = 0; i < N; i++) {
-        runningAnimations.get(i).cancel();
+        if (jumpToEnd) {
+            runningAnimations.get(i).end();
+        } else {
+            runningAnimations.get(i).cancel();
+        }
     }
     runningAnimations.clear();
-    if (cancelPending && !mPendingAnimations.isEmpty()) {
-        mPendingAnimations.clear();
+    if (mHasPendingHardwareExit) {
+        // If we had a pending hardware exit, jump to the end state.
+        mHasPendingHardwareExit = false;
+        if (jumpToEnd) {
+            mOpacity = 0;
+            mTweenX = 1;
+            mTweenY = 1;
+            mTweenRadius = 1;
+        }
     }
     mHardwareAnimating = false;
 }

Find a functionally equivalent code:com.android.systemui.statusbar.ExpandableNotificationRow.reset:COMMENT
Method Modifier: public      
Comment:/**
 * Resets this view so it can be re-used for an updated notification.
 */

@@ -11,18 +11,18 @@
     mShowingPublicInitialized = false;
     mIsSystemExpanded = false;
     mExpansionDisabled = false;
-    mPublicLayout.reset();
-    mPrivateLayout.reset();
+    mPublicLayout.reset(mIsHeadsUp);
+    mPrivateLayout.reset(mIsHeadsUp);
     resetHeight();
     logExpansionEvent(false, wasExpanded);
 }

Find a functionally equivalent code:android.webkit.WebHistoryItem.getFavicon:COMMENT
<android.webkit.WebHistoryItem: Bitmap getFavicon()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Return the favicon of this history item or null if no favicon was found.
 * @return A Bitmap containing the favicon for this history item or null.
 * Note: The VM ensures 32-bit atomic read/write operations so we don't have
 * to synchronize this method.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.CookieManager.setAcceptCookie:COMMENT
<android.webkit.CookieManager: void setAcceptCookie(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets whether the application's {@link WebView} instances should send and
 * accept cookies.
 * By default this is set to true and the WebView accepts cookies.
 * <p>
 * When this is true
 * {@link CookieManager#setAcceptThirdPartyCookies setAcceptThirdPartyCookies} and
 * {@link CookieManager#setAcceptFileSchemeCookies setAcceptFileSchemeCookies}
 * can be used to control the policy for those specific types of cookie.
 *
 * @param accept whether {@link WebView} instances should send and accept
 * cookies
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.widget.DayPickerView.performAccessibilityAction:COMMENT
Method Modifier: public      
Comment:/**
 * When scroll forward/backward events are received, announce the newly scrolled-to month.
 */

@@ -3,12 +3,12 @@
         return super.performAccessibilityAction(action, arguments);
     }
     // Figure out what month is showing.
-    int firstVisiblePosition = getFirstVisiblePosition();
-    int month = firstVisiblePosition % 12;
-    int year = firstVisiblePosition / 12 + mController.getMinYear();
-    Calendar day = Calendar.getInstance();
+    final int firstVisiblePosition = getFirstVisiblePosition();
+    final int month = firstVisiblePosition % 12;
+    final int year = firstVisiblePosition / 12 + mMinDate.get(Calendar.YEAR);
+    final Calendar day = Calendar.getInstance();
     day.set(year, month, 1);
     // Scroll either forward or backward one month.
     if (action == AccessibilityNodeInfo.ACTION_SCROLL_FORWARD) {
@@ -30,36 +30,36 @@
     }
     // Go to that month.
     announceForAccessibility(getMonthAndYearString(day));
-    goTo(day, true, false, true);
+    goTo(day.getTimeInMillis(), true, false, true);
     mPerformingScroll = true;
     return true;
 }

Find a functionally equivalent code:com.android.server.pm.Settings.transferPermissionsLPw:COMMENT
Method Modifier: 
Comment:// Transfer ownership of permissions from one package to another.

@@ -1,7 +1,7 @@
 {
     // Transfer ownership of permissions to the new package.
     for (int i = 0; i < 2; i++) {
-        HashMap<String, BasePermission> permissions = i == 0 ? mPermissionTrees : mPermissions;
+        ArrayMap<String, BasePermission> permissions = i == 0 ? mPermissionTrees : mPermissions;
         for (BasePermission bp : permissions.values()) {
             if (origPkg.equals(bp.sourcePackage)) {
                 if (PackageManagerService.DEBUG_UPGRADE)

Find a functionally equivalent code:android.animation.PropertyValuesHolder.setupStartValue:COMMENT
Method Modifier: 
Comment:/**
 * This function is called by ObjectAnimator when setting the start values for an animation.
 * The start values are set according to the current values in the target object. The
 * property whose value is extracted is whatever is specified by the propertyName of this
 * PropertyValuesHolder object.
 *
 * @param target The object which holds the start values that should be set.
 */

@@ -1,5 +1,5 @@
 {
-    ArrayList<Keyframe> keyframes = mKeyframes.getKeyframes();
+    List<Keyframe> keyframes = mKeyframes.getKeyframes();
     if (!keyframes.isEmpty()) {
         setupValue(target, keyframes.get(0));
     }

Find a functionally equivalent code:android.widget.ProgressBar.applyProgressBackgroundTint:COMMENT
Method Modifier: private     
Comment:/**
 * Should only be called if we've already verified that mProgressDrawable
 * and mProgressTintInfo are non-null.
 */

@@ -8,13 +8,17 @@
             if (mProgressTintInfo.mHasProgressBackgroundTintMode) {
                 target.setTintMode(mProgressTintInfo.mProgressBackgroundTintMode);
             }
+            // stateful before applying the tint, so let's try again.
+            if (target.isStateful()) {
+                target.setState(getDrawableState());
+            }
         }
     }
 }

Find a functionally equivalent code:com.android.server.connectivity.NetworkMonitor.isCaptivePortal:COMMENT
Method Modifier: private     
Comment:/**
 * Do a URL fetch on a known server to see if we get the data we expect.
 * Returns HTTP response code.
 */

@@ -5,15 +5,39 @@
     int httpResponseCode = 599;
     try {
         URL url = new URL("http", mServer, "/generate_204");
+        // On networks with a PAC instead of fetching a URL that should result in a 204
+        // reponse, we instead simply fetch the PAC script.  This is done for a few reasons:
+        // 1. At present our PAC code does not yet handle multiple PACs on multiple networks
+        // until something like https://android-review.googlesource.com/#/c/115180/ lands.
+        // Network.openConnection() will ignore network-specific PACs and instead fetch
+        // using NO_PROXY.  If a PAC is in place, the only fetch we know will succeed with
+        // NO_PROXY is the fetch of the PAC itself.
+        // 2. To proxy the generate_204 fetch through a PAC would require a number of things
+        // happen before the fetch can commence, namely:
+        // a) the PAC script be fetched
+        // b) a PAC script resolver service be fired up and resolve mServer
+        // Network validation could be delayed until these prerequisities are satisifed or
+        // could simply be left to race them.  Neither is an optimal solution.
+        // 3. PAC scripts are sometimes used to block or restrict Internet access and may in
+        // fact block fetching of the generate_204 URL which would lead to false negative
+        // results for network validation.
+        boolean fetchPac = false;
+        {
+            final ProxyInfo proxyInfo = mNetworkAgentInfo.linkProperties.getHttpProxy();
+            if (proxyInfo != null && !Uri.EMPTY.equals(proxyInfo.getPacFileUrl())) {
+                url = new URL(proxyInfo.getPacFileUrl().toString());
+                fetchPac = true;
+            }
+        }
         if (DBG) {
             log("Checking " + url.toString() + " on " + mNetworkAgentInfo.networkInfo.getExtraInfo());
         }
         urlConnection = (HttpURLConnection) mNetworkAgentInfo.network.openConnection(url);
-        urlConnection.setInstanceFollowRedirects(false);
+        urlConnection.setInstanceFollowRedirects(fetchPac);
         urlConnection.setConnectTimeout(SOCKET_TIMEOUT_MS);
         urlConnection.setReadTimeout(SOCKET_TIMEOUT_MS);
         urlConnection.setUseCaches(false);
@@ -28,35 +52,65 @@
                 log("Empty 200 response interpreted as 204 response.");
             httpResponseCode = 204;
         }
+        if (httpResponseCode == 200 && fetchPac) {
+            if (DBG)
+                log("PAC fetch 200 response interpreted as 204 response.");
+            httpResponseCode = 204;
+        }
         sendNetworkConditionsBroadcast(true, /* response received */
-        httpResponseCode == 204, requestTimestamp, responseTimestamp);
+        httpResponseCode != 204, /* isCaptivePortal */
+        requestTimestamp, responseTimestamp);
     } catch (IOException e) {
         if (DBG)
             log("Probably not a portal: exception " + e);

Find a functionally equivalent code:android.view.HardwareRenderer.pauseSurface:COMMENT
Method Modifier: default     abstract    
Comment:/**
 * Stops any rendering into the surface. Use this if it is unclear whether
 * or not the surface used by the HardwareRenderer will be changing. It
 * Suspends any rendering into the surface, but will not do any destruction
 */


Find a functionally equivalent code:com.android.systemui.recents.views.TaskViewHeader.startLaunchTaskDismissAnimation:COMMENT
Method Modifier: 
Comment:/**
 * Animates this task bar dismiss button when launching a task.
 */

@@ -1,6 +1,6 @@
 {
     if (mDismissButton.getVisibility() == View.VISIBLE) {
         mDismissButton.animate().cancel();
-        mDismissButton.animate().alpha(0f).setStartDelay(0).setInterpolator(mConfig.fastOutSlowInInterpolator).setDuration(mConfig.taskBarExitAnimDuration).withLayer().start();
+        mDismissButton.animate().alpha(0f).setStartDelay(0).setInterpolator(mConfig.fastOutSlowInInterpolator).setDuration(mConfig.taskViewExitToAppDuration).withLayer().start();
     }
 }

Find a functionally equivalent code:android.widget.SearchView.getInputType:COMMENT
Method Modifier: public      
Comment:/**
 * Returns the input type set on the query text field.
 * @return the input type
 *
 * @attr ref android.R.styleable#SearchView_inputType
 */

@@ -1,3 +1,3 @@
 {
-    return mQueryTextView.getInputType();
+    return mSearchSrcTextView.getInputType();
 }

Find a functionally equivalent code:android.media.AudioService.sendMasterVolumeUpdate:COMMENT
Method Modifier: private     
Comment:// UI update and Broadcast Intent

@@ -1,5 +1,5 @@
 {
-    mVolumeController.postMasterVolumeChanged(flags);
+    mVolumeController.postMasterVolumeChanged(updateFlagsForSystemAudio(flags));
     Intent intent = new Intent(AudioManager.MASTER_VOLUME_CHANGED_ACTION);
     intent.putExtra(AudioManager.EXTRA_PREV_MASTER_VOLUME_VALUE, oldVolume);
     intent.putExtra(AudioManager.EXTRA_MASTER_VOLUME_VALUE, newVolume);

Find a functionally equivalent code:com.android.internal.telephony.CallerInfo.markAsVoiceMail:COMMENT
Method Modifier: internal    
Comment:/* package */

@@ -1,16 +1,4 @@
 {
-    mIsVoiceMail = true;
-    try {
-        String voiceMailLabel = TelephonyManager.getDefault().getVoiceMailAlphaTag(subId);
-        phoneNumber = voiceMailLabel;
-    } catch (SecurityException se) {
-        // Should never happen: if this process does not have
-        // permission to retrieve VM tag, it should not have
-        // permission to retrieve VM number and would not call
-        // this method.
-        // Leave phoneNumber untouched.
-        Rlog.e(TAG, "Cannot access VoiceMail.", se);
-    }
-    // photoResource = android.R.drawable.badge_voicemail;
-    return this;
+    int subId = SubscriptionManager.getDefaultSubId();
+    return markAsVoiceMail(subId);
 }

Find a functionally equivalent code:com.android.internal.policy.impl.PhoneWindowManager.interceptMotionBeforeQueueingNonInteractive:COMMENT
Method Modifier: public      internal    
Comment:/**
 * {@inheritDoc}
 */

@@ -1,10 +1,15 @@
 {
     if ((policyFlags & FLAG_WAKE) != 0) {
-        mPowerManager.wakeUp(whenNanos / 1000000);
-        return 0;
+        if (wakeUp(whenNanos / 1000000, mAllowTheaterModeWakeFromMotion)) {
+            return 0;
+        }
     }
     if (shouldDispatchInputWhenNonInteractive()) {
         return ACTION_PASS_TO_USER;
     }
+    // wake up in this case.
+    if (isTheaterModeEnabled() && (policyFlags & FLAG_WAKE) != 0) {
+        wakeUp(whenNanos / 1000000, mAllowTheaterModeWakeFromMotionWhenNotDreaming);
+    }
     return 0;
 }

Find a functionally equivalent code:com.android.server.backup.PackageManagerBackupAgent.parseStateFile:COMMENT
Method Modifier: private     
Comment:// Util: parse out an existing state file into a usable structure

@@ -23,28 +23,29 @@
                 Slog.w(TAG, "Unsupported state file version " + stateVersion + ", redoing from start");
                 return;
             }
+            pkg = in.readUTF();
         } else {
             // This is an older version of the state file in which the lead element
             // is not a STATE_FILE_VERSION string.  If that's the case, we want to

Find a functionally equivalent code:android.webkit.WebHistoryItem.getUrl:COMMENT
<android.webkit.WebHistoryItem: String getUrl()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Return the url of this history item. The url is the base url of this
 * history item. See getTargetUrl() for the url that is the actual target of
 * this history item.
 * @return The base url of this history item.
 * Note: The VM ensures 32-bit atomic read/write operations so we don't have
 * to synchronize this method.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebView.saveState:COMMENT
Method Modifier: public      
Comment:/**
 * Saves the state of this WebView used in
 * {@link android.app.Activity#onSaveInstanceState}. Please note that this
 * method no longer stores the display data for this WebView. The previous
 * behavior could potentially leak files if {@link #restoreState} was never
 * called.
 *
 * @param outState the Bundle to store this WebView's state
 * @return the same copy of the back/forward list used to save the state. If
 * saveState fails, the returned list will be null.
 */

@@ -1,6 +1,6 @@
 {
     checkThread();
-    if (DebugFlags.TRACE_API)
+    if (TRACE)
         Log.d(LOGTAG, "saveState");
     return mProvider.saveState(outState);
 }

Find a functionally equivalent code:android.webkit.WebSettings.setJavaScriptEnabled:COMMENT
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Tells the WebView to enable JavaScript execution.
 * <b>The default is false.</b>
 *
 * @param flag true if the WebView should execute JavaScript
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.internal.policy.impl.PhoneWindowManager.windowTypeToLayerLw:COMMENT
Method Modifier: public      internal    
Comment:/**
 * {@inheritDoc}
 */

@@ -17,23 +17,22 @@
         case TYPE_VOICE_INTERACTION:
             // voice interaction layer is almost immediately above apps.
             return 5;
-        case TYPE_RECENTS_OVERLAY:
         case TYPE_SYSTEM_DIALOG:
             return 6;
         case TYPE_TOAST:
@@ -73,87 +72,89 @@
         case TYPE_DRAG:
             // which sits above all other focusable windows
             return 25;
-        case TYPE_SECURE_SYSTEM_OVERLAY:
+        case TYPE_ACCESSIBILITY_OVERLAY:
+            // overlay put by accessibility services to intercept user interaction
             return 26;
-        case TYPE_BOOT_PROGRESS:
+        case TYPE_SECURE_SYSTEM_OVERLAY:
             return 27;
+        case TYPE_BOOT_PROGRESS:
+            return 28;
         case TYPE_POINTER:
             // the (mouse) pointer layer
-            return 28;
-        case TYPE_HIDDEN_NAV_CONSUMER:
             return 29;
+        case TYPE_HIDDEN_NAV_CONSUMER:
+            return 30;
     }
     Log.e(TAG, "Unknown window type: " + type);
     return 2;

Find a functionally equivalent code:android.content.pm.PackageManagerTests.testReplaceMatchMoreCertsReplaceSomeCerts:COMMENT
Method Modifier: public      
Comment:/*
     * Test that an app signed with a certificate can be upgraded by app
     * signed with a superset of certificates. Then verify that the an app
     * signed with the original set of certs cannot upgrade the new one.
     */

@@ -1,5 +1,5 @@
 {
-    InstallParams ip = replaceCerts(APP1_CERT1, APP1_CERT1_CERT2, false, true, PackageManager.INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES);
+    InstallParams ip = replaceCerts(APP1_CERT1, APP1_CERT1_CERT2, false, true, PackageManager.INSTALL_FAILED_UPDATE_INCOMPATIBLE);
     try {
         int rFlags = PackageManager.INSTALL_REPLACE_EXISTING;
         installFromRawResource("install.apk", APP1_CERT1, rFlags, false, false, -1, PackageInfo.INSTALL_LOCATION_UNSPECIFIED);

Find a functionally equivalent code:android.media.AudioManager.handleKeyUp:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * @hide
 */

@@ -17,21 +17,24 @@
             }
             mVolumeKeyUpTime = SystemClock.uptimeMillis();
             break;
+        case KeyEvent.KEYCODE_VOLUME_MUTE:
+            MediaSessionLegacyHelper.getHelper(mContext).sendVolumeKeyEvent(event, false);
+            break;
     }
 }

Find a functionally equivalent code:android.webkit.WebSettings.getNavDump:COMMENT
<android.webkit.WebSettings: boolean getNavDump()>
Method Modifier: public      abstract    hidden      deprecated  
Method Modifier: Yes         No          Yes         Yes         
Method Updated:  Yes         Yes         Yes         Yes         
Comment:/**
 * Gets whether dumping the navigation cache is enabled.
 *
 * @return whether dumping the navigation cache is enabled
 * @see #setNavDump
 * @deprecated This method is now obsolete.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.app.SharedElementCallback.onCaptureSharedElementSnapshot:COMMENT
Method Modifier: public      
Comment:/**
 * Creates a snapshot of a shared element to be used by the remote Activity and reconstituted
 * with {@link #onCreateSnapshotView(android.content.Context, android.os.Parcelable)}. A
 * null return value will mean that the remote Activity will have a null snapshot View in
 * {@link #onSharedElementStart(java.util.List, java.util.List, java.util.List)} and
 * {@link #onSharedElementEnd(java.util.List, java.util.List, java.util.List)}.
 *
 * <p>This is not called for Fragment Transitions.</p>
 *
 * @param sharedElement The shared element View to create a snapshot for.
 * @param viewToGlobalMatrix A matrix containing a transform from the view to the screen
 * coordinates.
 * @param screenBounds The bounds of shared element in screen coordinate space. This is
 * the bounds of the view with the viewToGlobalMatrix applied.
 * @return A snapshot to send to the remote Activity to be reconstituted with
 * {@link #onCreateSnapshotView(android.content.Context, android.os.Parcelable)} and passed
 * into {@link #onSharedElementStart(java.util.List, java.util.List, java.util.List)} and
 * {@link #onSharedElementEnd(java.util.List, java.util.List, java.util.List)}.
 */

@@ -1,4 +1,24 @@
 {
+    if (sharedElement instanceof ImageView) {
+        ImageView imageView = ((ImageView) sharedElement);
+        Drawable d = imageView.getDrawable();
+        Drawable bg = imageView.getBackground();
+        if (d != null && (bg == null || bg.getAlpha() == 0)) {
+            Bitmap bitmap = TransitionUtils.createDrawableBitmap(d);
+            if (bitmap != null) {
+                Bundle bundle = new Bundle();
+                bundle.putParcelable(BUNDLE_SNAPSHOT_BITMAP, bitmap);
+                bundle.putString(BUNDLE_SNAPSHOT_IMAGE_SCALETYPE, imageView.getScaleType().toString());
+                if (imageView.getScaleType() == ScaleType.MATRIX) {
+                    Matrix matrix = imageView.getImageMatrix();
+                    float[] values = new float[9];
+                    matrix.getValues(values);
+                    bundle.putFloatArray(BUNDLE_SNAPSHOT_IMAGE_MATRIX, values);
+                }
+                return bundle;
+            }
+        }
+    }
     if (mTempMatrix == null) {
         mTempMatrix = new Matrix(viewToGlobalMatrix);
     } else {

Find a functionally equivalent code:com.android.internal.policy.impl.PhoneWindowManager.init:COMMENT
Method Modifier: public      internal    
Comment:/**
 * {@inheritDoc}
 */

@@ -27,32 +27,33 @@
     mDeskDockIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
     mPowerManager = (PowerManager) context.getSystemService(Context.POWER_SERVICE);
     mBroadcastWakeLock = mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "PhoneWindowManager.mBroadcastWakeLock");
+    mPowerKeyWakeLock = mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "PhoneWindowManager.mPowerKeyWakeLock");
     mEnableShiftMenuBugReports = "1".equals(SystemProperties.get("ro.debuggable"));
     mSupportAutoRotation = mContext.getResources().getBoolean(com.android.internal.R.bool.config_supportAutoRotation);
     mLidOpenRotation = readRotation(com.android.internal.R.integer.config_lidOpenRotation);
@@ -39,44 +40,57 @@
     mLidNavigationAccessibility = mContext.getResources().getInteger(com.android.internal.R.integer.config_lidNavigationAccessibility);
     mLidControlsSleep = mContext.getResources().getBoolean(com.android.internal.R.bool.config_lidControlsSleep);
     mTranslucentDecorEnabled = mContext.getResources().getBoolean(com.android.internal.R.bool.config_enableTranslucentDecor);
+    mAllowTheaterModeWakeFromKey = mContext.getResources().getBoolean(com.android.internal.R.bool.config_allowTheaterModeWakeFromKey);
+    mAllowTheaterModeWakeFromPowerKey = mAllowTheaterModeWakeFromKey || mContext.getResources().getBoolean(com.android.internal.R.bool.config_allowTheaterModeWakeFromPowerKey);
+    mAllowTheaterModeWakeFromMotion = mContext.getResources().getBoolean(com.android.internal.R.bool.config_allowTheaterModeWakeFromMotion);
+    mAllowTheaterModeWakeFromMotionWhenNotDreaming = mContext.getResources().getBoolean(com.android.internal.R.bool.config_allowTheaterModeWakeFromMotionWhenNotDreaming);
+    mAllowTheaterModeWakeFromCameraLens = mContext.getResources().getBoolean(com.android.internal.R.bool.config_allowTheaterModeWakeFromCameraLens);
+    mAllowTheaterModeWakeFromLidSwitch = mContext.getResources().getBoolean(com.android.internal.R.bool.config_allowTheaterModeWakeFromLidSwitch);
+    mAllowTheaterModeWakeFromWakeGesture = mContext.getResources().getBoolean(com.android.internal.R.bool.config_allowTheaterModeWakeFromGesture);
+    mGoToSleepOnButtonPressTheaterMode = mContext.getResources().getBoolean(com.android.internal.R.bool.config_goToSleepOnButtonPressTheaterMode);
+    mShortPressOnPowerBehavior = mContext.getResources().getInteger(com.android.internal.R.integer.config_shortPressOnPowerBehavior);
+    mLongPressOnPowerBehavior = mContext.getResources().getInteger(com.android.internal.R.integer.config_longPressOnPowerBehavior);
+    mDoublePressOnPowerBehavior = mContext.getResources().getInteger(com.android.internal.R.integer.config_doublePressOnPowerBehavior);
+    mTriplePressOnPowerBehavior = mContext.getResources().getInteger(com.android.internal.R.integer.config_triplePressOnPowerBehavior);
     readConfigurationDependentBehaviors();
     mAccessibilityManager = (AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);
     // register for dock events

Find a functionally equivalent code:android.webkit.WebSettings.setNeedInitialFocus:COMMENT
<android.webkit.WebSettings: void setNeedInitialFocus(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Tells the WebView whether it needs to set a node to have focus when
 * {@link WebView#requestFocus(int, android.graphics.Rect)} is called. The
 * default value is true.
 *
 * @param flag whether the WebView needs to set a node
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.media.AudioService.sendVolumeUpdate:COMMENT
Method Modifier: private     
Comment:// UI update and Broadcast Intent

@@ -2,14 +2,9 @@
     if (!isPlatformVoice() && (streamType == AudioSystem.STREAM_RING)) {
         streamType = AudioSystem.STREAM_NOTIFICATION;
     }
-    // only when TV receives volume notification from Audio Receiver.
-    if (mHdmiTvClient != null && streamType == AudioSystem.STREAM_MUSIC) {
-        synchronized (mHdmiTvClient) {
-            if (mHdmiSystemAudioSupported && ((flags & AudioManager.FLAG_HDMI_SYSTEM_AUDIO_VOLUME) == 0)) {
-                flags &= ~AudioManager.FLAG_SHOW_UI;
-            }
-        }
+    if (streamType == AudioSystem.STREAM_MUSIC) {
+        flags = updateFlagsForSystemAudio(flags);
     }
     mVolumeController.postVolumeChanged(streamType, flags);
     if ((flags & AudioManager.FLAG_FIXED_VOLUME) == 0) {

Find a functionally equivalent code:android.media.AudioTrack.setLoopPoints:COMMENT
Method Modifier: public      
Comment:/**
 * Sets the loop points and the loop count. The loop can be infinite.
 * Similarly to setPlaybackHeadPosition,
 * the track must be stopped or paused for the loop points to be changed,
 * and must use the {@link #MODE_STATIC} mode.
 * @param startInFrames loop start marker expressed in frames
 * Zero corresponds to start of buffer.
 * The start marker must not be greater than or equal to the buffer size in frames, or negative.
 * @param endInFrames loop end marker expressed in frames
 * The total buffer size in frames corresponds to end of buffer.
 * The end marker must not be greater than the buffer size in frames.
 * For looping, the end marker must not be less than or equal to the start marker,
 * but to disable looping
 * it is permitted for start marker, end marker, and loop count to all be 0.
 * @param loopCount the number of times the loop is looped.
 * A value of -1 means infinite looping, and 0 disables looping.
 * @return error code or success, see {@link #SUCCESS}, {@link #ERROR_BAD_VALUE},
 * {@link #ERROR_INVALID_OPERATION}
 */

@@ -1,5 +1,5 @@
 {
-    if (mDataLoadMode == MODE_STREAM || mState != STATE_INITIALIZED || getPlayState() == PLAYSTATE_PLAYING) {
+    if (mDataLoadMode == MODE_STREAM || mState == STATE_UNINITIALIZED || getPlayState() == PLAYSTATE_PLAYING) {
         return ERROR_INVALID_OPERATION;
     }
     if (loopCount == 0) {

Find a functionally equivalent code:com.android.internal.policy.impl.PhoneWindowManager.notifyLidSwitchChanged:COMMENT
Method Modifier: public      internal    
Comment:/**
 * {@inheritDoc}
 */

@@ -8,14 +8,14 @@
     applyLidSwitchState();
     updateRotation(true);
     if (lidOpen) {
-        mPowerManager.wakeUp(SystemClock.uptimeMillis());
+        wakeUp(SystemClock.uptimeMillis(), mAllowTheaterModeWakeFromLidSwitch);
     } else if (!mLidControlsSleep) {
         mPowerManager.userActivity(SystemClock.uptimeMillis(), false);
     }

Find a functionally equivalent code:android.webkit.WebViewDatabase.hasFormData:COMMENT
<android.webkit.WebViewDatabase: boolean hasFormData()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets whether there is any saved data for web forms.
 *
 * @return whether there is any saved data for web forms
 * @see #clearFormData
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.systemui.recents.model.RecentsTaskLoader.onTrimMemory:COMMENT
Method Modifier: public      
Comment:/**
 * Handles signals from the system, trimming memory when requested to prevent us from running
 * out of memory.
 */

@@ -1,22 +1,29 @@
 {
+    RecentsConfiguration config = RecentsConfiguration.getInstance();
     switch(level) {
         case ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN:
             // Stop the loader immediately when the UI is no longer visible
             stopLoader();
-            mThumbnailCache.trimToSize(Math.max(Constants.Values.RecentsTaskLoader.PreloadFirstTasksCount, mMaxThumbnailCacheSize / 2));
-            mApplicationIconCache.trimToSize(Math.max(Constants.Values.RecentsTaskLoader.PreloadFirstTasksCount, mMaxIconCacheSize / 2));
+            if (config.svelteLevel == RecentsConfiguration.SVELTE_NONE) {
+                mThumbnailCache.trimToSize(Math.max(mNumVisibleTasksLoaded, mMaxThumbnailCacheSize / 2));
+            } else if (config.svelteLevel == RecentsConfiguration.SVELTE_LIMIT_CACHE) {
+                mThumbnailCache.trimToSize(mNumVisibleThumbnailsLoaded);
+            } else if (config.svelteLevel >= RecentsConfiguration.SVELTE_DISABLE_CACHE) {
+                mThumbnailCache.evictAll();
+            }
+            mApplicationIconCache.trimToSize(Math.max(mNumVisibleTasksLoaded, mMaxIconCacheSize / 2));
             break;
         case ComponentCallbacks2.TRIM_MEMORY_RUNNING_MODERATE:
         case ComponentCallbacks2.TRIM_MEMORY_BACKGROUND:
             // We are leaving recents, so trim the data a bit
-            mThumbnailCache.trimToSize(mMaxThumbnailCacheSize / 2);
-            mApplicationIconCache.trimToSize(mMaxIconCacheSize / 2);
+            mThumbnailCache.trimToSize(Math.max(1, mMaxThumbnailCacheSize / 2));
+            mApplicationIconCache.trimToSize(Math.max(1, mMaxIconCacheSize / 2));
             break;
         case ComponentCallbacks2.TRIM_MEMORY_RUNNING_LOW:
         case ComponentCallbacks2.TRIM_MEMORY_MODERATE:
             // We are going to be low on memory
-            mThumbnailCache.trimToSize(mMaxThumbnailCacheSize / 4);
-            mApplicationIconCache.trimToSize(mMaxIconCacheSize / 4);
+            mThumbnailCache.trimToSize(Math.max(1, mMaxThumbnailCacheSize / 4));
+            mApplicationIconCache.trimToSize(Math.max(1, mMaxIconCacheSize / 4));
             break;
         case ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL:
         case ComponentCallbacks2.TRIM_MEMORY_COMPLETE:

Find a functionally equivalent code:android.webkit.WebSettings.setFantasyFontFamily:COMMENT
<android.webkit.WebSettings: void setFantasyFontFamily(String)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets the fantasy font family name. The default is "fantasy".
 *
 * @param font a font family name
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.internal.policy.impl.PhoneWindowManager.launchHomeFromHotKey:COMMENT
Method Modifier: internal    
Comment:/**
 * A home key -> launch home action was detected.  Take the appropriate action
 * given the situation with the keyguard.
 */

@@ -1,5 +1,5 @@
 {
-    if (mKeyguardDelegate != null && mKeyguardDelegate.isShowingAndNotOccluded()) {
+    if (isKeyguardShowingAndNotOccluded()) {
     // don't launch home if keyguard showing
     } else if (!mHideLockScreen && mKeyguardDelegate.isInputRestricted()) {
         // when in keyguard restricted mode, must first verify unlock

Find a functionally equivalent code:com.android.server.usb.UsbHostManager.endUsbDeviceAdded:COMMENT
Method Modifier: private     
Comment:/* Called from JNI in monitorUsbHostBus() to finish adding a new device */

@@ -1,5 +1,5 @@
 {
-    if (DEBUG_AUDIO) {
+    if (DEBUG) {
         Slog.d(TAG, "usb:UsbHostManager.endUsbDeviceAdded()");
     }
     if (mNewInterface != null) {
@@ -8,28 +8,20 @@
     if (mNewConfiguration != null) {
         mNewConfiguration.setInterfaces(mNewInterfaces.toArray(new UsbInterface[mNewInterfaces.size()]));
     }
-    // Is there an audio interface in there?
-    final int kUsbClassId_Audio = 0x01;
-    boolean isAudioDevice = false;
-    for (int ntrfaceIndex = 0; !isAudioDevice && ntrfaceIndex < mNewInterfaces.size(); ntrfaceIndex++) {
-        UsbInterface ntrface = mNewInterfaces.get(ntrfaceIndex);
-        if (ntrface.getInterfaceClass() == kUsbClassId_Audio) {
-            isAudioDevice = true;
-        }
-    }
     synchronized (mLock) {
         if (mNewDevice != null) {
             mNewDevice.setConfigurations(mNewConfigurations.toArray(new UsbConfiguration[mNewConfigurations.size()]));
             mDevices.put(mNewDevice.getDeviceName(), mNewDevice);
             Slog.d(TAG, "Added device " + mNewDevice);
             getCurrentSettings().deviceAttached(mNewDevice);
+            mUsbAudioManager.deviceAdded(mNewDevice);
         } else {
             Slog.e(TAG, "mNewDevice is null in endUsbDeviceAdded");
         }
@@ -31,68 +23,26 @@
         mNewInterfaces = null;
         mNewEndpoints = null;
     }
-    if (!isAudioDevice) {
-        // bail
-        return;
-    }
-    // TODO(pmclean) The "Parser" objects inspect files in "/proc/asound" which we presume is
-    // present, unlike the waitForAlsaFile() which waits on a file in /dev/snd. It is not
-    // clear why this works, or that it can be relied on going forward.  Needs further
-    // research.
-    AlsaCardsParser cardsParser = new AlsaCardsParser();
-    cardsParser.scan();
-    // cardsParser.Log();
-    // But we need to parse the device to determine its capabilities.
-    AlsaDevicesParser devicesParser = new AlsaDevicesParser();
-    devicesParser.scan();
-    // devicesParser.Log();
-    // The protocol for now will be to select the last-connected (highest-numbered)
-    // Alsa Card.
-    mConnectedUsbCard = cardsParser.getNumCardRecords() - 1;
-    mConnectedUsbDeviceNum = 0;
-    mConnectedHasPlayback = devicesParser.hasPlaybackDevices(mConnectedUsbCard);
-    mConnectedHasCapture = devicesParser.hasCaptureDevices(mConnectedUsbCard);
-    mConnectedHasMIDI = devicesParser.hasMIDIDevices(mConnectedUsbCard);
-    // Playback device file needed/present?
-    if (mConnectedHasPlayback && !waitForAlsaFile(mConnectedUsbCard, mConnectedUsbDeviceNum, false)) {
-        return;
-    }
-    // Capture device file needed/present?
-    if (mConnectedHasCapture && !waitForAlsaFile(mConnectedUsbCard, mConnectedUsbDeviceNum, true)) {
-        return;
-    }
-    if (DEBUG_AUDIO) {
-        Slog.d(TAG, "usb: hasPlayback:" + mConnectedHasPlayback + " hasCapture:" + mConnectedHasCapture);
-    }
-    sendDeviceNotification(mConnectedUsbCard, mConnectedUsbDeviceNum, true, mConnectedHasPlayback, mConnectedHasCapture, mConnectedHasMIDI);
 }

Find a functionally equivalent code:android.graphics.drawable.Drawable.createFromXmlInner:COMMENT
Method Modifier: public      static      
Comment:/**
 * Create a drawable from inside an XML document using an optional
 * {@link Theme}. Called on a parser positioned at a tag in an XML
 * document, tries to create a Drawable from that tag. Returns {@code null}
 * if the tag is not a valid drawable.
 */

@@ -1,51 +1,69 @@
 {
     final Drawable drawable;
     final String name = parser.getName();
-    if (name.equals("selector")) {
-        drawable = new StateListDrawable();
-    } else if (name.equals("animated-selector")) {
-        drawable = new AnimatedStateListDrawable();
-    } else if (name.equals("level-list")) {
-        drawable = new LevelListDrawable();
-    } else if (name.equals("layer-list")) {
-        drawable = new LayerDrawable();
-    } else if (name.equals("transition")) {
-        drawable = new TransitionDrawable();
-    } else if (name.equals("ripple")) {
-        drawable = new RippleDrawable();
-    } else if (name.equals("color")) {
-        drawable = new ColorDrawable();
-    } else if (name.equals("shape")) {
-        drawable = new GradientDrawable();
-    } else if (name.equals("vector")) {
-        drawable = new VectorDrawable();
-    } else if (name.equals("animated-vector")) {
-        drawable = new AnimatedVectorDrawable();
-    } else if (name.equals("scale")) {
-        drawable = new ScaleDrawable();
-    } else if (name.equals("clip")) {
-        drawable = new ClipDrawable();
-    } else if (name.equals("rotate")) {
-        drawable = new RotateDrawable();
-    } else if (name.equals("animated-rotate")) {
-        drawable = new AnimatedRotateDrawable();
-    } else if (name.equals("animation-list")) {
-        drawable = new AnimationDrawable();
-    } else if (name.equals("inset")) {
-        drawable = new InsetDrawable();
-    } else if (name.equals("bitmap")) {
-        // noinspection deprecation
-        drawable = new BitmapDrawable(r);
-        if (r != null) {
-            ((BitmapDrawable) drawable).setTargetDensity(r.getDisplayMetrics());
-        }
-    } else if (name.equals("nine-patch")) {
-        drawable = new NinePatchDrawable();
-        if (r != null) {
-            ((NinePatchDrawable) drawable).setTargetDensity(r.getDisplayMetrics());
-        }
-    } else {
-        throw new XmlPullParserException(parser.getPositionDescription() + ": invalid drawable tag " + name);
+    switch(name) {
+        case "selector":
+            drawable = new StateListDrawable();
+            break;
+        case "animated-selector":
+            drawable = new AnimatedStateListDrawable();
+            break;
+        case "level-list":
+            drawable = new LevelListDrawable();
+            break;
+        case "layer-list":
+            drawable = new LayerDrawable();
+            break;
+        case "transition":
+            drawable = new TransitionDrawable();
+            break;
+        case "ripple":
+            drawable = new RippleDrawable();
+            break;
+        case "color":
+            drawable = new ColorDrawable();
+            break;
+        case "shape":
+            drawable = new GradientDrawable();
+            break;
+        case "vector":
+            drawable = new VectorDrawable();
+            break;
+        case "animated-vector":
+            drawable = new AnimatedVectorDrawable();
+            break;
+        case "scale":
+            drawable = new ScaleDrawable();
+            break;
+        case "clip":
+            drawable = new ClipDrawable();
+            break;
+        case "rotate":
+            drawable = new RotateDrawable();
+            break;
+        case "animated-rotate":
+            drawable = new AnimatedRotateDrawable();
+            break;
+        case "animation-list":
+            drawable = new AnimationDrawable();
+            break;
+        case "inset":
+            drawable = new InsetDrawable();
+            break;
+        case "bitmap":
+            drawable = new BitmapDrawable(r);
+            if (r != null) {
+                ((BitmapDrawable) drawable).setTargetDensity(r.getDisplayMetrics());
+            }
+            break;
+        case "nine-patch":
+            drawable = new NinePatchDrawable();
+            if (r != null) {
+                ((NinePatchDrawable) drawable).setTargetDensity(r.getDisplayMetrics());
+            }
+            break;
+        default:
+            throw new XmlPullParserException(parser.getPositionDescription() + ": invalid drawable tag " + name);
     }
     drawable.inflate(r, parser, attrs, theme);
     return drawable;

Find a functionally equivalent code:android.webkit.CookieManager.removeSessionCookies:COMMENT
<android.webkit.CookieManager: void removeSessionCookies(ValueCallback<Boolean>)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Removes all session cookies, which are cookies without an expiration
 * date.
 * <p>
 * This method is asynchronous.
 * If a {@link ValueCallback} is provided,
 * {@link ValueCallback#onReceiveValue(T) onReceiveValue()} will be called on the current
 * thread's {@link android.os.Looper} once the operation is complete.
 * The value provided to the callback indicates whether any cookies were removed.
 * You can pass {@code null} as the callback if you don't need to know when the operation
 * completes or whether any cookie were removed, and in this case it is safe to call the
 * method from a thread without a Looper.
 * @param callback a callback which is executed when the session cookies have been removed
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.telephony.SubscriptionManager.getPhoneId:COMMENT
Method Modifier: public      static      hidden      
Comment:/**
 * @hide
 */

@@ -1,9 +1,9 @@
 {
-    if (!isValidSubId(subId)) {
+    if (!isValidSubscriptionId(subId)) {
         logd("[getPhoneId]- fail");
-        return INVALID_PHONE_ID;
+        return INVALID_PHONE_INDEX;
     }
-    int result = INVALID_PHONE_ID;
+    int result = INVALID_PHONE_INDEX;
     try {
         ISub iSub = ISub.Stub.asInterface(ServiceManager.getService("isub"));
         if (iSub != null) {

Find a functionally equivalent code:android.widget.DayPickerView.onInitializeAccessibilityNodeInfo:COMMENT
Method Modifier: public      
Comment:/**
 * Necessary for accessibility, to ensure we support "scrolling" forward and backward
 * in the month list.
 */

@@ -1,5 +1,5 @@
 {
     super.onInitializeAccessibilityNodeInfo(info);
-    info.addAction(AccessibilityNodeInfo.ACTION_SCROLL_FORWARD);
-    info.addAction(AccessibilityNodeInfo.ACTION_SCROLL_BACKWARD);
+    info.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_SCROLL_FORWARD);
+    info.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_SCROLL_BACKWARD);
 }

Find a functionally equivalent code:android.telephony.PhoneNumberUtils.cdmaCheckAndProcessPlusCodeForSms:COMMENT
Method Modifier: public      static      hidden      
Comment:/**
 * Process phone number for CDMA, converting plus code using the home network number format.
 * This is used for outgoing SMS messages.
 *
 * @param dialStr the original dial string
 * @return the converted dial string
 * @hide for internal use
 */

@@ -1,7 +1,7 @@
 {
     if (!TextUtils.isEmpty(dialStr)) {
         if (isReallyDialable(dialStr.charAt(0)) && isNonSeparator(dialStr)) {
-            String defaultIso = SystemProperties.get(PROPERTY_ICC_OPERATOR_ISO_COUNTRY, "");
+            String defaultIso = TelephonyManager.getDefault().getSimCountryIso();
             if (!TextUtils.isEmpty(defaultIso)) {
                 int format = getFormatTypeFromCountryCode(defaultIso);
                 return cdmaCheckAndProcessPlusCodeByNumberFormat(dialStr, format, format);

Find a functionally equivalent code:android.webkit.WebSettings.getBlockNetworkLoads:COMMENT
<android.webkit.WebSettings: boolean getBlockNetworkLoads()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets whether the WebView does not load any resources from the network.
 *
 * @return true if the WebView does not load any resources from the network
 * @see #setBlockNetworkLoads
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.media.AudioManager.abandonAudioFocus:COMMENT
Method Modifier: public      
Comment:/**
 * Abandon audio focus. Causes the previous focus owner, if any, to receive focus.
 * @param l the listener with which focus was requested.
 * @return {@link #AUDIOFOCUS_REQUEST_FAILED} or {@link #AUDIOFOCUS_REQUEST_GRANTED}
 */

@@ -1,11 +1,3 @@
 {
-    int status = AUDIOFOCUS_REQUEST_FAILED;
-    unregisterAudioFocusListener(l);
-    IAudioService service = getService();
-    try {
-        status = service.abandonAudioFocus(mAudioFocusDispatcher, getIdForAudioFocusListener(l));
-    } catch (RemoteException e) {
-        Log.e(TAG, "Can't call abandonAudioFocus() on AudioService due to " + e);
-    }
-    return status;
+    return abandonAudioFocus(l, null);
 }

Find a functionally equivalent code:com.android.server.power.PowerManagerService.updateUserActivitySummaryLocked:COMMENT
Method Modifier: private     
Comment:/**
 * Updates the value of mUserActivitySummary to summarize the user requested
 * state of the system such as whether the screen should be bright or dim.
 * Note that user activity is ignored when the system is asleep.
 *
 * This function must have no other side-effects.
 */

@@ -52,58 +52,58 @@
             mUserActivitySummary = 0;
         }
         if (DEBUG_SPEW) {
-            Slog.d(TAG, "updateUserActivitySummaryLocked: mWakefulness=" + wakefulnessToString(mWakefulness) + ", mUserActivitySummary=0x" + Integer.toHexString(mUserActivitySummary) + ", nextTimeout=" + TimeUtils.formatUptime(nextTimeout));
+            Slog.d(TAG, "updateUserActivitySummaryLocked: mWakefulness=" + PowerManagerInternal.wakefulnessToString(mWakefulness) + ", mUserActivitySummary=0x" + Integer.toHexString(mUserActivitySummary) + ", nextTimeout=" + TimeUtils.formatUptime(nextTimeout));
         }
     }
 }

Find a functionally equivalent code:android.widget.SearchView.onSuggestionsKey:COMMENT
Method Modifier: private     
Comment:/**
 * React to the user typing while in the suggestions list. First, check for
 * action keys. If not handled, try refocusing regular characters into the
 * EditText.
 */

@@ -9,15 +9,15 @@
     if (event.getAction() == KeyEvent.ACTION_DOWN && event.hasNoModifiers()) {
         // "click")
         if (keyCode == KeyEvent.KEYCODE_ENTER || keyCode == KeyEvent.KEYCODE_SEARCH || keyCode == KeyEvent.KEYCODE_TAB) {
-            int position = mQueryTextView.getListSelection();
+            int position = mSearchSrcTextView.getListSelection();
             return onItemClicked(position, KeyEvent.KEYCODE_UNKNOWN, null);
         }
         // user to the edit view
@@ -18,32 +18,32 @@
             // left key, at end if right key
             // TODO: Reverse left/right for right-to-left languages, e.g.
             // Arabic
-            int selPoint = (keyCode == KeyEvent.KEYCODE_DPAD_LEFT) ? 0 : mQueryTextView.length();
-            mQueryTextView.setSelection(selPoint);
-            mQueryTextView.setListSelection(0);
-            mQueryTextView.clearListSelection();
-            mQueryTextView.ensureImeVisible(true);
+            int selPoint = (keyCode == KeyEvent.KEYCODE_DPAD_LEFT) ? 0 : mSearchSrcTextView.length();
+            mSearchSrcTextView.setSelection(selPoint);
+            mSearchSrcTextView.setListSelection(0);
+            mSearchSrcTextView.clearListSelection();
+            mSearchSrcTextView.ensureImeVisible(true);
             return true;
         }
         // Next, check for an "up and out" move
-        if (keyCode == KeyEvent.KEYCODE_DPAD_UP && 0 == mQueryTextView.getListSelection()) {
+        if (keyCode == KeyEvent.KEYCODE_DPAD_UP && 0 == mSearchSrcTextView.getListSelection()) {
             // let ACTV complete the move
             return false;
         }
@@ -34,40 +34,40 @@
         SearchableInfo.ActionKeyInfo actionKey = mSearchable.findActionKey(keyCode);
         if ((actionKey != null) && ((actionKey.getSuggestActionMsg() != null) || (actionKey.getSuggestActionMsgColumn() != null))) {
             // launch suggestion using action key column
-            int position = mQueryTextView.getListSelection();
+            int position = mSearchSrcTextView.getListSelection();
             if (position != ListView.INVALID_POSITION) {
                 Cursor c = mSuggestionsAdapter.getCursor();
                 if (c.moveToPosition(position)) {

Find a functionally equivalent code:android.animation.ValueAnimator.setCurrentPlayTime:COMMENT
Method Modifier: public      
Comment:/**
 * Sets the position of the animation to the specified point in time. This time should
 * be between 0 and the total duration of the animation, including any repetition. If
 * the animation has not yet been started, then it will not advance forward after it is
 * set to this time; it will simply set the time to this value and perform any appropriate
 * actions based on that time. If the animation is already running, then setCurrentPlayTime()
 * will set the current playing time to this value and continue playing from that point.
 *
 * @param playTime The time, in milliseconds, to which the animation is advanced or rewound.
 */

@@ -1,10 +1,4 @@
 {
-    initAnimation();
-    long currentTime = AnimationUtils.currentAnimationTimeMillis();
-    if (mPlayingState != RUNNING) {
-        mSeekTime = playTime;
-        mPlayingState = SEEKED;
-    }
-    mStartTime = currentTime - playTime;
-    doAnimationFrame(currentTime);
+    float fraction = mUnscaledDuration > 0 ? (float) playTime / mUnscaledDuration : 1;
+    setCurrentFraction(fraction);
 }

Find a functionally equivalent code:com.android.systemui.statusbar.DragDownHelper.DragDownCallback.onDraggedDown:COMMENT
Method Modifier: 
Comment:/**
 * @return true if the interaction is accepted, false if it should be cancelled
 */


Find a functionally equivalent code:android.content.res.Resources.getDrawableForDensity:COMMENT
Method Modifier: public      
Comment:/**
 * Return a drawable object associated with a particular resource ID for the
 * given screen density in DPI and styled for the specified theme.
 *
 * @param id The desired resource identifier, as generated by the aapt tool.
 * This integer encodes the package, type, and resource entry.
 * The value 0 is an invalid identifier.
 * @param density The desired screen density indicated by the resource as
 * found in {@link DisplayMetrics}.
 * @param theme The theme used to style the drawable attributes, may be {@code null}.
 * @return Drawable An object that can be used to draw this resource.
 * @throws NotFoundException Throws NotFoundException if the given ID does
 * not exist.
 */


Find a functionally equivalent code:com.android.systemui.recents.AlternateRecentsComponent.reloadHeaderBarLayout:COMMENT
Method Modifier: 
Comment:/**
 * Prepares the header bar layout.
 */

@@ -6,11 +6,15 @@
     mNavBarWidth = res.getDimensionPixelSize(com.android.internal.R.dimen.navigation_bar_width);
     mConfig = RecentsConfiguration.reinitialize(mContext, mSystemServicesProxy);
     mConfig.updateOnConfigurationChange();
+    if (reloadWidget) {
+        // Reload the widget id before we get the task stack bounds
+        reloadSearchBarAppWidget(mContext, mSystemServicesProxy);
+    }
     mConfig.getTaskStackBounds(mWindowRect.width(), mWindowRect.height(), mStatusBarHeight, (mConfig.hasTransposedNavBar ? mNavBarWidth : 0), mTaskStackBounds);
     if (mConfig.isLandscape && mConfig.hasTransposedNavBar) {
         mSystemInsets.set(0, mStatusBarHeight, mNavBarWidth, 0);

Find a functionally equivalent code:android.webkit.WebSettings.setSaveFormData:COMMENT
<android.webkit.WebSettings: void setSaveFormData(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets whether the WebView should save form data. The default is true.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebSettings.getAllowFileAccess:COMMENT
<android.webkit.WebSettings: boolean getAllowFileAccess()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets whether this WebView supports file access.
 *
 * @see #setAllowFileAccess
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.widget.AbsListView.trackMotionScroll:COMMENT
Method Modifier: 
Comment:/**
 * Track a motion scroll
 *
 * @param deltaY Amount to offset mMotionView. This is the accumulated delta since the motion
 * began. Positive numbers mean the user's finger is moving down the screen.
 * @param incrementalDeltaY Change in deltaY from the previous event.
 * @return true if we're already at the beginning/end of the list and have nothing to do.
 */

@@ -69,78 +69,77 @@
                 count++;
                 int position = firstPosition + i;
                 if (position >= headerViewsCount && position < footerViewsStart) {
+                    // The view will be rebound to new data, clear any
                     // system-managed transient state.
-                    if (child.isAccessibilityFocused()) {
-                        child.clearAccessibilityFocus();
-                    }
+                    child.clearAccessibilityFocus();
                     mRecycler.addScrapView(child, position);
                 }
             }
@@ -91,100 +90,98 @@
                 count++;
                 int position = firstPosition + i;
                 if (position >= headerViewsCount && position < footerViewsStart) {
+                    // The view will be rebound to new data, clear any
                     // system-managed transient state.
-                    if (child.isAccessibilityFocused()) {
-                        child.clearAccessibilityFocus();
-                    }
+                    child.clearAccessibilityFocus();
                     mRecycler.addScrapView(child, position);
                 }
             }

Find a functionally equivalent code:android.webkit.WebSettings.setRenderPriority:COMMENT
<android.webkit.WebSettings: void setRenderPriority(RenderPriority)>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
Comment:/**
 * Sets the priority of the Render thread. Unlike the other settings, this
 * one only needs to be called once per process. The default value is
 * {@link RenderPriority#NORMAL}.
 *
 * @param priority the priority
 * @deprecated It is not recommended to adjust thread priorities, and this will
 * not be supported in future versions.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebSettings.getAcceptThirdPartyCookies:COMMENT
<android.webkit.WebSettings: boolean getAcceptThirdPartyCookies()>
Method Modifier: public      abstract    hidden      
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
Comment:/**
 * Gets policy for third party cookies.
 * Developers should access this via {@link CookieManager#getShouldAcceptThirdPartyCookies}.
 * @hide Internal API
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.util.PathParser.createPathFromPathData:COMMENT
Method Modifier: public      static      
Comment:/**
 * @param pathData The string representing a path, the same as "d" string in svg file.
 * @return the generated Path object.
 */

@@ -2,8 +2,12 @@
     Path path = new Path();
     PathDataNode[] nodes = createNodesFromPathData(pathData);
     if (nodes != null) {
-        PathDataNode.nodesToPath(nodes, path);
+        try {
+            PathDataNode.nodesToPath(nodes, path);
+        } catch (RuntimeException e) {
+            throw new RuntimeException("Error in parsing " + pathData, e);
+        }
         return path;
     }
     return null;

Find a functionally equivalent code:android.widget.AbsListView.positionSelectorLikeFocus:COMMENT
Method Modifier: 
Comment:/**
 * Positions the selector in a way that mimics keyboard focus.
 */

@@ -1,17 +1,10 @@
 {
-    // If we're changing position, update the visibility since the selector
-    // is technically being detached from the previous selection.
-    final Drawable selector = mSelector;
-    final boolean manageState = selector != null && mSelectorPosition != position && position != INVALID_POSITION;
-    if (manageState) {
-        selector.setVisible(false, false);
-    }
-    positionSelector(position, sel);
-    if (manageState) {
+    if (mSelector != null && mSelectorPosition != position && position != INVALID_POSITION) {
         final Rect bounds = mSelectorRect;
         final float x = bounds.exactCenterX();
         final float y = bounds.exactCenterY();
-        selector.setVisible(getVisibility() == VISIBLE, false);
-        selector.setHotspot(x, y);
+        positionSelector(position, sel, true, x, y);
+    } else {
+        positionSelector(position, sel);
     }
 }

Find a functionally equivalent code:android.bluetooth.BluetoothGatt.writeDescriptor:COMMENT
Method Modifier: public      
Comment:/**
 * Write the value of a given descriptor to the associated remote device.
 *
 * <p>A {@link BluetoothGattCallback#onDescriptorWrite} callback is
 * triggered to report the result of the write operation.
 *
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
 *
 * @param descriptor Descriptor to write to the associated remote device
 * @return true, if the write operation was initiated successfully
 */

@@ -1,7 +1,7 @@
 {
     if (VDBG)
         Log.d(TAG, "writeDescriptor() - uuid: " + descriptor.getUuid());
-    if (mService == null || mClientIf == 0)
+    if (mService == null || mClientIf == 0 || descriptor.getValue() == null)
         return false;
     BluetoothGattCharacteristic characteristic = descriptor.getCharacteristic();
     if (characteristic == null)

Find a functionally equivalent code:android.media.projection.MediaProjection.registerCallback:COMMENT
Method Modifier: public      
Comment:/**
 * Register a listener to receive notifications about when the {@link
 * MediaProjection} changes state.
 *
 * @param callback The callback to call.
 * @param handler The handler on which the callback should be invoked, or
 * null if the callback should be invoked on the calling thread's looper.
 *
 * @see #unregisterCallback
 */

@@ -2,6 +2,9 @@
     if (callback == null) {
         throw new IllegalArgumentException("callback should not be null");
     }
+    if (handler == null) {
+        handler = new Handler();
+    }
     mCallbacks.put(callback, new CallbackRecord(callback, handler));
 }

Find a functionally equivalent code:android.webkit.CookieManager.setAcceptFileSchemeCookiesImpl:COMMENT
<android.webkit.CookieManager: void setAcceptFileSchemeCookiesImpl(boolean)>
Method Modifier: protected   abstract    hidden      
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
Comment:/**
 * Implements {@link #setAcceptFileSchemeCookies(boolean)}.
 *
 * @hide Only for use by WebViewProvider implementations
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.systemui.recents.views.TaskStackViewLayoutAlgorithm.getStackScrollForTask:COMMENT
Method Modifier: 
Comment:/**
 * Returns the scroll to such task top = 1f;
 */

@@ -1,3 +1,5 @@
 {
+    if (!mTaskProgressMap.containsKey(t.key))
+        return 0f;
     return mTaskProgressMap.get(t.key);
 }

Find a functionally equivalent code:android.webkit.WebIconDatabase.removeAllIcons:COMMENT
<android.webkit.WebIconDatabase: void removeAllIcons()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Removes all the icons in the database.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.widget.SearchView.updateSearchAutoComplete:COMMENT
Method Modifier: private     
Comment:/**
 * Updates the auto-complete text view.
 */

@@ -1,8 +1,8 @@
 {
     // no animation
-    mQueryTextView.setDropDownAnimationStyle(0);
-    mQueryTextView.setThreshold(mSearchable.getSuggestThreshold());
-    mQueryTextView.setImeOptions(mSearchable.getImeOptions());
+    mSearchSrcTextView.setDropDownAnimationStyle(0);
+    mSearchSrcTextView.setThreshold(mSearchable.getSuggestThreshold());
+    mSearchSrcTextView.setImeOptions(mSearchable.getImeOptions());
     int inputType = mSearchable.getInputType();
     // should be, in the case of search!)
     if ((inputType & InputType.TYPE_MASK_CLASS) == InputType.TYPE_CLASS_TEXT) {
@@ -20,33 +20,33 @@
             inputType |= InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;
         }
     }
-    mQueryTextView.setInputType(inputType);
+    mSearchSrcTextView.setInputType(inputType);
     if (mSuggestionsAdapter != null) {
         mSuggestionsAdapter.changeCursor(null);
     }
     // The existence of a suggestions authority is the proxy for "suggestions available here"
     if (mSearchable.getSuggestAuthority() != null) {
         mSuggestionsAdapter = new SuggestionsAdapter(getContext(), this, mSearchable, mOutsideDrawablesCache);
-        mQueryTextView.setAdapter(mSuggestionsAdapter);
+        mSearchSrcTextView.setAdapter(mSuggestionsAdapter);
         ((SuggestionsAdapter) mSuggestionsAdapter).setQueryRefinement(mQueryRefinement ? SuggestionsAdapter.REFINE_ALL : SuggestionsAdapter.REFINE_BY_ENTRY);
     }
 }

Find a functionally equivalent code:android.graphics.drawable.RippleDrawable.clearHotspots:COMMENT
Method Modifier: private     
Comment:/**
 * Cancels and removes the active ripple, all exiting ripples, and the
 * background. Nothing will be drawn after this method is called.
 */

@@ -1,16 +1,14 @@
 {
-    boolean needsDraw = false;
     if (mRipple != null) {
-        needsDraw |= mRipple.isHardwareAnimating();
         mRipple.cancel();
         mRipple = null;
+        mRippleActive = false;
     }
     if (mBackground != null) {
-        needsDraw |= mBackground.isHardwareAnimating();
         mBackground.cancel();
         mBackground = null;
+        mBackgroundActive = false;
     }
-    needsDraw |= cancelExitingRipples();
-    mNeedsDraw = needsDraw;
+    cancelExitingRipples();
     invalidateSelf();
 }

Find a functionally equivalent code:android.widget.SearchView.requestFocus:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * @hide
 */

@@ -7,13 +7,13 @@
         return false;
     // If it is not iconified, then give the focus to the text field
     if (!isIconified()) {
-        boolean result = mQueryTextView.requestFocus(direction, previouslyFocusedRect);
+        boolean result = mSearchSrcTextView.requestFocus(direction, previouslyFocusedRect);
         if (result) {
             updateViewsVisibility(false);
         }

Find a functionally equivalent code:android.content.pm.PackageManagerTests.testReplaceMatchNoCerts1:COMMENT
Method Modifier: public      
Comment:/*
     * Test that an app signed with two certificates cannot be upgraded
     * by an app signed with a different certificate.
     */

@@ -1,3 +1,3 @@
 {
-    replaceCerts(APP1_CERT1_CERT2, APP1_CERT3, true, true, PackageManager.INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES);
+    replaceCerts(APP1_CERT1_CERT2, APP1_CERT3, true, true, PackageManager.INSTALL_FAILED_UPDATE_INCOMPATIBLE);
 }

Find a functionally equivalent code:com.android.systemui.recents.views.TaskStackView.onMeasure:COMMENT
Method Modifier: protected   
Comment:/**
 * This is called with the full window width and height to allow stack view children to
 * perform the full screen transition down.
 */

@@ -15,30 +15,26 @@
     int childCount = getChildCount();
     for (int i = 0; i < childCount; i++) {
         TaskView tv = (TaskView) getChildAt(i);
-        if (tv.isFullScreenView()) {
-            tv.measure(widthMeasureSpec, heightMeasureSpec);
+        if (tv.getBackground() != null) {
+            tv.getBackground().getPadding(mTmpRect);
         } else {
-            if (tv.getBackground() != null) {
-                tv.getBackground().getPadding(mTmpRect);
-            } else {
-                mTmpRect.setEmpty();
-            }
-            tv.measure(MeasureSpec.makeMeasureSpec(mLayoutAlgorithm.mTaskRect.width() + mTmpRect.left + mTmpRect.right, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(mLayoutAlgorithm.mTaskRect.height() + mTmpRect.top + mTmpRect.bottom + tv.getMaxFooterHeight(), MeasureSpec.EXACTLY));
+            mTmpRect.setEmpty();
         }
+        tv.measure(MeasureSpec.makeMeasureSpec(mLayoutAlgorithm.mTaskRect.width() + mTmpRect.left + mTmpRect.right, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(mLayoutAlgorithm.mTaskRect.height() + mTmpRect.top + mTmpRect.bottom, MeasureSpec.EXACTLY));
     }
     setMeasuredDimension(width, height);
 }

Find a functionally equivalent code:com.android.server.TextServicesManagerService.getCurrentSpellChecker:COMMENT
Method Modifier: public      
Comment:// checker is saved.

@@ -3,16 +3,7 @@
     if (!calledFromValidUser()) {
         return null;
     }
-    synchronized (mSpellCheckerMap) {
-        final String curSpellCheckerId = mSettings.getSelectedSpellChecker();
-        if (DBG) {
-            Slog.w(TAG, "getCurrentSpellChecker: " + curSpellCheckerId);
-        }
-        if (TextUtils.isEmpty(curSpellCheckerId)) {
-            return null;
-        }
-        return mSpellCheckerMap.get(curSpellCheckerId);
-    }
+    return getCurrentSpellCheckerWithoutVerification();
 }

Find a functionally equivalent code:android.content.pm.PackageManagerTests.testReplaceMatchNoCerts2:COMMENT
Method Modifier: public      
Comment:/*
     * Test that an app signed with two certificates cannot be upgraded
     * by an app signed with a different certificate.
     */

@@ -1,3 +1,3 @@
 {
-    replaceCerts(APP1_CERT1_CERT2, APP1_CERT3_CERT4, true, true, PackageManager.INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES);
+    replaceCerts(APP1_CERT1_CERT2, APP1_CERT3_CERT4, true, true, PackageManager.INSTALL_FAILED_UPDATE_INCOMPATIBLE);
 }

Find a functionally equivalent code:android.webkit.WebView.showFindDialog:COMMENT
Method Modifier: public      deprecated  
Comment:/**
 * Starts an ActionMode for finding text in this WebView.  Only works if this
 * WebView is attached to the view system.
 *
 * @param text if non-null, will be the initial text to search for.
 * Otherwise, the last String searched for in this WebView will
 * be used to start.
 * @param showIme if true, show the IME, assuming the user will begin typing.
 * If false and text is non-null, perform a find all.
 * @return true if the find dialog is shown, false otherwise
 * @deprecated This method does not work reliably on all Android versions;
 * implementing a custom find dialog using WebView.findAllAsync()
 * provides a more robust solution.
 */

@@ -1,6 +1,6 @@
 {
     checkThread();
-    if (DebugFlags.TRACE_API)
+    if (TRACE)
         Log.d(LOGTAG, "showFindDialog");
     return mProvider.showFindDialog(text, showIme);
 }

Find a functionally equivalent code:android.webkit.WebSettings.setBlockNetworkImage:COMMENT
<android.webkit.WebSettings: void setBlockNetworkImage(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets whether the WebView should not load image resources from the
 * network (resources accessed via http and https URI schemes).  Note
 * that this method has no effect unless
 * {@link #getLoadsImagesAutomatically} returns true. Also note that
 * disabling all network loads using {@link #setBlockNetworkLoads}
 * will also prevent network images from loading, even if this flag is set
 * to false. When the value of this setting is changed from true to false,
 * network images resources referenced by content currently displayed by
 * the WebView are fetched automatically. The default is false.
 *
 * @param flag whether the WebView should not load image resources from the
 * network
 * @see #setBlockNetworkLoads
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebSettings.getSavePassword:COMMENT
<android.webkit.WebSettings: boolean getSavePassword()>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
Comment:/**
 * Gets whether the WebView saves passwords.
 *
 * @return whether the WebView saves passwords
 * @see #setSavePassword
 * @deprecated Saving passwords in WebView will not be supported in future versions.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebSettings.setStandardFontFamily:COMMENT
<android.webkit.WebSettings: void setStandardFontFamily(String)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets the standard font family name. The default is "sans-serif".
 *
 * @param font a font family name
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.telephony.PhoneNumberUtils.normalizeNumber:COMMENT
Method Modifier: public      static      
Comment:/**
 * Normalize a phone number by removing the characters other than digits. If
 * the given number has keypad letters, the letters will be converted to
 * digits first.
 *
 * @param phoneNumber the number to be normalized.
 * @return the normalized number.
 */

@@ -10,16 +10,16 @@
         int digit = Character.digit(c, 10);
         if (digit != -1) {
             sb.append(digit);
-        } else if (i == 0 && c == '+') {
+        } else if (sb.length() == 0 && c == '+') {
             sb.append(c);
         } else if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
             return normalizeNumber(PhoneNumberUtils.convertKeypadLettersToDigits(phoneNumber));

Find a functionally equivalent code:android.webkit.WebSettings.getUseDoubleTree:COMMENT
Method Modifier: public      hidden      deprecated  
Comment:/**
 * Controlled a rendering optimization that is no longer present. Setting
 * it now has no effect.
 *
 * @deprecated This setting now has no effect.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */


Find a functionally equivalent code:android.webkit.CookieManager.setAcceptThirdPartyCookies:COMMENT
<android.webkit.CookieManager: void setAcceptThirdPartyCookies(WebView,boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets whether the {@link WebView} should allow third party cookies to be set.
 * Allowing third party cookies is a per WebView policy and can be set
 * differently on different WebView instances.
 * <p>
 * Apps that target {@link android.os.Build.VERSION_CODES#KITKAT} or below
 * default to allowing third party cookies. Apps targeting
 * {@link android.os.Build.VERSION_CODES#LOLLIPOP} or later default to disallowing
 * third party cookies.
 *
 * @param webview the {@link WebView} instance to set the cookie policy on
 * @param accept whether the {@link WebView} instance should accept
 * third party cookies
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebSettings.setMediaPlaybackRequiresUserGesture:COMMENT
<android.webkit.WebSettings: void setMediaPlaybackRequiresUserGesture(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets whether the WebView requires a user gesture to play media.
 * The default is true.
 *
 * @param require whether the WebView requires a user gesture to play media
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.renderscript.Allocation.copyTo:COMMENT
Method Modifier: public      
Comment:/**
 * Copy from the Allocation into an array.  The array must be at
 * least as large as the Allocation.  The
 * {@link android.renderscript.Element} must match the component
 * type of the array passed in.
 *
 * @param array The array to be set from the Allocation.
 */


Find a functionally equivalent code:android.webkit.WebSettings.setDefaultZoom:COMMENT
<android.webkit.WebSettings: void setDefaultZoom(ZoomDensity)>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
Comment:/**
 * Sets the default zoom density of the page. This must be called from the UI
 * thread. The default is {@link ZoomDensity#MEDIUM}.
 *
 * This setting is not recommended for use in new applications.  If the WebView
 * is utilized to display mobile-oriented pages, the desired effect can be achieved by
 * adjusting 'width' and 'initial-scale' attributes of page's 'meta viewport'
 * tag. For pages lacking the tag, {@link android.webkit.WebView#setInitialScale}
 * and {@link #setUseWideViewPort} can be used.
 *
 * @param zoom the zoom density
 * @deprecated This method is no longer supported, see the function documentation for
 * recommended alternatives.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.view.ViewGroup.isTransformedTouchPointInView:COMMENT
Method Modifier: protected   hidden      
Comment:/**
 * Returns true if a child view contains the specified point when transformed
 * into its coordinate space.
 * Child must not be null.
 * @hide
 */

@@ -1,17 +1,11 @@
 {
-    float localX = x + mScrollX - child.mLeft;
-    float localY = y + mScrollY - child.mTop;
-    if (!child.hasIdentityMatrix() && mAttachInfo != null) {
-        final float[] localXY = mAttachInfo.mTmpTransformLocation;
-        localXY[0] = localX;
-        localXY[1] = localY;
-        child.getInverseMatrix().mapPoints(localXY);
-        localX = localXY[0];
-        localY = localXY[1];
-    }
-    final boolean isInView = child.pointInView(localX, localY);
+    final float[] point = getTempPoint();
+    point[0] = x;
+    point[1] = y;
+    transformPointToViewLocal(point, child);
+    final boolean isInView = child.pointInView(point[0], point[1]);
     if (isInView && outLocalPoint != null) {
-        outLocalPoint.set(localX, localY);
+        outLocalPoint.set(point[0], point[1]);
     }
     return isInView;
 }

Find a functionally equivalent code:android.media.AudioService.checkForRingerModeChange:COMMENT
Method Modifier: private     
Comment:/**
 * Checks if the adjustment should change ringer mode instead of just
 * adjusting volume. If so, this will set the proper ringer mode and volume
 * indices on the stream states.
 */

@@ -1,6 +1,6 @@
 {
     int result = FLAG_ADJUST_VOLUME;
-    int ringerMode = getRingerMode();
+    int ringerMode = getRingerModeInternal();
     switch(ringerMode) {
         case RINGER_MODE_NORMAL:
             if (direction == AudioManager.ADJUST_LOWER) {
@@ -23,30 +23,34 @@
                 break;
             }
             if ((direction == AudioManager.ADJUST_LOWER)) {
-                if (VOLUME_SETS_RINGER_MODE_SILENT && mPrevVolDirection != AudioManager.ADJUST_LOWER) {
-                    ringerMode = RINGER_MODE_SILENT;
+                if (mPrevVolDirection != AudioManager.ADJUST_LOWER) {
+                    if (VOLUME_SETS_RINGER_MODE_SILENT) {
+                        ringerMode = RINGER_MODE_SILENT;
+                    } else {
+                        result |= AudioManager.FLAG_SHOW_VIBRATE_HINT;
+                    }
                 }
             } else if (direction == AudioManager.ADJUST_RAISE) {
                 ringerMode = RINGER_MODE_NORMAL;
@@ -49,55 +53,59 @@
             Log.e(TAG, "checkForRingerModeChange() wrong ringer mode: " + ringerMode);
             break;
     }
-    setRingerMode(ringerMode, false);
+    setRingerMode(ringerMode, TAG + ".checkForRingerModeChange", false);
     mPrevVolDirection = direction;
     return result;
 }

Find a functionally equivalent code:android.bluetooth.BluetoothHeadset.close:COMMENT
Method Modifier: 
Comment:/*package*/

@@ -9,23 +9,14 @@
             Log.e(TAG, "", e);
         }
     }
-    synchronized (mConnection) {
-        if (mService != null) {
-            try {
-                mService = null;
-                mContext.unbindService(mConnection);
-            } catch (Exception re) {
-                Log.e(TAG, "", re);
-            }
-        }
-    }
     mServiceListener = null;
+    doUnbind();
 }

Find a functionally equivalent code:android.telephony.SubscriptionManager.getDefaultSmsPhoneId:COMMENT
<android.telephony.SubscriptionManager: int getDefaultSmsPhoneId()>
Method Modifier: public      static      hidden      
Method Modifier: Yes         Yes         Yes         
Method Updated:  Yes         No          Yes         
Comment:/**
 * @hide
 */


Find a functionally equivalent code:android.content.ContentProvider.enforceWritePermissionInner:COMMENT
Method Modifier: protected   hidden      
Comment:/**
 * {@hide}
 */

@@ -9,15 +9,15 @@
     if (mExported && checkUser(pid, uid, context)) {
         final String componentPerm = getWritePermission();
         if (componentPerm != null) {
-            if (context.checkPermission(componentPerm, pid, uid) == PERMISSION_GRANTED) {
+            if (context.checkPermission(componentPerm, pid, uid, callerToken) == PERMISSION_GRANTED) {
                 return;
             } else {
                 missingPerm = componentPerm;
@@ -24,30 +24,30 @@
             for (PathPermission pp : pps) {
                 final String pathPerm = pp.getWritePermission();
                 if (pathPerm != null && pp.match(path)) {
-                    if (context.checkPermission(pathPerm, pid, uid) == PERMISSION_GRANTED) {
+                    if (context.checkPermission(pathPerm, pid, uid, callerToken) == PERMISSION_GRANTED) {
                         return;
                     } else {
                         // any denied <path-permission> means we lose
@@ -40,46 +40,46 @@
             return;
     }
     // last chance, check against any uri grants
-    if (context.checkUriPermission(uri, pid, uid, Intent.FLAG_GRANT_WRITE_URI_PERMISSION) == PERMISSION_GRANTED) {
+    if (context.checkUriPermission(uri, pid, uid, Intent.FLAG_GRANT_WRITE_URI_PERMISSION, callerToken) == PERMISSION_GRANTED) {
         return;
     }
     final String failReason = mExported ? " requires " + missingPerm + ", or grantUriPermission()" : " requires the provider be exported, or grantUriPermission()";

Find a functionally equivalent code:android.bluetooth.BluetoothAdapter.getBluetoothService:COMMENT
Method Modifier: 
Comment:/*package*/

@@ -1,5 +1,5 @@
 {
-    synchronized (mManagerCallback) {
+    synchronized (mProxyServiceStateCallbacks) {
         if (cb == null) {
             Log.w(TAG, "getBluetoothService() called with no BluetoothManagerCallback");
         } else if (!mProxyServiceStateCallbacks.contains(cb)) {

Find a functionally equivalent code:android.view.ViewGroup.resolveDrawables:COMMENT
Method Modifier: protected   hidden      
Comment:/**
 * @hide
 */

@@ -3,9 +3,9 @@
     int count = getChildCount();
     for (int i = 0; i < count; i++) {
         final View child = getChildAt(i);
-        if (child.isLayoutDirectionInherited()) {
+        if (child.isLayoutDirectionInherited() && !child.areDrawablesResolved()) {
             child.resolveDrawables();
         }
     }

Find a functionally equivalent code:android.webkit.WebSettings.setMinimumLogicalFontSize:COMMENT
<android.webkit.WebSettings: void setMinimumLogicalFontSize(int)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets the minimum logical font size. The default is 8.
 *
 * @param size a non-negative integer between 1 and 72. Any number outside
 * the specified range will be pinned.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.telephony.ServiceState.getOperatorAlphaShort:COMMENT
Method Modifier: public      
Comment:/**
 * Get current registered operator name in short alphanumeric format.
 *
 * In GSM/UMTS, short format can be up to 8 characters long.
 *
 * @return short name of operator, null if unregistered or unknown
 */

@@ -1,3 +1,3 @@
 {
-    return mOperatorAlphaShort;
+    return mVoiceOperatorAlphaShort;
 }

Find a functionally equivalent code:android.media.audiopolicy.AudioMixingRule.Builder.build:COMMENT
Method Modifier: public      
Comment:/**
 * Combines all of the matching and exclusion rules that have been set and return a new
 * {@link AudioMixingRule} object.
 * @return a new {@link AudioMixingRule} object
 */

@@ -1,3 +1,3 @@
 {
-    return new AudioMixingRule(mCriteria);
+    return new AudioMixingRule(mTargetMixType, mCriteria);
 }

Find a functionally equivalent code:android.telephony.PhoneNumberUtils.isLocalEmergencyNumber:COMMENT
Method Modifier: public      static      hidden      
Comment:/**
 * Checks if a given number is an emergency number for the country that the user is in.
 *
 * @param subId the subscription id of the SIM.
 * @param number the number to look up.
 * @param context the specific context which the number should be checked against
 * @return true if the specified number is an emergency number for the country the user
 * is currently in.
 * @hide
 */


Find a functionally equivalent code:android.appwidget.AppWidgetHost.allocateAppWidgetId:COMMENT
Method Modifier: public      
Comment:/**
 * Get a appWidgetId for a host in the calling process.
 *
 * @return a appWidgetId
 */

@@ -1,6 +1,6 @@
 {
     try {
-        return sService.allocateAppWidgetId(mContext.getOpPackageName(), mHostId);
+        return sService.allocateAppWidgetId(mContextOpPackageName, mHostId);
     } catch (RemoteException e) {
         throw new RuntimeException("system server dead?", e);
     }

Find a functionally equivalent code:android.graphics.drawable.RippleBackground.cancel:COMMENT
Method Modifier: public      
Comment:/**
 * Cancel all animations. The caller is responsible for removing
 * the ripple from the list of animating ripples.
 */

@@ -1,4 +1,4 @@
 {
     cancelSoftwareAnimations();
-    cancelHardwareAnimations(true);
+    cancelHardwareAnimations(false);
 }

Find a functionally equivalent code:android.hardware.camera2.params.StreamConfigurationMap.getPublicFormats:COMMENT
Method Modifier: private     
Comment:/**
 * Get the list of publically visible output formats; does not include IMPL_DEFINED
 */

@@ -2,8 +2,8 @@
     int[] formats = new int[getPublicFormatCount(output)];
     int i = 0;
     for (int format : getFormatsMap(output).keySet()) {
-        if (format != HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED) {
+        if (format != HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED && format != HAL_PIXEL_FORMAT_RAW_OPAQUE) {
             formats[i++] = format;
         }
     }

Find a functionally equivalent code:android.webkit.CookieManager.allowFileSchemeCookiesImpl:COMMENT
<android.webkit.CookieManager: boolean allowFileSchemeCookiesImpl()>
Method Modifier: protected   abstract    hidden      
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
Comment:/**
 * Implements {@link #allowFileSchemeCookies()}.
 *
 * @hide Only for use by WebViewProvider implementations
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.server.power.PowerManagerService.goToSleepNoUpdateLocked:COMMENT
Method Modifier: private     
Comment:// dozing before really going to sleep.

@@ -29,38 +29,36 @@
                 break;
         }
         mLastSleepTime = eventTime;
-        mDirty |= DIRTY_WAKEFULNESS;
-        mWakefulness = WAKEFULNESS_DOZING;
         mSandmanSummoned = true;
-        setInteractiveStateLocked(false, reason);
+        setWakefulnessLocked(WAKEFULNESS_DOZING, reason);
         // Report the number of wake locks that will be cleared by going to sleep.
         int numWakeLocksCleared = 0;
         final int numWakeLocks = mWakeLocks.size();

Find a functionally equivalent code:com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager.hide:COMMENT
Method Modifier: public      
Comment:/**
 * Hides the keyguard view
 */

@@ -34,39 +34,40 @@
                 public void run() {
                     mStatusBarWindowManager.setKeyguardFadingAway(false);
                     mPhoneStatusBar.finishKeyguardFadingAway();
+                    WindowManagerGlobal.getInstance().trimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
                 }
             });
         } else {

Find a functionally equivalent code:android.webkit.WebSettings.getSerifFontFamily:COMMENT
<android.webkit.WebSettings: String getSerifFontFamily()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets the serif font family name. The default is "serif".
 *
 * @return the serif font family name as a string
 * @see #setSerifFontFamily
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebView.restoreState:COMMENT
Method Modifier: public      
Comment:/**
 * Restores the state of this WebView from the given Bundle. This method is
 * intended for use in {@link android.app.Activity#onRestoreInstanceState}
 * and should be called to restore the state of this WebView. If
 * it is called after this WebView has had a chance to build state (load
 * pages, create a back/forward list, etc.) there may be undesirable
 * side-effects. Please note that this method no longer restores the
 * display data for this WebView.
 *
 * @param inState the incoming Bundle of state
 * @return the restored back/forward list or null if restoreState failed
 */

@@ -1,6 +1,6 @@
 {
     checkThread();
-    if (DebugFlags.TRACE_API)
+    if (TRACE)
         Log.d(LOGTAG, "restoreState");
     return mProvider.restoreState(inState);
 }

Find a functionally equivalent code:com.android.systemui.statusbar.phone.PanelView.onEmptySpaceClick:COMMENT
<com.android.systemui.statusbar.phone.PanelView: boolean onEmptySpaceClick(float)>
Method Modifier: protected   private     
Method Modifier: No          Yes         
Method Updated:  Yes         No          
Comment:/**
 * Gets called when the user performs a click anywhere in the empty area of the panel.
 *
 * @return whether the panel will be expanded after the action performed by this method
 */


Find a functionally equivalent code:android.net.StaticIpConfiguration.toLinkProperties:COMMENT
Method Modifier: public      
Comment:/**
 * Returns a LinkProperties object expressing the data in this object. Note that the information
 * contained in the LinkProperties will not be a complete picture of the link's configuration,
 * because any configuration information that is obtained dynamically by the network (e.g.,
 * IPv6 configuration) will not be included.
 */

@@ -10,14 +10,15 @@
     for (InetAddress dns : dnsServers) {
         lp.addDnsServer(dns);
     }
+    lp.setDomains(domains);
     return lp;
 }

Find a functionally equivalent code:com.android.layoutlib.bridge.impl.RenderSessionImpl.inflate:COMMENT
Method Modifier: public      
Comment:/**
 * Inflates the layout.
 * <p>
 * {@link #acquire(long)} must have been called before this.
 *
 * @throws IllegalStateException if the current context is different than the one owned by
 * the scene, or if {@link #init(long)} was not called.
 */

@@ -100,107 +100,106 @@
             topLayout.addView(backgroundLayout);
             // if the theme says no title/action bar, then the size will be 0
             if (mActionBarSize > 0) {
-                ActionBarLayout actionBar = createActionBar(context, params);
-                backgroundLayout.addView(actionBar);
+                BridgeActionBar actionBar = createActionBar(context, params, backgroundLayout);
                 actionBar.createMenuPopup();
                 mContentRoot = actionBar.getContentRoot();
             } else if (mTitleBarSize > 0) {
@@ -131,144 +130,150 @@
         // Sets the project callback (custom view loader) to the fragment delegate so that
         // it can instantiate the custom Fragment.
         Fragment_Delegate.setProjectCallback(params.getProjectCallback());
-        View view = mInflater.inflate(mBlockParser, mContentRoot);
+        String rootTag = params.getFlag(SessionParamsFlags.FLAG_KEY_ROOT_TAG);
+        boolean isPreference = "PreferenceScreen".equals(rootTag);
+        View view;
+        if (isPreference) {
+            view = Preference_Delegate.inflatePreference(getContext(), mBlockParser, mContentRoot);
+        } else {
+            view = mInflater.inflate(mBlockParser, mContentRoot);
+        }
         // done with the parser, pop it.
         context.popParser();
         Fragment_Delegate.setProjectCallback(null);
         // set the AttachInfo on the root view.
         AttachInfo_Accessor.setAttachInfo(mViewRoot);
         // post-inflate process. For now this supports TabHost/TabWidget
-        postInflateProcess(view, params.getProjectCallback());
+        postInflateProcess(view, params.getProjectCallback(), isPreference ? view : null);
         // get the background drawable
         if (mWindowBackground != null) {
             Drawable d = ResourceHelper.getDrawable(mWindowBackground, context);

Find a functionally equivalent code:android.webkit.WebSettings.getMinimumFontSize:COMMENT
<android.webkit.WebSettings: int getMinimumFontSize()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets the minimum font size.
 *
 * @return a non-negative integer between 1 and 72
 * @see #setMinimumFontSize
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.app.Activity.openOptionsMenu:COMMENT
Method Modifier: public      
Comment:/**
 * Programmatically opens the options menu. If the options menu is already
 * open, this method does nothing.
 */

@@ -1,5 +1,5 @@
 {
-    if (mActionBar == null || !mActionBar.openOptionsMenu()) {
+    if (mWindow.hasFeature(Window.FEATURE_OPTIONS_PANEL) && (mActionBar == null || !mActionBar.openOptionsMenu())) {
         mWindow.openPanel(Window.FEATURE_OPTIONS_PANEL, null);
     }
 }

Find a functionally equivalent code:android.telephony.PhoneNumberUtils.cdmaCheckAndProcessPlusCode:COMMENT
Method Modifier: public      static      hidden      
Comment:/**
 * This function checks if there is a plus sign (+) in the passed-in dialing number.
 * If there is, it processes the plus sign based on the default telephone
 * numbering plan of the system when the phone is activated and the current
 * telephone numbering plan of the system that the phone is camped on.
 * Currently, we only support the case that the default and current telephone
 * numbering plans are North American Numbering Plan(NANP).
 *
 * The passed-in dialStr should only contain the valid format as described below,
 * 1) the 1st character in the dialStr should be one of the really dialable
 * characters listed below
 * ISO-LATIN characters 0-9, *, # , +
 * 2) the dialStr should already strip out the separator characters,
 * every character in the dialStr should be one of the non separator characters
 * listed below
 * ISO-LATIN characters 0-9, *, # , +, WILD, WAIT, PAUSE
 *
 * Otherwise, this function returns the dial string passed in
 *
 * @param dialStr the original dial string
 * @return the converted dial string if the current/default countries belong to NANP,
 * and if there is the "+" in the original dial string. Otherwise, the original dial
 * string returns.
 *
 * This API is for CDMA only
 *
 * @hide TODO: pending API Council approval
 */

@@ -1,8 +1,8 @@
 {
     if (!TextUtils.isEmpty(dialStr)) {
         if (isReallyDialable(dialStr.charAt(0)) && isNonSeparator(dialStr)) {
-            String currIso = SystemProperties.get(PROPERTY_OPERATOR_ISO_COUNTRY, "");
-            String defaultIso = SystemProperties.get(PROPERTY_ICC_OPERATOR_ISO_COUNTRY, "");
+            String currIso = TelephonyManager.getDefault().getNetworkCountryIso();
+            String defaultIso = TelephonyManager.getDefault().getSimCountryIso();
             if (!TextUtils.isEmpty(currIso) && !TextUtils.isEmpty(defaultIso)) {
                 return cdmaCheckAndProcessPlusCodeByNumberFormat(dialStr, getFormatTypeFromCountryCode(currIso), getFormatTypeFromCountryCode(defaultIso));
             }

Find a functionally equivalent code:com.android.systemui.recents.views.RecentsView.focusNextTask:COMMENT
Method Modifier: public      
Comment:/**
 * Focuses the next task in the first stack view
 */

@@ -5,11 +5,11 @@
         View child = getChildAt(i);
         if (child != mSearchBar) {
             TaskStackView stackView = (TaskStackView) child;
-            stackView.focusNextTask(forward);
+            stackView.focusNextTask(forward, true);
             break;
         }
     }

Find a functionally equivalent code:com.android.server.display.OverlayDisplayAdapter.OverlayDisplayHandle.onWindowCreated:COMMENT
Method Modifier: public      
Comment:// Called on the UI thread.

@@ -1,7 +1,7 @@
 {
     synchronized (getSyncRoot()) {
         IBinder displayToken = SurfaceControl.createDisplay(mName, mSecure);
-        mDevice = new OverlayDisplayDevice(displayToken, mName, mWidth, mHeight, refreshRate, presentationDeadlineNanos, mDensityDpi, mSecure, state, surfaceTexture);
+        mDevice = new OverlayDisplayDevice(displayToken, mName, mWidth, mHeight, refreshRate, presentationDeadlineNanos, mDensityDpi, mSecure, state, surfaceTexture, mNumber);
         sendDisplayDeviceEventLocked(mDevice, DISPLAY_DEVICE_EVENT_ADDED);
     }
 }

Find a functionally equivalent code:android.app.Notification.Builder.processSmallIconAsLarge:COMMENT
Method Modifier: private     
Comment:/**
 * Apply any necessary background to smallIcons being used in the largeIcon spot.
 */

@@ -1,4 +1,7 @@
 {
+    if (!isLegacy()) {
+        contentView.setDrawableParameters(R.id.icon, false, -1, 0xFFFFFFFF, PorterDuff.Mode.SRC_ATOP, -1);
+    }
     if (!isLegacy() || mColorUtil.isGrayscaleIcon(mContext, largeIconId)) {
         applyLargeIconBackground(contentView);
     }

Find a functionally equivalent code:com.android.layoutlib.bridge.util.DynamicIdMap.getId:COMMENT
Method Modifier: public      
Comment:/**
 * Returns a dynamic integer for the given resource type/name, creating it if it doesn't
 * already exist.
 *
 * @param resource the type/name of the resource
 * @return an integer.
 */

@@ -1,7 +1,7 @@
 {
     Integer value = mDynamicIds.get(resource);
     if (value == null) {
-        value = Integer.valueOf(++mDynamicSeed);
+        value = ++mDynamicSeed;
         mDynamicIds.put(resource, value);
         mRevDynamicIds.put(value, resource);
     }

Find a functionally equivalent code:android.app.Activity.closeContextMenu:COMMENT
Method Modifier: public      
Comment:/**
 * Programmatically closes the most recently opened context menu, if showing.
 */

@@ -1,3 +1,5 @@
 {
-    mWindow.closePanel(Window.FEATURE_CONTEXT_MENU);
+    if (mWindow.hasFeature(Window.FEATURE_CONTEXT_MENU)) {
+        mWindow.closePanel(Window.FEATURE_CONTEXT_MENU);
+    }
 }

Find a functionally equivalent code:android.renderscript.ScriptIntrinsicHistogram.forEach_Dot:COMMENT
Method Modifier: public      
Comment:/**
 * Process an input buffer and place the histogram into the
 * output allocation. The dot product of the input channel and
 * the coefficients from 'setDotCoefficients' are used to
 * calculate the output values.
 *
 * 1D and 2D input allocations are supported.
 *
 * @param ain The input image
 * @param opt LaunchOptions for clipping
 */

@@ -2,9 +2,9 @@
     if (mOut.getType().getElement().getVectorSize() != 1) {
         throw new RSIllegalArgumentException("Output vector size must be one.");
     }
-    if (ain.getType().getElement().isCompatible(Element.U8(mRS)) && ain.getType().getElement().isCompatible(Element.U8_4(mRS))) {
-        throw new RSIllegalArgumentException("Output type must be U32 or I32.");
+    if (!ain.getType().getElement().isCompatible(Element.U8(mRS)) && !ain.getType().getElement().isCompatible(Element.U8_2(mRS)) && !ain.getType().getElement().isCompatible(Element.U8_3(mRS)) && !ain.getType().getElement().isCompatible(Element.U8_4(mRS))) {
+        throw new RSIllegalArgumentException("Input type must be U8, U8_1, U8_2 or U8_4.");
     }
     forEach(1, ain, null, null, opt);
 }

Find a functionally equivalent code:android.webkit.WebSettings.getLayoutAlgorithm:COMMENT
<android.webkit.WebSettings: LayoutAlgorithm getLayoutAlgorithm()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets the current layout algorithm.
 *
 * @return the layout algorithm in use, as a {@link LayoutAlgorithm} value
 * @see #setLayoutAlgorithm
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.net.ConnectivityManager.startUsingNetworkFeature:COMMENT
Method Modifier: public      deprecated  
Comment:/**
 * Tells the underlying networking system that the caller wants to
 * begin using the named feature. The interpretation of {@code feature}
 * is completely up to each networking implementation.
 * <p>This method requires the caller to hold the permission
 * {@link android.Manifest.permission#CHANGE_NETWORK_STATE}.
 * @param networkType specifies which network the request pertains to
 * @param feature the name of the feature to be used
 * @return an integer value representing the outcome of the request.
 * The interpretation of this value is specific to each networking
 * implementation+feature combination, except that the value {@code -1}
 * always indicates failure.
 *
 * @deprecated Deprecated in favor of the cleaner {@link #requestNetwork} api.
 */

@@ -6,18 +6,11 @@
     }
     NetworkRequest request = null;
     synchronized (sLegacyRequests) {
-        if (LEGACY_DBG) {
-            Log.d(TAG, "Looking for legacyRequest for netCap with hash: " + netCap + " (" + netCap.hashCode() + ")");
-            Log.d(TAG, "sLegacyRequests has:");
-            for (NetworkCapabilities nc : sLegacyRequests.keySet()) {
-                Log.d(TAG, "  " + nc + " (" + nc.hashCode() + ")");
-            }
-        }
         LegacyRequest l = sLegacyRequests.get(netCap);
         if (l != null) {
             Log.d(TAG, "renewing startUsingNetworkFeature request " + l.networkRequest);

Find a functionally equivalent code:android.app.Notification.Builder.processSmallRightIcon:COMMENT
Method Modifier: private     
Comment:/**
 * Recolor small icons when used in the R.id.right_icon slot.
 */

@@ -1,6 +1,8 @@
 {
-    if (!isLegacy() || mColorUtil.isGrayscaleIcon(mContext, smallIconDrawableId)) {
+    if (!isLegacy()) {
         contentView.setDrawableParameters(R.id.right_icon, false, -1, 0xFFFFFFFF, PorterDuff.Mode.SRC_ATOP, -1);
+    }
+    if (!isLegacy() || mColorUtil.isGrayscaleIcon(mContext, smallIconDrawableId)) {
         contentView.setInt(R.id.right_icon, "setBackgroundResource", R.drawable.notification_icon_legacy_bg);
         contentView.setDrawableParameters(R.id.right_icon, true, -1, resolveColor(), PorterDuff.Mode.SRC_ATOP, -1);
     }

Find a functionally equivalent code:android.webkit.WebSettings.setCacheMode:COMMENT
<android.webkit.WebSettings: void setCacheMode(int)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Overrides the way the cache is used. The way the cache is used is based
 * on the navigation type. For a normal page load, the cache is checked
 * and content is re-validated as needed. When navigating back, content is
 * not revalidated, instead the content is just retrieved from the cache.
 * This method allows the client to override this behavior by specifying
 * one of {@link #LOAD_DEFAULT},
 * {@link #LOAD_CACHE_ELSE_NETWORK}, {@link #LOAD_NO_CACHE} or
 * {@link #LOAD_CACHE_ONLY}. The default value is {@link #LOAD_DEFAULT}.
 *
 * @param mode the mode to use
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebSettings.setLayoutAlgorithm:COMMENT
<android.webkit.WebSettings: void setLayoutAlgorithm(LayoutAlgorithm)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets the underlying layout algorithm. This will cause a relayout of the
 * WebView. The default is {@link LayoutAlgorithm#NARROW_COLUMNS}.
 *
 * @param l the layout algorithm to use, as a {@link LayoutAlgorithm} value
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.widget.ProgressBar.applySecondaryProgressTint:COMMENT
Method Modifier: private     
Comment:/**
 * Should only be called if we've already verified that mProgressDrawable
 * and mProgressTintInfo are non-null.
 */

@@ -8,13 +8,17 @@
             if (mProgressTintInfo.mHasSecondaryProgressTintMode) {
                 target.setTintMode(mProgressTintInfo.mSecondaryProgressTintMode);
             }
+            // stateful before applying the tint, so let's try again.
+            if (target.isStateful()) {
+                target.setState(getDrawableState());
+            }
         }
     }
 }

Find a functionally equivalent code:android.app.SharedElementCallback.onCreateSnapshotView:COMMENT
Method Modifier: public      
Comment:/**
 * Reconstitutes a snapshot View from a Parcelable returned in
 * {@link #onCaptureSharedElementSnapshot(android.view.View, android.graphics.Matrix,
 * android.graphics.RectF)} to be used in {@link #onSharedElementStart(java.util.List,
 * java.util.List, java.util.List)} and {@link #onSharedElementEnd(java.util.List,
 * java.util.List, java.util.List)}. The returned View will be sized and positioned after
 * this call so that it is ready to be added to the decor View's overlay.
 *
 * <p>This is not called for Fragment Transitions.</p>
 *
 * @param context The Context used to create the snapshot View.
 * @param snapshot The Parcelable returned by {@link #onCaptureSharedElementSnapshot(
 * android.view.View, android.graphics.Matrix, android.graphics.RectF)}.
 * @return A View to be sent in {@link #onSharedElementStart(java.util.List, java.util.List,
 * java.util.List)} and {@link #onSharedElementEnd(java.util.List, java.util.List,
 * java.util.List)}. A null value will produce a null snapshot value for those two methods.
 */

@@ -1,6 +1,22 @@
 {
     View view = null;
-    if (snapshot instanceof Bitmap) {
+    if (snapshot instanceof Bundle) {
+        Bundle bundle = (Bundle) snapshot;
+        Bitmap bitmap = (Bitmap) bundle.getParcelable(BUNDLE_SNAPSHOT_BITMAP);
+        if (bitmap == null) {
+            return null;
+        }
+        ImageView imageView = new ImageView(context);
+        view = imageView;
+        imageView.setImageBitmap(bitmap);
+        imageView.setScaleType(ScaleType.valueOf(bundle.getString(BUNDLE_SNAPSHOT_IMAGE_SCALETYPE)));
+        if (imageView.getScaleType() == ScaleType.MATRIX) {
+            float[] values = bundle.getFloatArray(BUNDLE_SNAPSHOT_IMAGE_MATRIX);
+            Matrix matrix = new Matrix();
+            matrix.setValues(values);
+            imageView.setImageMatrix(matrix);
+        }
+    } else if (snapshot instanceof Bitmap) {
         Bitmap bitmap = (Bitmap) snapshot;
         view = new View(context);
         Resources resources = context.getResources();

Find a functionally equivalent code:com.android.server.media.MediaSessionService.SessionManagerImpl.dispatchMediaKeyEvent:COMMENT
Method Modifier: public      
Comment:/**
 * Handles the dispatching of the media button events to one of the
 * registered listeners, or if there was none, broadcast an
 * ACTION_MEDIA_BUTTON intent to the rest of the system.
 *
 * @param keyEvent a non-null KeyEvent whose key code is one of the
 * supported media buttons
 * @param needWakeLock true if a PARTIAL_WAKE_LOCK needs to be held
 * while this key event is dispatched.
 */

@@ -8,14 +8,17 @@
     final long token = Binder.clearCallingIdentity();
     try {
         synchronized (mLock) {
-            MediaSessionRecord session = mPriorityStack.getDefaultMediaButtonSession(mCurrentUserId);
+            // If we don't have a media button receiver to fall back on
+            // include non-playing sessions for dispatching
+            boolean useNotPlayingSessions = mUserRecords.get(ActivityManager.getCurrentUser()).mLastMediaButtonReceiver == null;
+            MediaSessionRecord session = mPriorityStack.getDefaultMediaButtonSession(mCurrentUserId, useNotPlayingSessions);
             if (isVoiceKey(keyEvent.getKeyCode())) {
                 handleVoiceKeyEventLocked(keyEvent, needWakeLock, session);
             } else {

Find a functionally equivalent code:android.webkit.WebSettings.getBuiltInZoomControls:COMMENT
<android.webkit.WebSettings: boolean getBuiltInZoomControls()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets whether the zoom mechanisms built into WebView are being used.
 *
 * @return true if the zoom mechanisms built into WebView are being used
 * @see #setBuiltInZoomControls
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebView.restorePicture:COMMENT
Method Modifier: public      hidden      deprecated  
Comment:/**
 * Restores the display data that was saved in {@link #savePicture}. Used in
 * conjunction with {@link #restoreState}. Note that this will not work if
 * this WebView is hardware accelerated.
 *
 * @param b a Bundle containing the saved display data
 * @param src the file where the picture data was stored
 * @return true if the picture was successfully restored
 * @deprecated This method is now obsolete.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */

@@ -1,6 +1,6 @@
 {
     checkThread();
-    if (DebugFlags.TRACE_API)
+    if (TRACE)
         Log.d(LOGTAG, "restorePicture=" + src.getName());
     return mProvider.restorePicture(b, src);
 }

Find a functionally equivalent code:android.webkit.WebSettings.setTextZoom:COMMENT
<android.webkit.WebSettings: void setTextZoom(int)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets the text zoom of the page in percent. The default is 100.
 *
 * @param textZoom the text zoom in percent
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.systemui.statusbar.stack.StackScrollAlgorithm.updateZValuesForState:COMMENT
Method Modifier: private     
Comment:/**
 * Calculate the Z positions for all children based on the number of items in both stacks and
 * save it in the resultState
 *
 * @param resultState The result state to update the zTranslation values
 * @param algorithmState The state in which the current pass of the algorithm is currently in
 */

@@ -5,11 +5,14 @@
         StackScrollState.ViewState childViewState = resultState.getViewStateForView(child);
         if (i < algorithmState.itemsInTopStack) {
             float stackIndex = algorithmState.itemsInTopStack - i;
-            stackIndex = Math.min(stackIndex, MAX_ITEMS_IN_TOP_STACK + 2);
+            // Ensure that the topmost item is a little bit higher than the rest when fully
+            // scrolled, to avoid drawing errors when swiping it out
+            float max = MAX_ITEMS_IN_TOP_STACK + (i == 0 ? 2.5f : 2);
+            stackIndex = Math.min(stackIndex, max);
             if (i == 0 && algorithmState.itemsInTopStack < 2.0f) {
                 // We only have the top item and an additional item in the top stack,
                 // Interpolate the index from 0 to 2 while the second item is

Find a functionally equivalent code:android.webkit.WebSettings.setMinimumFontSize:COMMENT
<android.webkit.WebSettings: void setMinimumFontSize(int)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets the minimum font size. The default is 8.
 *
 * @param size a non-negative integer between 1 and 72. Any number outside
 * the specified range will be pinned.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.server.usb.UsbHostManager.beginUsbDeviceAdded:COMMENT
Method Modifier: private     
Comment:/* Called from JNI in monitorUsbHostBus() to report new USB devices
       Returns true if successful, in which case the JNI code will continue adding configurations,
       interfaces and endpoints, and finally call endUsbDeviceAdded after all descriptors
       have been processed
     */

@@ -1,5 +1,5 @@
 {
-    if (DEBUG_AUDIO) {
+    if (DEBUG) {
         Slog.d(TAG, "usb:UsbHostManager.beginUsbDeviceAdded(" + deviceName + ")");
         // Audio Class Codes:
         // Audio: 0x01

Find a functionally equivalent code:android.webkit.WebView.findNext:COMMENT
Method Modifier: public      
Comment:/**
 * Highlights and scrolls to the next match found by
 * {@link #findAllAsync}, wrapping around page boundaries as necessary.
 * Notifies any registered {@link FindListener}. If {@link #findAllAsync(String)}
 * has not been called yet, or if {@link #clearMatches} has been called since the
 * last find operation, this function does nothing.
 *
 * @param forward the direction to search
 * @see #setFindListener
 */

@@ -1,6 +1,6 @@
 {
     checkThread();
-    if (DebugFlags.TRACE_API)
+    if (TRACE)
         Log.d(LOGTAG, "findNext");
     mProvider.findNext(forward);
 }

Find a functionally equivalent code:android.animation.PropertyValuesHolder.setupEndValue:COMMENT
Method Modifier: 
Comment:/**
 * This function is called by ObjectAnimator when setting the end values for an animation.
 * The end values are set according to the current values in the target object. The
 * property whose value is extracted is whatever is specified by the propertyName of this
 * PropertyValuesHolder object.
 *
 * @param target The object which holds the start values that should be set.
 */

@@ -1,5 +1,5 @@
 {
-    ArrayList<Keyframe> keyframes = mKeyframes.getKeyframes();
+    List<Keyframe> keyframes = mKeyframes.getKeyframes();
     if (!keyframes.isEmpty()) {
         setupValue(target, keyframes.get(keyframes.size() - 1));
     }

Find a functionally equivalent code:com.android.systemui.recents.views.TaskViewThumbnail.rebindToTask:COMMENT
Method Modifier: 
Comment:/**
 * Binds the thumbnail view to the task
 */

@@ -1,7 +1,7 @@
 {
     if (t.thumbnail != null) {
-        setImageBitmap(t.thumbnail);
+        setThumbnail(t.thumbnail);
     } else {
-        setImageBitmap(null);
+        setThumbnail(null);
     }
 }

Find a functionally equivalent code:android.webkit.WebSettings.getLightTouchEnabled:COMMENT
<android.webkit.WebSettings: boolean getLightTouchEnabled()>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
Comment:/**
 * Gets whether light touches are enabled.
 * @see #setLightTouchEnabled
 * @deprecated This setting is obsolete.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.os.Parcel.unmarshall:COMMENT
Method Modifier: public      final       
Comment:/**
 * Set the bytes in data to be the raw bytes of this Parcel.
 */

@@ -1,3 +1,3 @@
 {
-    nativeUnmarshall(mNativePtr, data, offest, length);
+    nativeUnmarshall(mNativePtr, data, offset, length);
 }

Find a functionally equivalent code:android.webkit.WebView.savePicture:COMMENT
Method Modifier: public      hidden      deprecated  
Comment:/**
 * Saves the current display data to the Bundle given. Used in conjunction
 * with {@link #saveState}.
 * @param b a Bundle to store the display data
 * @param dest the file to store the serialized picture data. Will be
 * overwritten with this WebView's picture data.
 * @return true if the picture was successfully saved
 * @deprecated This method is now obsolete.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */

@@ -1,6 +1,6 @@
 {
     checkThread();
-    if (DebugFlags.TRACE_API)
+    if (TRACE)
         Log.d(LOGTAG, "savePicture=" + dest.getName());
     return mProvider.savePicture(b, dest);
 }

Find a functionally equivalent code:com.android.systemui.recents.views.TaskStackViewTouchHandler.onTouchEvent:COMMENT
Method Modifier: public      
Comment:/**
 * Handles touch events once we have intercepted them
 */

@@ -46,51 +46,52 @@
             {
                 if (mActivePointerId == INACTIVE_POINTER_ID)
                     break;
+                mVelocityTracker.addMovement(createMotionEventForStackScroll(ev));
                 int activePointerIndex = ev.findPointerIndex(mActivePointerId);
                 int x = (int) ev.getX(activePointerIndex);
                 int y = (int) ev.getY(activePointerIndex);
@@ -55,63 +56,61 @@
                 if (!mIsScrolling) {
                     if (yTotal > mScrollTouchSlop) {
                         mIsScrolling = true;
-                        // Initialize the velocity tracker
-                        initOrResetVelocityTracker();
-                        mVelocityTracker.addMovement(createMotionEventForStackScroll(ev));
                         // Disallow parents from intercepting touch events
                         final ViewParent parent = mSv.getParent();
                         if (parent != null) {
@@ -75,85 +73,78 @@
                         deltaP *= (1f - (Math.min(maxOverScroll, overScrollAmount) / maxOverScroll));
                     }
                     mScroller.setStackScroll(curStackScroll + deltaP);
-                    if (mScroller.isScrollOutOfBounds()) {
-                        mVelocityTracker.clear();
-                    } else {
-                        mVelocityTracker.addMovement(createMotionEventForStackScroll(ev));
-                    }
                 }
                 mLastMotionX = x;
                 mLastMotionY = y;
@@ -89,101 +82,93 @@
             }
         case MotionEvent.ACTION_UP:
             {
-                final VelocityTracker velocityTracker = mVelocityTracker;
-                velocityTracker.computeCurrentVelocity(1000, mMaximumVelocity);
-                int velocity = (int) velocityTracker.getYVelocity(mActivePointerId);
+                mVelocityTracker.computeCurrentVelocity(1000, mMaximumVelocity);
+                int velocity = (int) mVelocityTracker.getYVelocity(mActivePointerId);
                 if (mIsScrolling && (Math.abs(velocity) > mMinimumVelocity)) {
-                    int overscrollRange = (int) (Math.min(1f, Math.abs((float) velocity / mMaximumVelocity)) * Constants.Values.TaskStackView.TaskStackOverscrollRange);
-                    // Fling scroll
-                    mScroller.mScroller.fling(0, mScroller.progressToScrollRange(mScroller.getStackScroll()), 0, velocity, 0, 0, mScroller.progressToScrollRange(mSv.mLayoutAlgorithm.mMinScrollP), mScroller.progressToScrollRange(mSv.mLayoutAlgorithm.mMaxScrollP), 0, overscrollRange);
+                    float overscrollRangePct = Math.abs((float) velocity / mMaximumVelocity);
+                    int overscrollRange = (int) (Math.min(1f, overscrollRangePct) * (Constants.Values.TaskStackView.TaskStackMaxOverscrollRange - Constants.Values.TaskStackView.TaskStackMinOverscrollRange));
+                    mScroller.mScroller.fling(0, mScroller.progressToScrollRange(mScroller.getStackScroll()), 0, velocity, 0, 0, mScroller.progressToScrollRange(mSv.mLayoutAlgorithm.mMinScrollP), mScroller.progressToScrollRange(mSv.mLayoutAlgorithm.mMaxScrollP), 0, Constants.Values.TaskStackView.TaskStackMinOverscrollRange + overscrollRange);
                     // Invalidate to kick off computeScroll
                     mSv.invalidate();
                 } else if (mScroller.isScrollOutOfBounds()) {

Find a functionally equivalent code:android.graphics.Bitmap.recycle:COMMENT
Method Modifier: public      
Comment:/**
 * Free the native object associated with this bitmap, and clear the
 * reference to the pixel data. This will not free the pixel data synchronously;
 * it simply allows it to be garbage collected if there are no other references.
 * The bitmap is marked as "dead", meaning it will throw an exception if
 * getPixels() or setPixels() is called, and will draw nothing. This operation
 * cannot be reversed, so it should only be called if you are sure there are no
 * further uses for the bitmap. This is an advanced call, and normally need
 * not be called, since the normal GC process will free up this memory when
 * there are no more references to this bitmap.
 */

@@ -1,5 +1,5 @@
 {
-    if (!mRecycled) {
+    if (!mRecycled && mFinalizer.mNativeBitmap != 0) {
         if (nativeRecycle(mNativeBitmap)) {
             // return value indicates whether native pixel object was actually recycled.
             // false indicates that it is still in use at the native level and these

Find a functionally equivalent code:android.webkit.WebSettings.getJavaScriptCanOpenWindowsAutomatically:COMMENT
<android.webkit.WebSettings: boolean getJavaScriptCanOpenWindowsAutomatically()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets whether JavaScript can open windows automatically.
 *
 * @return true if JavaScript can open windows automatically during
 * window.open()
 * @see #setJavaScriptCanOpenWindowsAutomatically
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.appwidget.AppWidgetHost.stopListening:COMMENT
Method Modifier: public      
Comment:/**
 * Stop receiving onAppWidgetChanged calls for your AppWidgets.  Call this when your activity is
 * no longer visible, i.e. from onStop() in your Activity.
 */

@@ -1,6 +1,6 @@
 {
     try {
-        sService.stopListening(mContext.getOpPackageName(), mHostId);
+        sService.stopListening(mContextOpPackageName, mHostId);
     } catch (RemoteException e) {
         throw new RuntimeException("system server dead?", e);
     }

Find a functionally equivalent code:com.android.server.power.PowerManagerService.updatePowerStateLocked:COMMENT
Method Modifier: private     
Comment:/**
 * Updates the global power state based on dirty bits recorded in mDirty.
 *
 * This is the main function that performs power state transitions.
 * We centralize them here so that we can recompute the power state completely
 * each time something important changes, and ensure that we do it the same
 * way each time.  The point is to gather all of the transition logic here.
 */

@@ -10,15 +10,16 @@
         // Phase 0: Basic state updates.
         updateIsPoweredLocked(mDirty);
         updateStayOnLocked(mDirty);
+        updateScreenBrightnessBoostLocked(mDirty);
         // Phase 1: Update wakefulness.
         // Loop because the wake lock and user activity computations are influenced
         // by changes in wakefulness.
@@ -31,37 +32,38 @@
         updateDreamLocked(dirtyPhase2, displayBecameReady);
         // Phase 4: Send notifications, if needed.
         if (mDisplayReady) {
-            finishInteractiveStateChangeLocked();
+            finishWakefulnessChangeLocked();
         }
         // Phase 5: Update suspend blocker.
         // Because we might release the last suspend blocker here, we need to make sure

Find a functionally equivalent code:com.android.internal.widget.ExploreByTouchHelper.intersectVisibleToUser:COMMENT
Method Modifier: private     internal    
Comment:/**
 * Computes whether the specified {@link Rect} intersects with the visible
 * portion of its parent {@link View}. Modifies {@code localRect} to contain
 * only the visible portion.
 *
 * @param localRect A rectangle in local (parent) coordinates.
 * @return Whether the specified {@link Rect} is visible on the screen.
 */

@@ -21,29 +21,33 @@
         return false;
     }
     // If no portion of the parent is visible, this view is not visible.
-    if (!mView.getLocalVisibleRect(mTempVisibleRect)) {
+    if (mTempVisibleRect == null) {
+        mTempVisibleRect = new Rect();
+    }
+    final Rect tempVisibleRect = mTempVisibleRect;
+    if (!mView.getLocalVisibleRect(tempVisibleRect)) {
         return false;
     }
     // Check if the view intersects the visible portion of the parent.
-    return localRect.intersect(mTempVisibleRect);
+    return localRect.intersect(tempVisibleRect);
 }

Find a functionally equivalent code:android.media.MediaFocusControl.dumpFocusStack:COMMENT
Method Modifier: private     
Comment:/**
 * Helper function:
 * Display in the log the current entries in the audio focus stack
 */

@@ -6,9 +6,10 @@
             stackIterator.next().dump(pw);
         }
     }
+    pw.println("\n Notify on duck: " + mNotifyFocusOwnerOnDuck + "\n");
 }

Find a functionally equivalent code:android.bluetooth.BluetoothAdapter.removeServiceStateCallback:COMMENT
Method Modifier: 
Comment:/*package*/

@@ -1,5 +1,5 @@
 {
-    synchronized (mManagerCallback) {
+    synchronized (mProxyServiceStateCallbacks) {
         mProxyServiceStateCallbacks.remove(cb);
     }
 }

Find a functionally equivalent code:android.webkit.WebView.onPause:COMMENT
Method Modifier: public      
Comment:/**
 * Pauses any extra processing associated with this WebView and its
 * associated DOM, plugins, JavaScript etc. For example, if this WebView is
 * taken offscreen, this could be called to reduce unnecessary CPU or
 * network traffic. When this WebView is again "active", call onResume().
 * Note that this differs from pauseTimers(), which affects all WebViews.
 */

@@ -1,6 +1,6 @@
 {
     checkThread();
-    if (DebugFlags.TRACE_API)
+    if (TRACE)
         Log.d(LOGTAG, "onPause");
     mProvider.onPause();
 }

Find a functionally equivalent code:com.android.server.connectivity.Vpn.prepare:COMMENT
Method Modifier: public      
Comment:/**
 * Prepare for a VPN application. This method is designed to solve
 * race conditions. It first compares the current prepared package
 * with {@code oldPackage}. If they are the same, the prepared
 * package is revoked and replaced with {@code newPackage}. If
 * {@code oldPackage} is {@code null}, the comparison is omitted.
 * If {@code newPackage} is the same package or {@code null}, the
 * revocation is omitted. This method returns {@code true} if the
 * operation is succeeded.
 *
 * Legacy VPN is handled specially since it is not a real package.
 * It uses {@link VpnConfig#LEGACY_VPN} as its package name, and
 * it can be revoked by itself.
 *
 * @param oldPackage The package name of the old VPN application.
 * @param newPackage The package name of the new VPN application.
 * @return true if the operation is succeeded.
 */

@@ -1,68 +1,18 @@
 {
-    // Return false if the package does not match.
-    if (oldPackage != null && !oldPackage.equals(mPackage)) {
-        // to force user authorization. Otherwise, revoke the VPN anyway.
+    if (oldPackage != null && getAppUid(oldPackage, mUserHandle) != mOwnerUID) {
+        // has already consented to that VPN package.
         if (!oldPackage.equals(VpnConfig.LEGACY_VPN) && isVpnUserPreConsented(oldPackage)) {
-            long token = Binder.clearCallingIdentity();
-            try {
-                // This looks bizarre, but it is what ConfirmDialog in VpnDialogs is doing when
-                // the user clicks through to allow the VPN to consent. So we are emulating the
-                // action of the dialog without actually showing it.
-                prepare(null, oldPackage);
-            } finally {
-                Binder.restoreCallingIdentity(token);
-            }
+            prepareInternal(oldPackage);
             return true;
         }
         return false;
     }
     // Return true if we do not need to revoke.
-    if (newPackage == null || (newPackage.equals(mPackage) && !newPackage.equals(VpnConfig.LEGACY_VPN))) {
+    if (newPackage == null || (!newPackage.equals(VpnConfig.LEGACY_VPN) && getAppUid(newPackage, mUserHandle) == mOwnerUID)) {
         return true;
     }
     // Check if the caller is authorized.
     enforceControlPermission();
-    // Reset the interface.
-    if (mInterface != null) {
-        mStatusIntent = null;
-        agentDisconnect();
-        jniReset(mInterface);
-        mInterface = null;
-        mVpnUsers = null;
-    }
-    // Revoke the connection or stop LegacyVpnRunner.
-    if (mConnection != null) {
-        try {
-            mConnection.mService.transact(IBinder.LAST_CALL_TRANSACTION, Parcel.obtain(), null, IBinder.FLAG_ONEWAY);
-        } catch (Exception e) {
-        // ignore
-        }
-        mContext.unbindService(mConnection);
-        mConnection = null;
-    } else if (mLegacyVpnRunner != null) {
-        mLegacyVpnRunner.exit();
-        mLegacyVpnRunner = null;
-    }
-    long token = Binder.clearCallingIdentity();
-    try {
-        mNetd.denyProtect(mOwnerUID);
-    } catch (Exception e) {
-        Log.wtf(TAG, "Failed to disallow UID " + mOwnerUID + " to call protect() " + e);
-    } finally {
-        Binder.restoreCallingIdentity(token);
-    }
-    Log.i(TAG, "Switched from " + mPackage + " to " + newPackage);
-    mPackage = newPackage;
-    mOwnerUID = getAppUid(newPackage, mUserHandle);
-    token = Binder.clearCallingIdentity();
-    try {
-        mNetd.allowProtect(mOwnerUID);
-    } catch (Exception e) {
-        Log.wtf(TAG, "Failed to allow UID " + mOwnerUID + " to call protect() " + e);
-    } finally {
-        Binder.restoreCallingIdentity(token);
-    }
-    mConfig = null;
-    updateState(DetailedState.IDLE, "prepare");
+    prepareInternal(newPackage);
     return true;
 }

Find a functionally equivalent code:android.media.AudioService.handleConfigurationChanged:COMMENT
Method Modifier: private     
Comment:/**
 * Handles device configuration changes that may map to a change in the orientation
 * or orientation.
 * Monitoring orientation and rotation is optional, and is defined by the definition and value
 * of the "ro.audio.monitorOrientation" and "ro.audio.monitorRotation" system properties.
 */

@@ -14,37 +14,41 @@
         sendMsg(mAudioHandler, MSG_CONFIGURE_SAFE_MEDIA_VOLUME, SENDMSG_REPLACE, 0, 0, null, 0);
         boolean cameraSoundForced = mContext.getResources().getBoolean(com.android.internal.R.bool.config_camera_sound_forced);
         synchronized (mSettingsLock) {
+            boolean cameraSoundForcedChanged = false;
             synchronized (mCameraSoundForced) {
                 if (cameraSoundForced != mCameraSoundForced) {
                     mCameraSoundForced = cameraSoundForced;
-                    if (!isPlatformTelevision()) {
-                        VolumeStreamState s = mStreamStates[AudioSystem.STREAM_SYSTEM_ENFORCED];
-                        if (cameraSoundForced) {
-                            s.setAllIndexesToMax();
-                            mRingerModeAffectedStreams &= ~(1 << AudioSystem.STREAM_SYSTEM_ENFORCED);
-                        } else {
-                            s.setAllIndexes(mStreamStates[AudioSystem.STREAM_SYSTEM]);
-                            mRingerModeAffectedStreams |= (1 << AudioSystem.STREAM_SYSTEM_ENFORCED);
-                        }
-                        // take new state into account for streams muted by ringer mode
-                        setRingerModeInt(getRingerMode(), false);
+                    cameraSoundForcedChanged = true;
+                }
+            }
+            if (cameraSoundForcedChanged) {
+                if (!isPlatformTelevision()) {
+                    VolumeStreamState s = mStreamStates[AudioSystem.STREAM_SYSTEM_ENFORCED];
+                    if (cameraSoundForced) {
+                        s.setAllIndexesToMax();
+                        mRingerModeAffectedStreams &= ~(1 << AudioSystem.STREAM_SYSTEM_ENFORCED);
+                    } else {
+                        s.setAllIndexes(mStreamStates[AudioSystem.STREAM_SYSTEM]);
+                        mRingerModeAffectedStreams |= (1 << AudioSystem.STREAM_SYSTEM_ENFORCED);
                     }
-                    sendMsg(mAudioHandler, MSG_SET_FORCE_USE, SENDMSG_QUEUE, AudioSystem.FOR_SYSTEM, cameraSoundForced ? AudioSystem.FORCE_SYSTEM_ENFORCED : AudioSystem.FORCE_NONE, null, 0);
-                    sendMsg(mAudioHandler, MSG_SET_ALL_VOLUMES, SENDMSG_QUEUE, 0, 0, mStreamStates[AudioSystem.STREAM_SYSTEM_ENFORCED], 0);
+                    // take new state into account for streams muted by ringer mode
+                    setRingerModeInt(getRingerModeInternal(), false);
                 }
+                sendMsg(mAudioHandler, MSG_SET_FORCE_USE, SENDMSG_QUEUE, AudioSystem.FOR_SYSTEM, cameraSoundForced ? AudioSystem.FORCE_SYSTEM_ENFORCED : AudioSystem.FORCE_NONE, null, 0);
+                sendMsg(mAudioHandler, MSG_SET_ALL_VOLUMES, SENDMSG_QUEUE, 0, 0, mStreamStates[AudioSystem.STREAM_SYSTEM_ENFORCED], 0);
             }
         }
         mVolumeController.setLayoutDirection(config.getLayoutDirection());

Find a functionally equivalent code:com.android.keyguard.KeyguardViewBase.onResume:COMMENT
Method Modifier: public      
Comment:/**
 * Called when the Keyguard is actively shown on the screen.
 */

@@ -1,7 +1,6 @@
 {
     if (DEBUG)
         Log.d(TAG, "screen on, instance " + Integer.toHexString(hashCode()));
-    mSecurityContainer.showPrimarySecurityScreen(false);
     mSecurityContainer.onResume(KeyguardSecurityView.SCREEN_ON);
     requestFocus();
 }

Find a functionally equivalent code:android.view.ViewGroup.dispatchTouchEvent:COMMENT
Method Modifier: public      
Comment:/**
 * {@inheritDoc}
 */

@@ -2,7 +2,11 @@
     if (mInputEventConsistencyVerifier != null) {
         mInputEventConsistencyVerifier.onTouchEvent(ev, 1);
     }
+    // normal event dispatch. Maybe a descendant is what will handle the click.
+    if (ev.isTargetAccessibilityFocus() && isAccessibilityFocusedViewOrHost()) {
+        ev.setTargetAccessibilityFocus(false);
+    }
     boolean handled = false;
     if (onFilterTouchEventForSecurity(ev)) {
         final int action = ev.getAction();
@@ -30,35 +34,43 @@
             // so this view group continues to intercept touches.
             intercepted = true;
         }
+        // a view that is handling the gesture, do normal event dispatch.
+        if (intercepted || mFirstTouchTarget != null) {
+            ev.setTargetAccessibilityFocus(false);
+        }
         // Check for cancelation.
         final boolean canceled = resetCancelNextUpFlag(this) || actionMasked == MotionEvent.ACTION_CANCEL;
         // Update list of touch targets for pointer down, if needed.
@@ -37,42 +45,56 @@
         TouchTarget newTouchTarget = null;
         boolean alreadyDispatchedToNewTouchTarget = false;
         if (!canceled && !intercepted) {
+            // If the event is targeting accessiiblity focus we give it to the
+            // view that has accessibility focus and if it does not handle it
+            // we clear the flag and dispatch the event to all children as usual.
+            // We are looking up the accessibility focused host to avoid keeping
+            // state since these events are very rare.
+            View childWithAccessibilityFocus = ev.isTargetAccessibilityFocus() ? findChildWithAccessibilityFocus() : null;
             if (actionMasked == MotionEvent.ACTION_DOWN || (split && actionMasked == MotionEvent.ACTION_POINTER_DOWN) || actionMasked == MotionEvent.ACTION_HOVER_MOVE) {
                 // always 0 for down
                 final int actionIndex = ev.getActionIndex();
@@ -56,62 +70,85 @@
                     for (int i = childrenCount - 1; i >= 0; i--) {
                         final int childIndex = customOrder ? getChildDrawingOrder(childrenCount, i) : i;
                         final View child = (preorderedList == null) ? children[childIndex] : preorderedList.get(childIndex);
+                        // safer given the timeframe.
+                        if (childWithAccessibilityFocus != null) {
+                            if (childWithAccessibilityFocus != child) {
+                                continue;
+                            }
+                            childWithAccessibilityFocus = null;
+                            i = childrenCount - 1;
+                        }
                         if (!canViewReceivePointerEvents(child) || !isTransformedTouchPointInView(x, y, child, null)) {
+                            ev.setTargetAccessibilityFocus(false);
                             continue;
                         }
                         newTouchTarget = getTouchTarget(child);
@@ -87,92 +110,118 @@
                             alreadyDispatchedToNewTouchTarget = true;
                             break;
                         }
+                        // The accessibility focus didn't handle the event, so clear
+                        // the flag and do a normal dispatch to all children.
+                        ev.setTargetAccessibilityFocus(false);
                     }
                     if (preorderedList != null)
                         preorderedList.clear();

Find a functionally equivalent code:android.content.pm.RegisteredServicesCache.getAllServices:COMMENT
Method Modifier: public      
Comment:/**
 * @return a collection of {@link RegisteredServicesCache.ServiceInfo} objects for all
 * registered authenticators.
 */

@@ -3,9 +3,9 @@
         // Find user and lazily populate cache
         final UserServices<V> user = findOrCreateUserLocked(userId);
         if (user.services == null) {
-            generateServicesMap(userId);
+            generateServicesMap(null, userId);
         }
         return Collections.unmodifiableCollection(new ArrayList<ServiceInfo<V>>(user.services.values()));
     }

Find a functionally equivalent code:android.net.NetworkTemplate.matches:COMMENT
Method Modifier: public      
Comment:/**
 * Test if given {@link NetworkIdentity} matches this template.
 */

@@ -14,19 +14,21 @@
             return matchesMobileWildcard(ident);
         case MATCH_WIFI_WILDCARD:
             return matchesWifiWildcard(ident);
+        case MATCH_BLUETOOTH:
+            return matchesBluetooth(ident);
         default:
             throw new IllegalArgumentException("unknown network template");
     }

Find a functionally equivalent code:android.media.AudioService.isStreamMute:COMMENT
Method Modifier: public      
Comment:/**
 * get stream mute state.
 */

@@ -1,3 +1,8 @@
 {
-    return mStreamStates[streamType].isMuted();
+    if (streamType == AudioManager.USE_DEFAULT_STREAM_TYPE) {
+        streamType = getActiveStreamType(streamType);
+    }
+    synchronized (VolumeStreamState.class) {
+        return mStreamStates[streamType].isMuted_syncVSS();
+    }
 }

Find a functionally equivalent code:android.webkit.CookieManager.removeSessionCookie:COMMENT
<android.webkit.CookieManager: void removeSessionCookie()>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
Comment:/**
 * Removes all session cookies, which are cookies without an expiration
 * date.
 * @deprecated use {@link #removeSessionCookies(ValueCallback)} instead.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebSettings.setPluginsEnabled:COMMENT
<android.webkit.WebSettings: void setPluginsEnabled(boolean)>
Method Modifier: public      abstract    hidden      deprecated  
Method Modifier: Yes         No          Yes         Yes         
Method Updated:  Yes         Yes         Yes         Yes         
Comment:/**
 * Sets whether the WebView should enable plugins. The default is false.
 *
 * @param flag true if plugins should be enabled
 * @deprecated This method has been deprecated in favor of
 * {@link #setPluginState}
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.CookieManager.setCookie:COMMENT
<android.webkit.CookieManager: void setCookie(String,String,ValueCallback<Boolean>)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets a cookie for the given URL. Any existing cookie with the same host,
 * path and name will be replaced with the new cookie. The cookie being set
 * will be ignored if it is expired.
 * <p>
 * This method is asynchronous.
 * If a {@link ValueCallback} is provided,
 * {@link ValueCallback#onReceiveValue(T) onReceiveValue()} will be called on the current
 * thread's {@link android.os.Looper} once the operation is complete.
 * The value provided to the callback indicates whether the cookie was set successfully.
 * You can pass {@code null} as the callback if you don't need to know when the operation
 * completes or whether it succeeded, and in this case it is safe to call the method from a
 * thread without a Looper.
 *
 * @param url the URL for which the cookie is to be set
 * @param value the cookie as a string, using the format of the 'Set-Cookie'
 * HTTP response header
 * @param callback a callback to be executed when the cookie has been set
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebSettings.getPluginsEnabled:COMMENT
<android.webkit.WebSettings: boolean getPluginsEnabled()>
Method Modifier: public      abstract    hidden      deprecated  
Method Modifier: Yes         No          Yes         Yes         
Method Updated:  Yes         Yes         Yes         Yes         
Comment:/**
 * Gets whether plugins are enabled.
 *
 * @return true if plugins are enabled
 * @see #setPluginsEnabled
 * @deprecated This method has been replaced by {@link #getPluginState}
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebSettings.setAcceptThirdPartyCookies:COMMENT
<android.webkit.WebSettings: void setAcceptThirdPartyCookies(boolean)>
Method Modifier: public      abstract    hidden      
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
Comment:/**
 * Sets policy for third party cookies.
 * Developers should access this via {@link CookieManager#setShouldAcceptThirdPartyCookies}.
 * @hide Internal API.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebSettings.getCursiveFontFamily:COMMENT
<android.webkit.WebSettings: String getCursiveFontFamily()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets the cursive font family name.
 *
 * @return the cursive font family name as a string
 * @see #setCursiveFontFamily
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.animation.PropertyValuesHolder.setupSetterOrGetter:COMMENT
Method Modifier: private     
Comment:/**
 * Returns the setter or getter requested. This utility function checks whether the
 * requested method exists in the propertyMapMap cache. If not, it calls another
 * utility function to request the Method from the targetClass directly.
 * @param targetClass The Class on which the requested method should exist.
 * @param propertyMapMap The cache of setters/getters derived so far.
 * @param prefix "set" or "get", for the setter or getter.
 * @param valueType The type of parameter passed into the method (null for getter).
 * @return Method the method associated with mPropertyName.
 */

@@ -1,15 +1,18 @@
 {
     Method setterOrGetter = null;
-    try {
+    synchronized (propertyMapMap) {
         // Have to lock property map prior to reading it, to guard against
         // another thread putting something in there after we've checked it
         // but before we've added an entry to it
-        mPropertyMapLock.writeLock().lock();
         HashMap<String, Method> propertyMap = propertyMapMap.get(targetClass);
+        boolean wasInMap = false;
         if (propertyMap != null) {
-            setterOrGetter = propertyMap.get(mPropertyName);
+            wasInMap = propertyMap.containsKey(mPropertyName);
+            if (wasInMap) {
+                setterOrGetter = propertyMap.get(mPropertyName);
+            }
         }
-        if (setterOrGetter == null) {
+        if (!wasInMap) {
             setterOrGetter = getPropertyFunction(targetClass, prefix, valueType);
             if (propertyMap == null) {
                 propertyMap = new HashMap<String, Method>();
@@ -17,24 +20,25 @@
             }
             propertyMap.put(mPropertyName, setterOrGetter);
         }
-    } finally {
-        mPropertyMapLock.writeLock().unlock();
     }
     return setterOrGetter;
 }

Find a functionally equivalent code:com.android.server.wm.WindowState.isVisibleNow:COMMENT
Method Modifier: 
Comment:/**
 * The same as isVisible(), but follows the current hidden state of
 * the associated app token, not the pending requested hidden state.
 */

@@ -1,3 +1,3 @@
 {
-    return mHasSurface && mPolicyVisibility && !mAttachedHidden && !mRootToken.hidden && !mExiting && !mDestroying;
+    return mHasSurface && mPolicyVisibility && !mAttachedHidden && (!mRootToken.hidden || mAttrs.type == TYPE_APPLICATION_STARTING) && !mExiting && !mDestroying;
 }

Find a functionally equivalent code:com.android.server.am.ActivityStack.completeResumeLocked:COMMENT
Method Modifier: private     
Comment:/**
 * Once we know that we have asked an application to put an activity in
 * the resumed state (either by launching it or explicitly telling it),
 * this function updates the rest of our state to match that fact.
 */

@@ -24,33 +24,29 @@
         // Couldn't get the cpu time of process
         next.cpuTimeAtResume = 0;
     }
-    // updated, so invalidate the last screenshot to ensure we take a fresh one when requested
-    if (next == mLastScreenshotActivity) {
-        invalidateLastScreenshot();
-    }
     next.returningOptions = null;
     if (mActivityContainer.mActivityDisplay.mVisibleBehindActivity == next) {
         // When resuming an activity, require it to call requestVisibleBehind() again.

Find a functionally equivalent code:android.webkit.WebViewDatabase.clearFormData:COMMENT
<android.webkit.WebViewDatabase: void clearFormData()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Clears any saved data for web forms.
 *
 * @see #hasFormData
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.internal.app.ResolverActivity.getReplacementIntent:COMMENT
Method Modifier: public      internal    
Comment:/**
 * Replace me in subclasses!
 */


Find a functionally equivalent code:android.widget.DayPickerView.setUpListView:COMMENT
<android.widget.DayPickerView: void setUpListView()>
Method Modifier: protected   private     
Method Modifier: Yes         No          
Method Updated:  No          Yes         
Comment:/*
     * Sets all the required fields for the list view. Override this method to
     * set a different list view behavior.
     */

@@ -11,15 +11,15 @@
     setOnScrollListener(this);
     setFadingEdgeLength(0);
     // Make the scrolling behavior nicer
-    setFriction(ViewConfiguration.getScrollFriction() * mFriction);
+    setFriction(ViewConfiguration.getScrollFriction());
 }

Find a functionally equivalent code:android.webkit.WebSettings.setAppCacheMaxSize:COMMENT
<android.webkit.WebSettings: void setAppCacheMaxSize(long)>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
Comment:/**
 * Sets the maximum size for the Application Cache content. The passed size
 * will be rounded to the nearest value that the database can support, so
 * this should be viewed as a guide, not a hard limit. Setting the
 * size to a value less than current database size does not cause the
 * database to be trimmed. The default size is {@link Long#MAX_VALUE}.
 * It is recommended to leave the maximum size set to the default value.
 *
 * @param appCacheMaxSize the maximum size in bytes
 * @deprecated In future quota will be managed automatically.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebSettings.setAllowContentAccess:COMMENT
<android.webkit.WebSettings: void setAllowContentAccess(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Enables or disables content URL access within WebView.  Content URL
 * access allows WebView to load content from a content provider installed
 * in the system. The default is enabled.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.internal.telephony.CallerInfoAsyncQuery.startQuery:COMMENT
Method Modifier: public      static      internal    
Comment:/**
 * Factory method to start query with a Uri query spec
 */


Find a functionally equivalent code:android.appwidget.AppWidgetHost.startListening:COMMENT
Method Modifier: public      
Comment:/**
 * Start receiving onAppWidgetChanged calls for your AppWidgets.  Call this when your activity
 * becomes visible, i.e. from onStart() in your Activity.
 */

@@ -2,8 +2,8 @@
     int[] updatedIds;
     ArrayList<RemoteViews> updatedViews = new ArrayList<RemoteViews>();
     try {
-        updatedIds = sService.startListening(mCallbacks, mContext.getOpPackageName(), mHostId, updatedViews);
+        updatedIds = sService.startListening(mCallbacks, mContextOpPackageName, mHostId, updatedViews);
     } catch (RemoteException e) {
         throw new RuntimeException("system server dead?", e);
     }

Find a functionally equivalent code:android.app.Activity.invalidateOptionsMenu:COMMENT
Method Modifier: public      
Comment:/**
 * Declare that the options menu has changed, so should be recreated.
 * The {@link #onCreateOptionsMenu(Menu)} method will be called the next
 * time it needs to be displayed.
 */

@@ -1,5 +1,5 @@
 {
-    if (mActionBar == null || !mActionBar.invalidateOptionsMenu()) {
+    if (mWindow.hasFeature(Window.FEATURE_OPTIONS_PANEL) && (mActionBar == null || !mActionBar.invalidateOptionsMenu())) {
         mWindow.invalidatePanelMenu(Window.FEATURE_OPTIONS_PANEL);
     }
 }

Find a functionally equivalent code:com.android.systemui.recents.model.TaskStack.setTasks:COMMENT
Method Modifier: public      
Comment:/**
 * Sets a few tasks in one go
 */

@@ -11,16 +11,18 @@
         if (group.getTaskCount() == 0) {
             removeGroup(group);
         }
+        // Update the lock-to-app state
+        t.lockToThisTask = false;
         if (mCb != null) {
             // Notify that a task has been removed
             mCb.onStackTaskRemoved(this, t, null);

Find a functionally equivalent code:android.webkit.WebSettings.setSupportMultipleWindows:COMMENT
<android.webkit.WebSettings: void setSupportMultipleWindows(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets whether the WebView whether supports multiple windows. If set to
 * true, {@link WebChromeClient#onCreateWindow} must be implemented by the
 * host application. The default is false.
 *
 * @param support whether to suport multiple windows
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.widget.SearchView.rewriteQueryFromSuggestion:COMMENT
Method Modifier: private     
Comment:/**
 * Query rewriting.
 */

@@ -1,5 +1,5 @@
 {
-    CharSequence oldQuery = mQueryTextView.getText();
+    CharSequence oldQuery = mSearchSrcTextView.getText();
     Cursor c = mSuggestionsAdapter.getCursor();
     if (c == null) {
         return;

Find a functionally equivalent code:com.android.systemui.recents.views.TaskStackView.onFirstLayout:COMMENT
Method Modifier: 
Comment:/**
 * Handler for the first layout.
 */

@@ -24,35 +24,37 @@
         mStartEnterAnimationRequestedAfterLayout = false;
         mStartEnterAnimationContext = null;
     }
-    // When Alt-Tabbing, we scroll to and focus the previous task
+    // enter animation).
     if (mConfig.launchedWithAltTab) {
-        if (mConfig.launchedFromHome) {
-            focusTask(Math.max(0, mStack.getTaskCount() - 1), false);
+        if (mConfig.launchedFromAppWithThumbnail) {
+            focusTask(Math.max(0, mStack.getTaskCount() - 2), false, mConfig.launchedHasConfigurationChanged);
         } else {
-            focusTask(Math.max(0, mStack.getTaskCount() - 2), false);
+            focusTask(Math.max(0, mStack.getTaskCount() - 1), false, mConfig.launchedHasConfigurationChanged);
         }
     }
+    // Start dozing
+    mUIDozeTrigger.startDozing();
 }

Find a functionally equivalent code:com.android.systemui.recents.views.TaskView.setClipViewInStack:COMMENT
Method Modifier: 
Comment:/**
 * Sets whether this view should be clipped, or clipped against.
 */

@@ -1,6 +1,8 @@
 {
     if (clip != mClipViewInStack) {
         mClipViewInStack = clip;
-        mCb.onTaskViewClipStateChanged(this);
+        if (mCb != null) {
+            mCb.onTaskViewClipStateChanged(this);
+        }
     }
 }

Find a functionally equivalent code:android.content.pm.ParceledListSlice.writeToParcel:COMMENT
Method Modifier: public      
Comment:/**
 * Write this to another Parcel. Note that this discards the internal Parcel
 * and should not be used anymore. This is so we can pass this to a Binder
 * where we won't have a chance to call recycle on this.
 */

@@ -5,15 +5,18 @@
     if (DEBUG)
         Log.d(TAG, "Writing " + N + " items");
     if (N > 0) {
+        final Class<?> listElementClass = mList.get(0).getClass();
         dest.writeParcelableCreator(mList.get(0));
         int i = 0;
         while (i < N && dest.dataSize() < MAX_FIRST_IPC_SIZE) {
             dest.writeInt(1);
-            mList.get(i).writeToParcel(dest, callFlags);
+            final T parcelable = mList.get(i);
+            verifySameType(listElementClass, parcelable.getClass());
+            parcelable.writeToParcel(dest, callFlags);
             if (DEBUG)
                 Log.d(TAG, "Wrote inline #" + i + ": " + mList.get(i));
             i++;
@@ -28,34 +31,39 @@
                         Log.d(TAG, "Writing more @" + i + " of " + N);
                     while (i < N && reply.dataSize() < MAX_IPC_SIZE) {
                         reply.writeInt(1);
-                        mList.get(i).writeToParcel(reply, callFlags);
+                        final T parcelable = mList.get(i);
+                        verifySameType(listElementClass, parcelable.getClass());
+                        parcelable.writeToParcel(reply, callFlags);
                         if (DEBUG)
                             Log.d(TAG, "Wrote extra #" + i + ": " + mList.get(i));
                         i++;

Find a functionally equivalent code:android.webkit.WebView.postUrl:COMMENT
Method Modifier: public      
Comment:/**
 * Loads the URL with postData using "POST" method into this WebView. If url
 * is not a network URL, it will be loaded with {@link #loadUrl(String)}
 * instead, ignoring the postData param.
 *
 * @param url the URL of the resource to load
 * @param postData the data will be passed to "POST" request, which must be
 * be "application/x-www-form-urlencoded" encoded.
 */

@@ -1,6 +1,6 @@
 {
     checkThread();
-    if (DebugFlags.TRACE_API)
+    if (TRACE)
         Log.d(LOGTAG, "postUrl=" + url);
     if (URLUtil.isNetworkUrl(url)) {
         mProvider.postUrl(url, postData);

Find a functionally equivalent code:com.android.systemui.recents.views.TaskStackViewScroller.animateScroll:COMMENT
Method Modifier: 
Comment:/**
 * Animates the stack scroll
 */

@@ -1,7 +1,12 @@
 {
-    // Abort any current animations
+    // Finish any current scrolling animations
+    if (mScrollAnimator != null && mScrollAnimator.isRunning()) {
+        setStackScroll(mFinalAnimatedScroll);
+        mScroller.startScroll(0, progressToScrollRange(mFinalAnimatedScroll), 0, 0, 0);
+    }
     stopScroller();
     stopBoundScrollAnimation();
+    mFinalAnimatedScroll = newScroll;
     mScrollAnimator = ObjectAnimator.ofFloat(this, "stackScroll", curScroll, newScroll);
     mScrollAnimator.setDuration(mConfig.taskStackScrollDuration);
     mScrollAnimator.setInterpolator(mConfig.linearOutSlowInInterpolator);

Find a functionally equivalent code:android.webkit.WebSettings.setSerifFontFamily:COMMENT
<android.webkit.WebSettings: void setSerifFontFamily(String)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets the serif font family name. The default is "sans-serif".
 *
 * @param font a font family name
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.graphics.drawable.RippleBackground.draw:COMMENT
Method Modifier: public      
Comment:/**
 * Draws the ripple centered at (0,0) using the specified paint.
 */

@@ -1,4 +1,5 @@
 {
+    mColor = p.getColor();
     final boolean canUseHardware = c.isHardwareAccelerated();
     if (mCanUseHardware != canUseHardware && mCanUseHardware) {
         // We've switched from hardware to non-hardware mode. Panic.
@@ -6,13 +7,14 @@
     }
     mCanUseHardware = canUseHardware;
     final boolean hasContent;
-    if (canUseHardware && mHardwareAnimating) {
-        hasContent = drawHardware((HardwareCanvas) c);
+    if (canUseHardware && (mHardwareAnimating || mHasPendingHardwareExit)) {
+        hasContent = drawHardware((HardwareCanvas) c, p);
     } else {
         hasContent = drawSoftware(c, p);
     }

Find a functionally equivalent code:com.android.systemui.recents.views.SystemBarScrimViews.startEnterRecentsAnimation:COMMENT
Method Modifier: public      
Comment:/**
 * Starts animating the scrim views when entering Recents.
 */

@@ -1,7 +1,7 @@
 {
     if (mHasStatusBarScrim && mShouldAnimateStatusBarScrim) {
         mStatusBarScrimView.setTranslationY(-mStatusBarScrimView.getMeasuredHeight());
-        mStatusBarScrimView.animate().translationY(0).setStartDelay(mConfig.taskBarEnterAnimDelay).setDuration(mConfig.navBarScrimEnterDuration).setInterpolator(mConfig.quintOutInterpolator).withStartAction(new Runnable() {
+        mStatusBarScrimView.animate().translationY(0).setStartDelay(mConfig.launchedFromHome ? mConfig.transitionEnterFromHomeDelay : mConfig.transitionEnterFromAppDelay).setDuration(mConfig.navBarScrimEnterDuration).setInterpolator(mConfig.quintOutInterpolator).withStartAction(new Runnable() {
 
             @Override
             public void run() {
@@ -11,17 +11,17 @@
     }
     if (mHasNavBarScrim && mShouldAnimateNavBarScrim) {
         mNavBarScrimView.setTranslationY(mNavBarScrimView.getMeasuredHeight());
-        mNavBarScrimView.animate().translationY(0).setStartDelay(mConfig.taskBarEnterAnimDelay).setDuration(mConfig.navBarScrimEnterDuration).setInterpolator(mConfig.quintOutInterpolator).withStartAction(new Runnable() {
+        mNavBarScrimView.animate().translationY(0).setStartDelay(mConfig.launchedFromHome ? mConfig.transitionEnterFromHomeDelay : mConfig.transitionEnterFromAppDelay).setDuration(mConfig.navBarScrimEnterDuration).setInterpolator(mConfig.quintOutInterpolator).withStartAction(new Runnable() {
 
             @Override
             public void run() {

Find a functionally equivalent code:com.android.internal.policy.impl.PhoneWindowManager.interceptKeyBeforeDispatching:COMMENT
Method Modifier: public      internal    
Comment:/**
 * {@inheritDoc}
 */

@@ -11,26 +11,26 @@
     }
     // try again later before dispatching.
     if (mScreenshotChordEnabled && (flags & KeyEvent.FLAG_FALLBACK) == 0) {
-        if (mVolumeDownKeyTriggered && !mPowerKeyTriggered) {
+        if (mScreenshotChordVolumeDownKeyTriggered && !mScreenshotChordPowerKeyTriggered) {
             final long now = SystemClock.uptimeMillis();
-            final long timeoutTime = mVolumeDownKeyTime + SCREENSHOT_CHORD_DEBOUNCE_DELAY_MILLIS;
+            final long timeoutTime = mScreenshotChordVolumeDownKeyTime + SCREENSHOT_CHORD_DEBOUNCE_DELAY_MILLIS;
             if (now < timeoutTime) {
                 return timeoutTime - now;
             }
         }
-        if (keyCode == KeyEvent.KEYCODE_VOLUME_DOWN && mVolumeDownKeyConsumedByScreenshotChord) {
+        if (keyCode == KeyEvent.KEYCODE_VOLUME_DOWN && mScreenshotChordVolumeDownKeyConsumed) {
             if (!down) {
-                mVolumeDownKeyConsumedByScreenshotChord = false;
+                mScreenshotChordVolumeDownKeyConsumed = false;
             }
             return -1;
         }
@@ -59,71 +59,65 @@
                 mHandler.postDelayed(mHomeDoubleTapTimeoutRunnable, ViewConfiguration.getDoubleTapTimeout());
                 return -1;
             }
-            // but don't actually go home.
-            if (mDreamManagerInternal != null && mDreamManagerInternal.isDreaming()) {
-                mDreamManagerInternal.stopDream(false);
-                return -1;
-            }
-            // Go home!
-            launchHomeFromHotKey();
+            handleShortPressOnHome();
             return -1;
         }
         // If a system window has focus, then it doesn't make sense
@@ -286,292 +280,286 @@
         mLanguageSwitchKeyPressed = false;
         return -1;
     }
-    if (mGlobalKeyManager.handleGlobalKey(mContext, keyCode, event)) {
+    if (isValidGlobalKey(keyCode) && mGlobalKeyManager.handleGlobalKey(mContext, keyCode, event)) {
         return -1;
     }
     // Reserve all the META modifier combos for system behavior

Find a functionally equivalent code:com.android.server.SystemServer.startBootstrapServices:COMMENT
Method Modifier: private     
Comment:/**
 * Starts the small tangle of critical services that are needed to get
 * the system off the ground.  These services have complex mutual dependencies
 * which is why we initialize them all in one place here.  Unless your service
 * is also entwined in these dependencies, it should be initialized in one of
 * the other functions.
 */

@@ -2,11 +2,12 @@
     // Wait for installd to finish starting up so that it has a chance to
     // create critical directories such as /data/user with the appropriate
     // permissions.  We need this to complete before we initialize other services.
-    mInstaller = mSystemServiceManager.startService(Installer.class);
+    Installer installer = mSystemServiceManager.startService(Installer.class);
     // Activity manager runs the show.
     mActivityManagerService = mSystemServiceManager.startService(ActivityManagerService.Lifecycle.class).getService();
     mActivityManagerService.setSystemServiceManager(mSystemServiceManager);
+    mActivityManagerService.setInstaller(installer);
     // Power manager needs to be started early because other services need it.
     // Native daemons may be watching for it to be registered so it must be ready
     // to handle incoming binder calls immediately (including being able to verify
@@ -30,36 +31,37 @@
     }
     // Start the package manager.
     Slog.i(TAG, "Package Manager");
-    mPackageManagerService = PackageManagerService.main(mSystemContext, mInstaller, mFactoryTestMode != FactoryTest.FACTORY_TEST_OFF, mOnlyCore);
+    mPackageManagerService = PackageManagerService.main(mSystemContext, installer, mFactoryTestMode != FactoryTest.FACTORY_TEST_OFF, mOnlyCore);
     mFirstBoot = mPackageManagerService.isFirstBoot();
     mPackageManager = mSystemContext.getPackageManager();
     Slog.i(TAG, "User Service");

Find a functionally equivalent code:android.widget.ImageView.animateTransform:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * @hide
 */

@@ -1,4 +1,7 @@
 {
+    if (mDrawable == null) {
+        return;
+    }
     if (matrix == null) {
         mDrawable.setBounds(0, 0, getWidth(), getHeight());
     } else {

Find a functionally equivalent code:android.graphics.drawable.GradientDrawable.updateStateFromTypedArray:COMMENT
Method Modifier: private     
Comment:/**
 * Updates the constant state from the values in the typed array.
 */

@@ -17,20 +17,29 @@
         }
         state.mUseLevelForShape = a.getBoolean(R.styleable.GradientDrawable_useLevel, state.mUseLevelForShape);
     }
+    final int tintMode = a.getInt(R.styleable.GradientDrawable_tintMode, -1);
+    if (tintMode != -1) {
+        state.mTintMode = Drawable.parseTintMode(tintMode, PorterDuff.Mode.SRC_IN);
+    }
+    final ColorStateList tint = a.getColorStateList(R.styleable.GradientDrawable_tint);
+    if (tint != null) {
+        state.mTint = tint;
+    }
+    mTintFilter = updateTintFilter(mTintFilter, state.mTint, state.mTintMode);
 }

Find a functionally equivalent code:android.text.TextLine.recycle:COMMENT
Method Modifier: default     static      
Comment:/**
 * Puts a TextLine back into the shared pool. Do not use this TextLine once
 * it has been returned.
 * @param tl the textLine
 * @return null, as a convenience from clearing references to the provided
 * TextLine
 */

@@ -2,7 +2,10 @@
     tl.mText = null;
     tl.mPaint = null;
     tl.mDirections = null;
+    tl.mSpanned = null;
+    tl.mTabs = null;
+    tl.mChars = null;
     tl.mMetricAffectingSpanSpanSet.recycle();
     tl.mCharacterStyleSpanSet.recycle();
     tl.mReplacementSpanSpanSet.recycle();

Find a functionally equivalent code:android.webkit.WebSettings.getCacheMode:COMMENT
<android.webkit.WebSettings: int getCacheMode()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets the current setting for overriding the cache mode.
 *
 * @return the current setting for overriding the cache mode
 * @see #setCacheMode
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebHistoryItem.getTitle:COMMENT
<android.webkit.WebHistoryItem: String getTitle()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Return the document title of this history item.
 * @return The document title of this history item.
 * Note: The VM ensures 32-bit atomic read/write operations so we don't have
 * to synchronize this method.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.os.Debug.getPss:COMMENT
Method Modifier: public      static      native      
Comment:/**
 * Retrieves the PSS memory used by the process as given by the
 * smaps.
 */


Find a functionally equivalent code:android.widget.PopupWindow.setContentView:COMMENT
Method Modifier: public      
Comment:/**
 * <p>Change the popup's content. The content is represented by an instance
 * of {@link android.view.View}.</p>
 *
 * <p>This method has no effect if called when the popup is showing.</p>
 *
 * @param contentView the new content for the popup
 *
 * @see #getContentView()
 * @see #isShowing()
 */

@@ -9,12 +9,19 @@
     if (mWindowManager == null && mContentView != null) {
         mWindowManager = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);
     }
+    // app hasn't already set the attachedInDecor.
+    if (mContext != null && !mAttachedInDecorSet) {
+        // Attach popup window in decor frame of parent window by default for
+        // {@link Build.VERSION_CODES.LOLLIPOP_MR1} or greater. Keep current
+        // behavior of not attaching to decor frame for older SDKs.
+        setAttachedInDecor(mContext.getApplicationInfo().targetSdkVersion >= Build.VERSION_CODES.LOLLIPOP_MR1);
+    }
 }

Find a functionally equivalent code:android.app.ApplicationPackageManager.loadItemIcon:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * @hide
 */

@@ -1,18 +1,7 @@
 {
+    Drawable dr = loadUnbadgedItemIcon(itemInfo, appInfo);
     if (itemInfo.showUserIcon != UserHandle.USER_NULL) {
-        Bitmap bitmap = getUserManager().getUserIcon(itemInfo.showUserIcon);
-        if (bitmap == null) {
-            return UserIcons.getDefaultUserIcon(itemInfo.showUserIcon, /* light= */
-            false);
-        }
-        return new BitmapDrawable(bitmap);
+        return dr;
     }
-    Drawable dr = null;
-    if (itemInfo.packageName != null) {
-        dr = getDrawable(itemInfo.packageName, itemInfo.icon, appInfo);
-    }
-    if (dr == null) {
-        dr = itemInfo.loadDefaultIcon(this);
-    }
     return getUserBadgedIcon(dr, new UserHandle(mContext.getUserId()));
 }

Find a functionally equivalent code:android.webkit.WebSettings.getTextZoom:COMMENT
<android.webkit.WebSettings: int getTextZoom()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets the text zoom of the page in percent.
 *
 * @return the text zoom of the page in percent
 * @see #setTextZoom
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.telephony.PhoneNumberUtils.isEmergencyNumberInternal:COMMENT
Method Modifier: private     static      
Comment:/**
 * Helper function for isEmergencyNumber(String) and
 * isPotentialEmergencyNumber(String).
 *
 * @param subId the subscription id of the SIM.
 * @param number the number to look up.
 *
 * @param useExactMatch if true, consider a number to be an emergency
 * number only if it *exactly* matches a number listed in
 * the RIL / SIM.  If false, a number is considered to be an
 * emergency number if it simply starts with the same digits
 * as any of the emergency numbers listed in the RIL / SIM.
 * (Setting useExactMatch to false allows you to identify
 * number that could *potentially* result in emergency calls
 * since many networks will actually ignore trailing digits
 * after a valid emergency number.)
 *
 * @return true if the number is in the list of emergency numbers
 * listed in the RIL / sim, otherwise return false.
 */


Find a functionally equivalent code:android.media.AudioService.setMasterMute:COMMENT
Method Modifier: public      
Comment:/**
 * @see AudioManager#setMasterMute(boolean, int)
 */

@@ -1,14 +1,3 @@
 {
-    if (mUseFixedVolume) {
-        return;
-    }
-    if (mAppOps.noteOp(AppOpsManager.OP_AUDIO_MASTER_VOLUME, Binder.getCallingUid(), callingPackage) != AppOpsManager.MODE_ALLOWED) {
-        return;
-    }
-    if (state != AudioSystem.getMasterMute()) {
-        AudioSystem.setMasterMute(state);
-        // Post a persist master volume msg
-        sendMsg(mAudioHandler, MSG_PERSIST_MASTER_VOLUME_MUTE, SENDMSG_REPLACE, state ? 1 : 0, UserHandle.getCallingUserId(), null, PERSIST_DELAY);
-        sendMasterMuteUpdate(state, flags);
-    }
+    setMasterMuteInternal(state, flags, callingPackage, cb, Binder.getCallingUid());
 }

Find a functionally equivalent code:android.webkit.WebSettings.getUseWideViewPort:COMMENT
<android.webkit.WebSettings: boolean getUseWideViewPort()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets whether the WebView supports the &quot;viewport&quot;
 * HTML meta tag or will use a wide viewport.
 *
 * @return true if the WebView supports the viewport meta tag
 * @see #setUseWideViewPort
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.net.Network.bindSocket:COMMENT
Method Modifier: public      
Comment:/**
 * Binds the specified {@link Socket} to this {@code Network}. All data traffic on the socket
 * will be sent on this {@code Network}, irrespective of any process-wide network binding set by
 * {@link ConnectivityManager#setProcessDefaultNetwork}. The socket must not be connected.
 */

@@ -1,13 +1,10 @@
 {
+    // Apparently, the kernel doesn't update a connected TCP socket's routing upon mark changes.
     if (socket.isConnected()) {
         throw new SocketException("Socket is connected");
     }
-    // Query a property of the underlying socket to ensure the underlying
-    // socket exists so a file descriptor is available to bind to a network.
+    // Query a property of the underlying socket to ensure that the socket's file descriptor
+    // exists, is available to bind to a network and is not closed.
     socket.getReuseAddress();
-    int err = NetworkUtils.bindSocketToNetwork(socket.getFileDescriptor$().getInt$(), netId);
-    if (err != 0) {
-        // bindSocketToNetwork returns negative errno.
-        throw new ErrnoException("Binding socket to network " + netId, -err).rethrowAsSocketException();
-    }
+    bindSocketFd(socket.getFileDescriptor$());
 }

Find a functionally equivalent code:com.android.server.wm.WindowStateAnimator.applyAnimationLocked:COMMENT
Method Modifier: 
Comment:/**
 * Choose the correct animation and set it to the passed WindowState.
 * @param transit If AppTransition.TRANSIT_PREVIEW_DONE and the app window has been drawn
 * then the animation will be app_starting_exit. Any other value loads the animation from
 * the switch statement below.
 * @param isEntrance The animation type the last time this was called. Used to keep from
 * loading the same animation twice.
 * @return true if an animation has been loaded.
 */

@@ -1,6 +1,9 @@
 {
-    if (mLocalAnimating && mAnimationIsEntrance == isEntrance) {
-        // an animation of the same type, then just leave that one alone.
+    if ((mLocalAnimating && mAnimationIsEntrance == isEntrance) || mKeyguardGoingAwayAnimation) {
+        // keyguard exit animation such that it also fades out.
+        if (mAnimation != null && mKeyguardGoingAwayAnimation && transit == WindowManagerPolicy.TRANSIT_PREVIEW_DONE) {
+            applyFadeoutDuringKeyguardExitAnimation();
+        }
         return true;
     }
     // is running.

Find a functionally equivalent code:android.webkit.WebSettings.setSavePassword:COMMENT
<android.webkit.WebSettings: void setSavePassword(boolean)>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
Comment:/**
 * Sets whether the WebView should save passwords. The default is true.
 * @deprecated Saving passwords in WebView will not be supported in future versions.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.systemui.recents.views.TaskStackView.startEnterRecentsAnimation:COMMENT
Method Modifier: public      
Comment:/**
 * Requests this task stacks to start it's enter-recents animation
 */

@@ -36,52 +36,61 @@
             @Override
             public void run() {
                 mStartEnterAnimationCompleted = true;
-                // Start dozing
-                mUIDozeTrigger.startDozing();
-                // Focus the first view if accessibility is enabled
+                // Poke the dozer to restart the trigger after the animation completes
+                mUIDozeTrigger.poke();
                 RecentsTaskLoader loader = RecentsTaskLoader.getInstance();
                 SystemServicesProxy ssp = loader.getSystemServicesProxy();
                 int childCount = getChildCount();
-                if (childCount > 0 && ssp.isTouchExplorationEnabled()) {
-                    TaskView tv = ((TaskView) getChildAt(childCount - 1));
-                    tv.requestAccessibilityFocus();
-                    mPrevAccessibilityFocusedIndex = mStack.indexOfTask(tv.getTask());
+                if (childCount > 0) {
+                    // Focus the first view if accessibility is enabled
+                    if (ssp.isTouchExplorationEnabled()) {
+                        TaskView tv = ((TaskView) getChildAt(childCount - 1));
+                        tv.requestAccessibilityFocus();
+                        mPrevAccessibilityFocusedIndex = mStack.indexOfTask(tv.getTask());
+                    }
                 }
+                // Start the focus animation when alt-tabbing
+                if (mConfig.launchedWithAltTab && !mConfig.launchedHasConfigurationChanged) {
+                    View tv = getChildAt(mFocusedTaskIndex);
+                    if (tv != null) {
+                        ((TaskView) tv).setFocusedTask(true);
+                    }
+                }
             }
         });
     }

Find a functionally equivalent code:android.webkit.WebSettings.getDefaultZoom:COMMENT
<android.webkit.WebSettings: ZoomDensity getDefaultZoom()>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
Comment:/**
 * Gets the default zoom density of the page. This should be called from
 * the UI thread.
 *
 * This setting is not recommended for use in new applications.
 *
 * @return the zoom density
 * @see #setDefaultZoom
 * @deprecated Will only return the default value.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.server.wm.InputMonitor.updateInputWindowsLw:COMMENT
Method Modifier: public      
Comment:/* Updates the cached window information provided to the input dispatcher. */

@@ -13,18 +13,19 @@
     final WindowStateAnimator universeBackground = mService.mAnimator.mUniverseBackground;
     final int aboveUniverseLayer = mService.mAnimator.mAboveUniverseLayer;
     boolean addedUniverse = false;
+    boolean disableWallpaperTouchEvents = false;
     // If there's a drag in flight, provide a pseudowindow to catch drag input
     final boolean inDrag = (mService.mDragState != null);
     if (inDrag) {
@@ -47,53 +48,57 @@
             final int type = child.mAttrs.type;
             final boolean hasFocus = (child == mInputFocus);
             final boolean isVisible = child.isVisibleLw();
-            final boolean hasWallpaper = (child == mService.mWallpaperTarget) && (privateFlags & WindowManager.LayoutParams.PRIVATE_FLAG_KEYGUARD) == 0;
+            if ((privateFlags & WindowManager.LayoutParams.PRIVATE_FLAG_DISABLE_WALLPAPER_TOUCH_EVENTS) != 0) {
+                disableWallpaperTouchEvents = true;
+            }
+            final boolean hasWallpaper = (child == mService.mWallpaperTarget) && (privateFlags & WindowManager.LayoutParams.PRIVATE_FLAG_KEYGUARD) == 0 && !disableWallpaperTouchEvents;
             final boolean onDefaultDisplay = (child.getDisplayId() == Display.DEFAULT_DISPLAY);
             // make sure it's been told about the drag
             if (inDrag && isVisible && onDefaultDisplay) {
@@ -56,67 +60,71 @@
             if (universeBackground != null && !addedUniverse && child.mBaseLayer < aboveUniverseLayer && onDefaultDisplay) {
                 final WindowState u = universeBackground.mWin;
                 if (u.mInputChannel != null && u.mInputWindowHandle != null) {
-                    addInputWindowHandleLw(u.mInputWindowHandle, u, u.mAttrs.flags, u.mAttrs.privateFlags, u.mAttrs.type, true, u == mInputFocus, false);
+                    addInputWindowHandleLw(u.mInputWindowHandle, u, u.mAttrs.flags, u.mAttrs.type, true, u == mInputFocus, false);
                 }
                 addedUniverse = true;
             }
             if (child.mWinAnimator != universeBackground) {
-                addInputWindowHandleLw(inputWindowHandle, child, flags, privateFlags, type, isVisible, hasFocus, hasWallpaper);
+                addInputWindowHandleLw(inputWindowHandle, child, flags, type, isVisible, hasFocus, hasWallpaper);
             }
         }
     }

Find a functionally equivalent code:android.media.AudioService.requestAudioFocus:COMMENT
Method Modifier: public      
Comment:// ==========================================================================================

@@ -1,3 +1,20 @@
 {
-    return mMediaFocusControl.requestAudioFocus(mainStreamType, durationHint, cb, fd, clientId, callingPackageName);
+    // permission checks
+    if ((flags & AudioManager.AUDIOFOCUS_FLAG_LOCK) == AudioManager.AUDIOFOCUS_FLAG_LOCK) {
+        if (mMediaFocusControl.IN_VOICE_COMM_FOCUS_ID.equals(clientId)) {
+            if (PackageManager.PERMISSION_GRANTED != mContext.checkCallingOrSelfPermission(android.Manifest.permission.MODIFY_PHONE_STATE)) {
+                Log.e(TAG, "Invalid permission to (un)lock audio focus", new Exception());
+                return AudioManager.AUDIOFOCUS_REQUEST_FAILED;
+            }
+        } else {
+            // only a registered audio policy can be used to lock focus
+            synchronized (mAudioPolicies) {
+                if (!mAudioPolicies.containsKey(pcb.asBinder())) {
+                    Log.e(TAG, "Invalid unregistered AudioPolicy to (un)lock audio focus");
+                    return AudioManager.AUDIOFOCUS_REQUEST_FAILED;
+                }
+            }
+        }
+    }
+    return mMediaFocusControl.requestAudioFocus(aa, durationHint, cb, fd, clientId, callingPackageName, flags);
 }

Find a functionally equivalent code:android.animation.ValueAnimator.reverse:COMMENT
Method Modifier: public      
Comment:/**
 * Plays the ValueAnimator in reverse. If the animation is already running,
 * it will stop itself and play backwards from the point reached when reverse was called.
 * If the animation is not currently running, then it will start from the end and
 * play backwards. This behavior is only set for the current animation; future playing
 * of the animation will use the default behavior of playing forward.
 */

@@ -5,10 +5,11 @@
         long currentPlayTime = currentTime - mStartTime;
         long timeLeft = mDuration - currentPlayTime;
         mStartTime = currentTime - timeLeft;
+        mReversing = !mReversing;
     } else if (mStarted) {
         end();
     } else {

Find a functionally equivalent code:android.bluetooth.BluetoothGatt.writeCharacteristic:COMMENT
Method Modifier: public      
Comment:/**
 * Writes a given characteristic and its values to the associated remote device.
 *
 * <p>Once the write operation has been completed, the
 * {@link BluetoothGattCallback#onCharacteristicWrite} callback is invoked,
 * reporting the result of the operation.
 *
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
 *
 * @param characteristic Characteristic to write on the remote device
 * @return true, if the write operation was initiated successfully
 */

@@ -3,9 +3,9 @@
         return false;
     if (VDBG)
         Log.d(TAG, "writeCharacteristic() - uuid: " + characteristic.getUuid());
-    if (mService == null || mClientIf == 0)
+    if (mService == null || mClientIf == 0 || characteristic.getValue() == null)
         return false;
     BluetoothGattService service = characteristic.getService();
     if (service == null)

Find a functionally equivalent code:android.webkit.WebIconDatabase.releaseIconForPageUrl:COMMENT
<android.webkit.WebIconDatabase: void releaseIconForPageUrl(String)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Release the icon for the given page url.
 * @param url The page's url.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.systemui.recents.views.TaskView.enableFocusAnimations:COMMENT
Method Modifier: 
Comment:/**
 * Enables all focus animations.
 */

@@ -3,8 +3,8 @@
     mFocusAnimationsEnabled = true;
     if (mIsFocused && !wasFocusAnimationsEnabled) {
         // Re-notify the header if we were focused and animations were not previously enabled
-        mHeaderView.onTaskViewFocusChanged(true);
+        mHeaderView.onTaskViewFocusChanged(true, true);
     }
 }

Find a functionally equivalent code:android.media.AudioService.setStreamSolo:COMMENT
Method Modifier: public      
Comment:/**
 * @see AudioManager#setStreamSolo(int, boolean)
 */

@@ -2,10 +2,12 @@
     if (mUseFixedVolume) {
         return;
     }
+    int streamAlias = mStreamVolumeAlias[streamType];
     for (int stream = 0; stream < mStreamStates.length; stream++) {
-        if (!isStreamAffectedByMute(stream) || stream == streamType)
+        if (!isStreamAffectedByMute(streamAlias) || streamAlias == mStreamVolumeAlias[stream]) {
             continue;
+        }
         mStreamStates[stream].mute(cb, state);
     }
 }

Find a functionally equivalent code:android.webkit.WebSettings.getJavaScriptEnabled:COMMENT
<android.webkit.WebSettings: boolean getJavaScriptEnabled()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets whether JavaScript is enabled.
 *
 * @return true if JavaScript is enabled
 * @see #setJavaScriptEnabled
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.telephony.SubscriptionManager.setDefaultSmsSubId:COMMENT
<android.telephony.SubscriptionManager: void setDefaultSmsSubId(long)>
Method Modifier: public      static      hidden      
Method Modifier: Yes         Yes         Yes         
Method Updated:  Yes         No          Yes         
Comment:/**
 * @hide
 */


Find a functionally equivalent code:android.webkit.WebSettings.setDefaultTextEncodingName:COMMENT
<android.webkit.WebSettings: void setDefaultTextEncodingName(String)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets the default text encoding name to use when decoding html pages.
 * The default is "UTF-8".
 *
 * @param encoding the text encoding name
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.systemui.recents.views.TaskViewHeader.onTaskViewFocusChanged:COMMENT
Method Modifier: 
Comment:/**
 * Notifies the associated TaskView has been focused.
 */

@@ -1,9 +1,11 @@
 {
+    // If we are not animating the visible state, just return
+    if (!animateFocusedState)
+        return;
     boolean isRunning = false;
     if (mFocusAnimator != null) {
         isRunning = mFocusAnimator.isRunning();
-        mFocusAnimator.removeAllListeners();
-        mFocusAnimator.cancel();
+        Utilities.cancelAnimationWithoutCallbacks(mFocusAnimator);
     }
     if (focused) {
         int secondaryColor = getSecondaryColor(mCurrentPrimaryColor, mCurrentPrimaryColorIsDark);
@@ -15,21 +17,23 @@
         // Pulse the background color
         int currentColor = mBackgroundColor;
         int lightPrimaryColor = getSecondaryColor(mCurrentPrimaryColor, mCurrentPrimaryColorIsDark);
-        ValueAnimator backgroundColor = ValueAnimator.ofObject(new ArgbEvaluator(), lightPrimaryColor, currentColor);
+        ValueAnimator backgroundColor = ValueAnimator.ofObject(new ArgbEvaluator(), currentColor, lightPrimaryColor);
         backgroundColor.addListener(new AnimatorListenerAdapter() {
 
             @Override

Find a functionally equivalent code:com.android.systemui.recents.views.TaskStackView.onLayout:COMMENT
Method Modifier: protected   
Comment:/**
 * This is called with the size of the space not including the top or right insets, or the
 * search bar height in portrait (but including the search bar width in landscape, since we want
 * to draw under it.
 */

@@ -3,18 +3,14 @@
     int childCount = getChildCount();
     for (int i = 0; i < childCount; i++) {
         TaskView tv = (TaskView) getChildAt(i);
-        if (tv.isFullScreenView()) {
-            tv.layout(left, top, left + tv.getMeasuredWidth(), top + tv.getMeasuredHeight());
+        if (tv.getBackground() != null) {
+            tv.getBackground().getPadding(mTmpRect);
         } else {
-            if (tv.getBackground() != null) {
-                tv.getBackground().getPadding(mTmpRect);
-            } else {
-                mTmpRect.setEmpty();
-            }
-            tv.layout(mLayoutAlgorithm.mTaskRect.left - mTmpRect.left, mLayoutAlgorithm.mTaskRect.top - mTmpRect.top, mLayoutAlgorithm.mTaskRect.right + mTmpRect.right, mLayoutAlgorithm.mTaskRect.bottom + mTmpRect.bottom + tv.getMaxFooterHeight());
+            mTmpRect.setEmpty();
         }
+        tv.layout(mLayoutAlgorithm.mTaskRect.left - mTmpRect.left, mLayoutAlgorithm.mTaskRect.top - mTmpRect.top, mLayoutAlgorithm.mTaskRect.right + mTmpRect.right, mLayoutAlgorithm.mTaskRect.bottom + mTmpRect.bottom);
     }
     if (mAwaitingFirstLayout) {
         mAwaitingFirstLayout = false;

Find a functionally equivalent code:com.android.server.wm.WindowManagerService.screenshotApplications:COMMENT
Method Modifier: public      
Comment:/**
 * Takes a snapshot of the screen.  In landscape mode this grabs the whole screen.
 * In portrait mode, it grabs the upper region of the screen based on the vertical dimension
 * of the target image.
 *
 * @param displayId the Display to take a screenshot of.
 * @param width the width of the target bitmap
 * @param height the height of the target bitmap
 * @param force565 if true the returned bitmap will be RGB_565, otherwise it
 * will be the same config as the surface
 */

@@ -37,42 +37,46 @@
     final int aboveAppLayer = (mPolicy.windowTypeToLayerLw(TYPE_APPLICATION) + 1) * TYPE_LAYER_MULTIPLIER + TYPE_LAYER_OFFSET;
     while (true) {
         if (retryCount++ > 0) {
+            // Reset max/min layers on retries so we don't accidentally take a screenshot of a
+            // layer based on the previous try.
+            maxLayer = 0;
+            minLayer = Integer.MAX_VALUE;
             try {
                 Thread.sleep(100);
             } catch (InterruptedException e) {
@@ -59,65 +63,75 @@
                         continue;
                     }
                 } else if (ws.mIsWallpaper) {
-                // Fall through.
+                    if (appWin == null) {
+                        // the layer of the target window.
+                        continue;
+                    }
+                // Fall through. The target window is in front of the wallpaper. For this
+                // case we want to include the wallpaper layer in the screenshot because
+                // the target window might have some transparent areas.
                 } else if (appToken != null) {
                     if (ws.mAppToken == null || ws.mAppToken.token != appToken) {
                         // screenshot app.

Find a functionally equivalent code:com.android.server.net.LockdownVpnTracker.handleStateChangedLocked:COMMENT
Method Modifier: private     
Comment:/**
 * Watch for state changes to both active egress network, kicking off a VPN
 * connection when ready, or setting firewall rules once VPN is connected.
 */

@@ -12,18 +12,18 @@
     if (egressDisconnected || egressChanged) {
         clearSourceRulesLocked();
         mAcceptedEgressIface = null;
-        mVpn.stopLegacyVpn();
+        mVpn.stopLegacyVpnPrivileged();
     }
     if (egressDisconnected) {
         hideNotification();
@@ -31,37 +31,39 @@
             showNotification(R.string.vpn_lockdown_connecting, R.drawable.vpn_disconnected);
             mAcceptedEgressIface = egressProp.getInterfaceName();
             try {
-                mVpn.startLegacyVpn(mProfile, KeyStore.getInstance(), egressProp);
+                // Use the privileged method because Lockdown VPN is initiated by the system, so
+                // no additional permission checks are necessary.
+                mVpn.startLegacyVpnPrivileged(mProfile, KeyStore.getInstance(), egressProp);
             } catch (IllegalStateException e) {
                 mAcceptedEgressIface = null;
                 Slog.e(TAG, "Failed to start VPN", e);

Find a functionally equivalent code:android.content.pm.PackageManagerTests.testReplaceMatchMoreCerts:COMMENT
Method Modifier: public      
Comment:/*
     * Test that an app signed with a certificate can be upgraded by app
     * signed with a superset of certificates.
     */

@@ -1,3 +1,3 @@
 {
-    replaceCerts(APP1_CERT1, APP1_CERT1_CERT2, true, true, PackageManager.INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES);
+    replaceCerts(APP1_CERT1, APP1_CERT1_CERT2, true, true, PackageManager.INSTALL_FAILED_UPDATE_INCOMPATIBLE);
 }

Find a functionally equivalent code:android.telephony.DisconnectCause.toString:COMMENT
Method Modifier: public      static      
Comment:/**
 * Returns descriptive string for the specified disconnect cause.
 */

@@ -82,93 +82,101 @@
             return "CDMA_CALL_LOST";
         case EXITED_ECM:
             return "EXITED_ECM";
+        case DIAL_MODIFIED_TO_USSD:
+            return "DIAL_MODIFIED_TO_USSD";
+        case DIAL_MODIFIED_TO_SS:
+            return "DIAL_MODIFIED_TO_SS";
+        case DIAL_MODIFIED_TO_DIAL:
+            return "DIAL_MODIFIED_TO_DIAL";
         case ERROR_UNSPECIFIED:
             return "ERROR_UNSPECIFIED";
         case OUTGOING_FAILURE:
             return "OUTGOING_FAILURE";
         case OUTGOING_CANCELED:
             return "OUTGOING_CANCELED";
+        case IMS_MERGED_SUCCESSFULLY:
+            return "IMS_MERGED_SUCCESSFULLY";
         default:
             return "INVALID: " + cause;
     }

Find a functionally equivalent code:com.android.server.wm.WindowStateAnimator.stepAnimationLocked:COMMENT
Method Modifier: 
Comment:// there is more animation to run.

@@ -14,24 +14,25 @@
                 final DisplayInfo displayInfo = displayContent.getDisplayInfo();
                 mAnimDw = displayInfo.appWidth;
                 mAnimDh = displayInfo.appHeight;
-                mAnimation.setStartTime(currentTime);
+                mAnimation.setStartTime(mAnimationStartTime != -1 ? mAnimationStartTime : currentTime);
                 mLocalAnimating = true;
                 mAnimating = true;
             }
             if ((mAnimation != null) && mLocalAnimating) {
+                mLastAnimationTime = currentTime;
                 if (stepAnimation(currentTime)) {
                     return true;
                 }
@@ -59,65 +60,66 @@
     if (DEBUG_ANIM)
         Slog.v(TAG, "Animation done in " + this + ": exiting=" + mWin.mExiting + ", reportedVisible=" + (mWin.mAppToken != null ? mWin.mAppToken.reportedVisible : false));
     mAnimating = false;
-    keyguardGoingAwayAnimation = false;
+    mKeyguardGoingAwayAnimation = false;
     mLocalAnimating = false;
     if (mAnimation != null) {
         mAnimation.cancel();

Find a functionally equivalent code:com.android.layoutlib.bridge.impl.RenderSessionImpl.createActionBar:COMMENT
Method Modifier: private     
Comment:/**
 * Creates the action bar. Also queries the project callback for missing information.
 */

@@ -1,5 +1,7 @@
 {
-    ActionBarLayout actionBar = new ActionBarLayout(context, params);
-    actionBar.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
-    return actionBar;
+    if (mIsThemeAppCompat == Boolean.TRUE) {
+        return new AppCompatActionBar(context, params, parentView);
+    } else {
+        return new FrameworkActionBar(context, params, parentView);
+    }
 }

Find a functionally equivalent code:android.telephony.SubscriptionManager.getDefaultDataPhoneId:COMMENT
<android.telephony.SubscriptionManager: int getDefaultDataPhoneId()>
Method Modifier: public      static      hidden      
Method Modifier: Yes         Yes         Yes         
Method Updated:  Yes         No          Yes         
Comment:/**
 * @hide
 */


Find a functionally equivalent code:android.webkit.WebView.setPictureListener:COMMENT
Method Modifier: public      deprecated  
Comment:/**
 * Sets the Picture listener. This is an interface used to receive
 * notifications of a new Picture.
 *
 * @param listener an implementation of WebView.PictureListener
 * @deprecated This method is now obsolete.
 */

@@ -1,6 +1,6 @@
 {
     checkThread();
-    if (DebugFlags.TRACE_API)
+    if (TRACE)
         Log.d(LOGTAG, "setPictureListener=" + listener);
     mProvider.setPictureListener(listener);
 }

Find a functionally equivalent code:com.android.server.power.PowerManagerService.isBeingKeptAwakeLocked:COMMENT
Method Modifier: private     
Comment:/**
 * Returns true if the device is being kept awake by a wake lock, user activity
 * or the stay on while powered setting.  We also keep the phone awake when
 * the proximity sensor returns a positive result so that the device does not
 * lock while in a phone call.  This function only controls whether the device
 * will go to sleep or dream which is independent of whether it will be allowed
 * to suspend.
 */

@@ -1,3 +1,3 @@
 {
-    return mStayOn || mProximityPositive || (mWakeLockSummary & WAKE_LOCK_STAY_AWAKE) != 0 || (mUserActivitySummary & (USER_ACTIVITY_SCREEN_BRIGHT | USER_ACTIVITY_SCREEN_DIM)) != 0;
+    return mStayOn || mProximityPositive || (mWakeLockSummary & WAKE_LOCK_STAY_AWAKE) != 0 || (mUserActivitySummary & (USER_ACTIVITY_SCREEN_BRIGHT | USER_ACTIVITY_SCREEN_DIM)) != 0 || mScreenBrightnessBoostInProgress;
 }

Find a functionally equivalent code:android.media.session.MediaSession.notifyRemoteVolumeChanged:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * Notify the system that the remote volume changed.
 *
 * @param provider The provider that is handling volume changes.
 * @hide
 */

@@ -1,7 +1,9 @@
 {
-    if (provider == null || provider != mVolumeProvider) {
-        Log.w(TAG, "Received update from stale volume provider");
-        return;
+    synchronized (mLock) {
+        if (provider == null || provider != mVolumeProvider) {
+            Log.w(TAG, "Received update from stale volume provider");
+            return;
+        }
     }
     try {
         mBinder.setCurrentVolume(provider.getCurrentVolume());

Find a functionally equivalent code:android.widget.ImageView.setImageResource:COMMENT
Method Modifier: public      
Comment:/**
 * Sets a drawable as the content of this ImageView.
 *
 * <p class="note">This does Bitmap reading and decoding on the UI
 * thread, which can cause a latency hiccup.  If that's a concern,
 * consider using {@link #setImageDrawable(android.graphics.drawable.Drawable)} or
 * {@link #setImageBitmap(android.graphics.Bitmap)} and
 * {@link android.graphics.BitmapFactory} instead.</p>
 *
 * @param resId the resource identifier of the drawable
 *
 * @attr ref android.R.styleable#ImageView_src
 */

@@ -1,14 +1,14 @@
 {
-    if (mUri != null || mResource != resId) {
-        final int oldWidth = mDrawableWidth;
-        final int oldHeight = mDrawableHeight;
-        updateDrawable(null);
-        mResource = resId;
-        mUri = null;
-        resolveUri();
-        if (oldWidth != mDrawableWidth || oldHeight != mDrawableHeight) {
-            requestLayout();
-        }
-        invalidate();
+    // The resource configuration may have changed, so we should always
+    // try to load the resource even if the resId hasn't changed.
+    final int oldWidth = mDrawableWidth;
+    final int oldHeight = mDrawableHeight;
+    updateDrawable(null);
+    mResource = resId;
+    mUri = null;
+    resolveUri();
+    if (oldWidth != mDrawableWidth || oldHeight != mDrawableHeight) {
+        requestLayout();
     }
+    invalidate();
 }

Find a functionally equivalent code:android.widget.SimpleMonthAdapter.setSelectedDay:COMMENT
Method Modifier: public      
Comment:/**
 * Updates the selected day and related parameters.
 *
 * @param day The day to highlight
 */

@@ -1,6 +1,4 @@
 {
-    if (mSelectedDay != day) {
-        mSelectedDay = day;
-        notifyDataSetChanged();
-    }
+    mSelectedDay = day;
+    notifyDataSetChanged();
 }

Find a functionally equivalent code:android.webkit.WebSettings.getDatabasePath:COMMENT
<android.webkit.WebSettings: String getDatabasePath()>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
Comment:/**
 * Gets the path to where database storage API databases are saved.
 *
 * @return the String path to the database storage API databases
 * @see #setDatabasePath
 * @deprecated Database paths are managed by the implementation this method is obsolete.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebSettings.getDisplayZoomControls:COMMENT
<android.webkit.WebSettings: boolean getDisplayZoomControls()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets whether the WebView displays on-screen zoom controls when using
 * the built-in zoom mechanisms.
 *
 * @return true if the WebView displays on-screen zoom controls when using
 * the built-in zoom mechanisms
 * @see #setDisplayZoomControls
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.server.SystemServer.startOtherServices:COMMENT
Method Modifier: private     
Comment:/**
 * Starts a miscellaneous grab bag of stuff that has yet to be refactored
 * and organized.
 */

@@ -30,41 +30,43 @@
     boolean disableSystemUI = SystemProperties.getBoolean("config.disable_systemui", false);
     boolean disableNonCoreServices = SystemProperties.getBoolean("config.disable_noncore", false);
     boolean disableNetwork = SystemProperties.getBoolean("config.disable_network", false);
+    boolean disableNetworkTime = SystemProperties.getBoolean("config.disable_networktime", false);
     boolean isEmulator = SystemProperties.get("ro.kernel.qemu").equals("1");
     try {
         Slog.i(TAG, "Reading configuration...");
         SystemConfig.getInstance();
         Slog.i(TAG, "Scheduling Policy");
         ServiceManager.addService("scheduling_policy", new SchedulingPolicyService());
+        mSystemServiceManager.startService(TelecomLoaderService.class);
         Slog.i(TAG, "Telephony Registry");
         telephonyRegistry = new TelephonyRegistry(context);
         ServiceManager.addService("telephony.registry", telephonyRegistry);
@@ -129,143 +131,136 @@
     } catch (Throwable e) {
         reportWtf("making display ready", e);
     }
-    try {
-        mPackageManagerService.performBootDexOpt();
-    } catch (Throwable e) {
-        reportWtf("performing boot dexopt", e);
-    }
-    try {
-        ActivityManagerNative.getDefault().showBootMessage(context.getResources().getText(com.android.internal.R.string.android_upgrading_starting_apps), false);
-    } catch (RemoteException e) {
-    }
     if (mFactoryTestMode != FactoryTest.FACTORY_TEST_LOW_LEVEL) {
         if (!disableStorage && !"0".equals(SystemProperties.get("system_init.startmountservice"))) {
             try {
@@ -152,157 +145,161 @@
                 reportWtf("starting Mount Service", e);
             }
         }
+    }
+    try {
+        mPackageManagerService.performBootDexOpt();
+    } catch (Throwable e) {
+        reportWtf("performing boot dexopt", e);
+    }
+    try {
+        ActivityManagerNative.getDefault().showBootMessage(context.getResources().getText(com.android.internal.R.string.android_upgrading_starting_apps), false);
+    } catch (RemoteException e) {
+    }
+    if (mFactoryTestMode != FactoryTest.FACTORY_TEST_LOW_LEVEL) {
         if (!disableNonCoreServices) {
             try {
                 Slog.i(TAG, "LockSettingsService");
@@ -384,390 +388,394 @@
         } catch (Throwable e) {
             reportWtf("starting SamplingProfiler Service", e);
         }
-        if (!disableNetwork) {
+        if (!disableNetwork && !disableNetworkTime) {
             try {
                 Slog.i(TAG, "NetworkTimeUpdateService");
                 networkTimeUpdater = new NetworkTimeUpdateService(context);

Find a functionally equivalent code:android.provider.Settings.Secure.setLocationModeForUser:COMMENT
Method Modifier: private     static      final       
Comment:/**
 * Thread-safe method for setting the location mode to one of
 * {@link #LOCATION_MODE_HIGH_ACCURACY}, {@link #LOCATION_MODE_SENSORS_ONLY},
 * {@link #LOCATION_MODE_BATTERY_SAVING}, or {@link #LOCATION_MODE_OFF}.
 *
 * @param cr the content resolver to use
 * @param mode such as {@link #LOCATION_MODE_HIGH_ACCURACY}
 * @param userId the userId for which to change mode
 * @return true if the value was set, false on database errors
 *
 * @throws IllegalArgumentException if mode is not one of the supported values
 */

@@ -18,25 +18,34 @@
             default:
                 throw new IllegalArgumentException("Invalid location mode: " + mode);
         }
-        boolean gpsSuccess = Settings.Secure.setLocationProviderEnabledForUser(cr, LocationManager.GPS_PROVIDER, gps, userId);
+        // Note it's important that we set the NLP mode first. The Google implementation
+        // of NLP clears its NLP consent setting any time it receives a
+        // LocationManager.PROVIDERS_CHANGED_ACTION broadcast and NLP is disabled. Also,
+        // it shows an NLP consent dialog any time it receives the broadcast, NLP is
+        // enabled, and the NLP consent is not set. If 1) we were to enable GPS first,
+        // 2) a setup wizard has its own NLP consent UI that sets the NLP consent setting,
+        // and 3) the receiver happened to complete before we enabled NLP, then the Google
+        // NLP would detect the attempt to enable NLP and show a redundant NLP consent
+        // dialog. Then the people who wrote the setup wizard would be sad.
         boolean nlpSuccess = Settings.Secure.setLocationProviderEnabledForUser(cr, LocationManager.NETWORK_PROVIDER, network, userId);
+        boolean gpsSuccess = Settings.Secure.setLocationProviderEnabledForUser(cr, LocationManager.GPS_PROVIDER, gps, userId);
         return gpsSuccess && nlpSuccess;
     }
 }

Find a functionally equivalent code:android.webkit.WebSettings.getLoadWithOverviewMode:COMMENT
<android.webkit.WebSettings: boolean getLoadWithOverviewMode()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets whether this WebView loads pages in overview mode.
 *
 * @return whether this WebView loads pages in overview mode
 * @see #setLoadWithOverviewMode
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.server.SystemServer.startCoreServices:COMMENT
Method Modifier: private     
Comment:/**
 * Starts some essential services that are not tangled up in the bootstrap process.
 */

@@ -6,11 +6,13 @@
     // Tracks application usage stats.
     mSystemServiceManager.startService(UsageStatsService.class);
     mActivityManagerService.setUsageStatsManager(LocalServices.getService(UsageStatsManagerInternal.class));
+    // Update after UsageStatsService is available, needed before performBootDexOpt.
+    mPackageManagerService.getUsageStatsIfNoPackageUsageInfo();
     // Tracks whether the updatable WebView is in a ready state and watches for update installs.
     mSystemServiceManager.startService(WebViewUpdateService.class);
 }

Find a functionally equivalent code:android.webkit.WebSettings.setAppCachePath:COMMENT
<android.webkit.WebSettings: void setAppCachePath(String)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets the path to the Application Caches files. In order for the
 * Application Caches API to be enabled, this method must be called with a
 * path to which the application can write. This method should only be
 * called once: repeated calls are ignored.
 *
 * @param appCachePath a String path to the directory containing
 * Application Caches files.
 * @see #setAppCacheEnabled
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.app.Dialog.closeOptionsMenu:COMMENT
Method Modifier: public      
Comment:/**
 * @see Activity#closeOptionsMenu()
 */

@@ -1,3 +1,5 @@
 {
-    mWindow.closePanel(Window.FEATURE_OPTIONS_PANEL);
+    if (mWindow.hasFeature(Window.FEATURE_OPTIONS_PANEL)) {
+        mWindow.closePanel(Window.FEATURE_OPTIONS_PANEL);
+    }
 }

Find a functionally equivalent code:android.os.BaseBundle.getBooleanArray:COMMENT
<android.os.BaseBundle: boolean[] getBooleanArray(String)>
Method Modifier: public      
Method Modifier: No          
Method Updated:  Yes         
Comment:/**
 * Returns the value associated with the given key, or null if
 * no mapping of the desired type exists for the given key or a null
 * value is explicitly associated with the key.
 *
 * @param key a String, or null
 * @return a boolean[] value, or null
 */


Find a functionally equivalent code:android.media.AudioManager.handleKeyDown:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * @hide
 */

@@ -16,26 +16,22 @@
             break;
         case KeyEvent.KEYCODE_VOLUME_MUTE:
             if (event.getRepeatCount() == 0) {
-                if (mUseMasterVolume) {
-                    setMasterMute(!isMasterMute());
-                } else {
-                // TODO: Actually handle MUTE.
-                }
+                MediaSessionLegacyHelper.getHelper(mContext).sendVolumeKeyEvent(event, false);
             }
             break;
     }

Find a functionally equivalent code:android.graphics.drawable.InsetDrawable.getHotspotBounds:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * @hide
 */

@@ -1,3 +1,3 @@
 {
-    mInsetState.mDrawable.getHotspotBounds(outRect);
+    mState.mDrawable.getHotspotBounds(outRect);
 }

Find a functionally equivalent code:android.media.MediaCodecInfo.VideoCapabilities.supportsFormat:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * @hide
 * @throws java.lang.ClassCastException
 */

@@ -2,7 +2,7 @@
     final Map<String, Object> map = format.getMap();
     Integer width = (Integer) map.get(MediaFormat.KEY_WIDTH);
     Integer height = (Integer) map.get(MediaFormat.KEY_HEIGHT);
-    Double rate = (Double) map.get(MediaFormat.KEY_FRAME_RATE);
+    Number rate = (Number) map.get(MediaFormat.KEY_FRAME_RATE);
     return supports(width, height, rate);
 }

Find a functionally equivalent code:android.webkit.WebSettings.getUseWebViewBackgroundForOverscrollBackground:COMMENT
<android.webkit.WebSettings: boolean getUseWebViewBackgroundForOverscrollBackground()>
Method Modifier: public      abstract    hidden      deprecated  
Method Modifier: Yes         No          Yes         Yes         
Method Updated:  Yes         Yes         Yes         Yes         
Comment:/**
 * Gets whether this WebView uses WebView's background instead of
 * internal pattern for over scroll background.
 *
 * @see #setUseWebViewBackgroundForOverscrollBackground
 * @deprecated This method is now obsolete.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebView.freeMemory:COMMENT
Method Modifier: public      deprecated  
Comment:/**
 * Informs this WebView that memory is low so that it can free any available
 * memory.
 * @deprecated Memory caches are automatically dropped when no longer needed, and in response
 * to system memory pressure.
 */

@@ -1,6 +1,6 @@
 {
     checkThread();
-    if (DebugFlags.TRACE_API)
+    if (TRACE)
         Log.d(LOGTAG, "freeMemory");
     mProvider.freeMemory();
 }

Find a functionally equivalent code:android.media.tv.TvInputManager.Session.getSelectedTrack:COMMENT
Method Modifier: public      
Comment:/**
 * Returns the selected track for a given type. Returns {@code null} if the information is
 * not available or any of the tracks for the given type is not selected.
 *
 * @return the ID of the selected track.
 * @see #selectTrack
 */

@@ -1,10 +1,12 @@
 {
-    if (type == TvTrackInfo.TYPE_AUDIO) {
-        return mSelectedAudioTrackId;
-    } else if (type == TvTrackInfo.TYPE_VIDEO) {
-        return mSelectedVideoTrackId;
-    } else if (type == TvTrackInfo.TYPE_SUBTITLE) {
-        return mSelectedSubtitleTrackId;
+    synchronized (mTrackLock) {
+        if (type == TvTrackInfo.TYPE_AUDIO) {
+            return mSelectedAudioTrackId;
+        } else if (type == TvTrackInfo.TYPE_VIDEO) {
+            return mSelectedVideoTrackId;
+        } else if (type == TvTrackInfo.TYPE_SUBTITLE) {
+            return mSelectedSubtitleTrackId;
+        }
     }
     throw new IllegalArgumentException("invalid type: " + type);
 }

Find a functionally equivalent code:android.text.StaticLayout.generate:COMMENT
Method Modifier: 
Comment:/* package */

@@ -172,178 +172,177 @@
                             okBottom = fitBottom;
                     }
                 } else {
-                    final boolean moreChars;
                     int endPos;
                     int above, below, top, bottom;
                     float currentTextWidth;
@@ -183,189 +182,187 @@
                         top = okTop;
                         bottom = okBottom;
                         currentTextWidth = okWidth;
-                        moreChars = (j + 1 < spanEnd);
                     } else if (fit != here) {
                         endPos = fit;
                         above = fitAscent;
@@ -191,197 +189,194 @@
                         top = fitTop;
                         bottom = fitBottom;
                         currentTextWidth = fitWidth;
-                        moreChars = (j + 1 < spanEnd);
                     } else {
                         // must make progress, so take next character
                         endPos = here + 1;
@@ -204,212 +201,212 @@
                         top = fmTop;
                         bottom = fmBottom;
                         currentTextWidth = widths[here - paraStart];
-                        moreChars = (endPos < spanEnd);
                     }
-                    v = out(source, here, endPos, above, below, top, bottom, v, spacingmult, spacingadd, chooseHt, chooseHtv, fm, hasTabOrEmoji, needMultiply, chdirs, dir, easy, bufEnd, includepad, trackpad, chs, widths, paraStart, ellipsize, ellipsizedWidth, currentTextWidth, paint, moreChars);
+                    int ellipseEnd = endPos;
+                    if (mMaximumVisibleLineCount == 1 && ellipsize == TextUtils.TruncateAt.MIDDLE) {
+                        ellipseEnd = paraEnd;
+                    }
+                    v = out(source, here, ellipseEnd, above, below, top, bottom, v, spacingmult, spacingadd, chooseHt, chooseHtv, fm, hasTabOrEmoji, needMultiply, chdirs, dir, easy, bufEnd, includepad, trackpad, chs, widths, paraStart, ellipsize, ellipsizedWidth, currentTextWidth, paint, true);
                     here = endPos;
                     // restart j-span loop from here, compensating for the j++
                     j = here - 1;

Find a functionally equivalent code:android.webkit.WebViewDatabase.hasHttpAuthUsernamePassword:COMMENT
<android.webkit.WebViewDatabase: boolean hasHttpAuthUsernamePassword()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets whether there are any saved credentials for HTTP authentication.
 *
 * @return whether there are any saved credentials
 * @see WebView#getHttpAuthUsernamePassword
 * @see WebView#setHttpAuthUsernamePassword
 * @see #clearHttpAuthUsernamePassword
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.telephony.SubscriptionManager.getDefaultVoiceSubId:COMMENT
Method Modifier: public      static      hidden      
Comment:/**
 * @hide
 */

@@ -1,5 +1,5 @@
 {
-    long subId = INVALID_SUB_ID;
+    int subId = INVALID_SUBSCRIPTION_ID;
     try {
         ISub iSub = ISub.Stub.asInterface(ServiceManager.getService("isub"));
         if (iSub != null) {

Find a functionally equivalent code:com.android.systemui.volume.VolumePanel.updateSlider:COMMENT
Method Modifier: private     
Comment:/**
 * Update the mute and progress state of a slider
 */

@@ -1,9 +1,10 @@
 {
     updateSliderProgress(sc, -1);
     final boolean muted = isMuted(sc.streamType);
-    // Force reloading the image resource
-    sc.icon.setImageDrawable(null);
+    if (forceReloadIcon) {
+        sc.icon.setImageDrawable(null);
+    }
     updateSliderIcon(sc, muted);
     updateSliderEnabled(sc, muted, false);
-    updateSliderSupressor(sc);
+    updateSliderSuppressor(sc);
 }

Find a functionally equivalent code:android.content.Intent.prepareToEnterProcess:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * @hide
 */

@@ -1,6 +1,8 @@
 {
     if (mContentUserHint != UserHandle.USER_CURRENT) {
-        fixUris(mContentUserHint);
-        mContentUserHint = UserHandle.USER_CURRENT;
+        if (UserHandle.getAppId(Process.myUid()) != Process.SYSTEM_UID) {
+            fixUris(mContentUserHint);
+            mContentUserHint = UserHandle.USER_CURRENT;
+        }
     }
 }

Find a functionally equivalent code:android.webkit.WebViewDatabase.hasUsernamePassword:COMMENT
<android.webkit.WebViewDatabase: boolean hasUsernamePassword()>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
Comment:/**
 * Gets whether there are any saved username/password pairs for web forms.
 * Note that these are unrelated to HTTP authentication credentials.
 *
 * @return true if there are any saved username/password pairs
 * @see WebView#savePassword
 * @see #clearUsernamePassworda
 * @deprecated Saving passwords in WebView will not be supported in future versions.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.systemui.recents.model.RecentsPackageMonitor.register:COMMENT
Method Modifier: public      
Comment:/**
 * Registers the broadcast receivers with the specified callbacks.
 */

@@ -2,8 +2,10 @@
     mSystemServicesProxy = new SystemServicesProxy(context);
     mCb = cb;
     try {
-        register(context, Looper.getMainLooper(), true);
+        // We register for events from all users, but will cross-reference them with
+        // packages for the current user and any profiles they have
+        register(context, Looper.getMainLooper(), UserHandle.ALL, true);
     } catch (IllegalStateException e) {
         e.printStackTrace();
     }

Find a functionally equivalent code:android.appwidget.AppWidgetHost.deleteHost:COMMENT
Method Modifier: public      
Comment:/**
 * Remove all records about this host from the AppWidget manager.
 * <ul>
 * <li>Call this when initializing your database, as it might be because of a data wipe.</li>
 * <li>Call this to have the AppWidget manager release all resources associated with your
 * host.  Any future calls about this host will cause the records to be re-allocated.</li>
 * </ul>
 */

@@ -1,6 +1,6 @@
 {
     try {
-        sService.deleteHost(mContext.getOpPackageName(), mHostId);
+        sService.deleteHost(mContextOpPackageName, mHostId);
     } catch (RemoteException e) {
         throw new RuntimeException("system server dead?", e);
     }

Find a functionally equivalent code:android.app.Notification.BigPictureStyle.restoreFromExtras:COMMENT
Method Modifier: protected   hidden      
Comment:/**
 * @hide
 */

@@ -1,6 +1,7 @@
 {
     super.restoreFromExtras(extras);
     if (extras.containsKey(EXTRA_LARGE_ICON_BIG)) {
+        mBigLargeIconSet = true;
         mBigLargeIcon = extras.getParcelable(EXTRA_LARGE_ICON_BIG);
     }
     mPicture = extras.getParcelable(EXTRA_PICTURE);

Find a functionally equivalent code:com.android.server.am.ActivityStack.moveTaskToBackLocked:COMMENT
Method Modifier: default     final       
Comment:/**
 * Worker method for rearranging history stack. Implements the function of moving all
 * activities for a specific task (gathering them if disjoint) into a single group at the
 * bottom of the stack.
 *
 * If a watcher is installed, the action is preflighted and the watcher has an opportunity
 * to premeptively cancel the move.
 *
 * @param taskId The taskId to collect and move to the bottom.
 * @return Returns true if the move completed, false if not.
 */

@@ -44,58 +44,50 @@
             task.setTaskToReturnTo(HOME_ACTIVITY_TYPE);
         }
     }
-    if (reason != null && (reason.intent.getFlags() & Intent.FLAG_ACTIVITY_NO_ANIMATION) != 0) {
-        mWindowManager.prepareAppTransition(AppTransition.TRANSIT_NONE, false);
-        ActivityRecord r = topRunningActivityLocked(null);
-        if (r != null) {
-            mNoAnimActivities.add(r);
-        }
-    } else {
-        mWindowManager.prepareAppTransition(AppTransition.TRANSIT_TASK_TO_BACK, false);
-    }
+    mWindowManager.prepareAppTransition(AppTransition.TRANSIT_TASK_TO_BACK, false);
     mWindowManager.moveTaskToBottom(taskId);
     if (VALIDATE_TOKENS) {
         validateAppTokensLocked();
@@ -65,71 +57,63 @@
         }
         final int taskToReturnTo = tr.getTaskToReturnTo();
         tr.setTaskToReturnTo(APPLICATION_ACTIVITY_TYPE);
-        return mStackSupervisor.resumeHomeStackTask(taskToReturnTo, null);
+        return mStackSupervisor.resumeHomeStackTask(taskToReturnTo, null, "moveTaskToBack");
     }
     mStackSupervisor.resumeTopActivitiesLocked();
     return true;

Find a functionally equivalent code:android.telephony.ServiceState.getOperatorAlphaLong:COMMENT
Method Modifier: public      
Comment:/**
 * Get current registered operator name in long alphanumeric format.
 *
 * In GSM/UMTS, long format can be up to 16 characters long.
 * In CDMA, returns the ERI text, if set. Otherwise, returns the ONS.
 *
 * @return long name of operator, null if unregistered or unknown
 */

@@ -1,3 +1,3 @@
 {
-    return mOperatorAlphaLong;
+    return mVoiceOperatorAlphaLong;
 }

Find a functionally equivalent code:android.bluetooth.BluetoothDevice.isConnected:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * Returns whether there is an open connection to this device.
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH}.
 *
 * @return True if there is at least one open connection to this device.
 * @hide
 */

@@ -4,10 +4,10 @@
         return false;
     }
     try {
-        return sService.isConnected(this);
+        return sService.getConnectionState(this) != CONNECTION_STATE_DISCONNECTED;
     } catch (RemoteException e) {
         Log.e(TAG, "", e);
         return false;

Find a functionally equivalent code:com.android.systemui.statusbar.phone.StatusBarWindowManager.add:COMMENT
Method Modifier: public      
Comment:/**
 * Adds the status bar view to the window manager.
 *
 * @param statusBarView The view to add.
 * @param barHeight The height of the status bar in collapsed state.
 */

@@ -11,14 +11,16 @@
     mStatusBarView = statusBarView;
     mBarHeight = barHeight;
     mWindowManager.addView(mStatusBarView, mLp);
+    mLpChanged = new WindowManager.LayoutParams();
+    mLpChanged.copyFrom(mLp);
 }

Find a functionally equivalent code:com.android.systemui.recents.RecentsConfiguration.updateOnConfigurationChange:COMMENT
Method Modifier: public      
Comment:/**
 * Called when the configuration has changed, and we want to reset any configuration specific
 * members.
 */

@@ -1,8 +1,6 @@
 {
-    launchedWithAltTab = false;
-    launchedWithNoRecentTasks = false;
-    launchedFromAppWithThumbnail = false;
-    launchedFromAppWithScreenshot = false;
-    launchedFromHome = false;
-    launchedToTaskId = -1;
+    // Reset this flag on configuration change to ensure that we recreate new task views
+    launchedReuseTaskStackViews = false;
+    // Set this flag to indicate that the configuration has changed since Recents last launched
+    launchedHasConfigurationChanged = true;
 }

Find a functionally equivalent code:com.android.systemui.recents.RecentsActivity.onCreate:COMMENT
Method Modifier: public      
Comment:/**
 * Called with the activity is first created.
 */

@@ -1,9 +1,10 @@
 {
     super.onCreate(savedInstanceState);
-    // For the non-primary user, ensure that the SystemSericesProxy is initialized
+    // For the non-primary user, ensure that the SystemServicesProxy and configuration is
+    // initialized
     RecentsTaskLoader.initialize(this);
-    // Initialize the loader and the configuration
-    mConfig = RecentsConfiguration.reinitialize(this, RecentsTaskLoader.getInstance().getSystemServicesProxy());
+    SystemServicesProxy ssp = RecentsTaskLoader.getInstance().getSystemServicesProxy();
+    mConfig = RecentsConfiguration.reinitialize(this, ssp);
     // Initialize the widget host (the host id is static and does not change)
     mAppWidgetHost = new RecentsAppWidgetHost(this, Constants.Values.App.AppWidgetHostId);
     // Set the Recents layout
@@ -14,24 +15,24 @@
     mEmptyViewStub = (ViewStub) findViewById(R.id.empty_view_stub);
     mDebugOverlayStub = (ViewStub) findViewById(R.id.debug_overlay_stub);
     mScrimViews = new SystemBarScrimViews(this, mConfig);
+    mStatusBar = ((SystemUIApplication) getApplication()).getComponent(PhoneStatusBar.class);
     inflateDebugOverlay();
     // Bind the search app widget when we first start up
     bindSearchBarAppWidget();
-    // Update the recent tasks
-    updateRecentsTasks(getIntent());
     // Register the broadcast receiver to handle messages when the screen is turned off
     IntentFilter filter = new IntentFilter();
     filter.addAction(Intent.ACTION_SCREEN_OFF);
@@ -32,54 +32,35 @@
     } catch (InvocationTargetException e) {
         e.printStackTrace();
     }
-    // Update if we are getting a configuration change
-    if (savedInstanceState != null) {
-        mConfig.updateOnConfigurationChange();
-        onConfigurationChange();
-    }
-    // want it stalling the startup
-    if (mConfig.searchBarAppWidgetId >= 0) {
-        final WeakReference<RecentsAppWidgetHost.RecentsAppWidgetHostCallbacks> callback = new WeakReference<RecentsAppWidgetHost.RecentsAppWidgetHostCallbacks>(this);
-        mRecentsView.post(new Runnable() {
-
-            @Override
-            public void run() {
-                RecentsAppWidgetHost.RecentsAppWidgetHostCallbacks cb = callback.get();
-                if (cb != null) {
-                    mAppWidgetHost.startListening(cb);
-                }
-            }
-        });
-    }
 }

Find a functionally equivalent code:android.appwidget.AppWidgetHost.getAppWidgetIds:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * Gets a list of all the appWidgetIds that are bound to the current host
 *
 * @hide
 */

@@ -3,9 +3,9 @@
         if (sService == null) {
             bindService();
         }
-        return sService.getAppWidgetIdsForHost(mContext.getOpPackageName(), mHostId);
+        return sService.getAppWidgetIdsForHost(mContextOpPackageName, mHostId);
     } catch (RemoteException e) {
         throw new RuntimeException("system server dead?", e);
     }

Find a functionally equivalent code:com.android.internal.os.ZygoteConnection.applyInvokeWithSystemProperty:COMMENT
Method Modifier: public      static      internal    
Comment:/**
 * Applies invoke-with system properties to the zygote arguments.
 *
 * @param args non-null; zygote args
 */

@@ -3,9 +3,14 @@
         if (args.niceName != null) {
             String property = "wrap." + args.niceName;
             if (property.length() > 31) {
-                property = property.substring(0, 31);
+                // Avoid creating an illegal property name when truncating.
+                if (property.charAt(30) != '.') {
+                    property = property.substring(0, 31);
+                } else {
+                    property = property.substring(0, 30);
+                }
             }
             args.invokeWith = SystemProperties.get(property);
             if (args.invokeWith != null && args.invokeWith.length() == 0) {

Find a functionally equivalent code:com.android.systemui.recents.views.TaskView.onTaskBound:COMMENT
Method Modifier: public      
Comment:/**
 * Binds this task view to the task
 */

@@ -1,14 +1,10 @@
 {
     mTask = t;
     mTask.setCallbacks(this);
-    if (getMeasuredWidth() == 0) {
-        // If we haven't yet measured, we should just set the footer height with any animation
-        animateFooterVisibility(t.lockToThisTask, 0);
-    } else {
-        animateFooterVisibility(t.lockToThisTask, mConfig.taskViewLockToAppLongAnimDuration);
+    // Hide the action button if lock to app is disabled for this view
+    int lockButtonVisibility = (!t.lockToTaskEnabled || !t.lockToThisTask) ? GONE : VISIBLE;
+    if (mActionButtonView.getVisibility() != lockButtonVisibility) {
+        mActionButtonView.setVisibility(lockButtonVisibility);
+        requestLayout();
     }
-    // Hide the action button if lock to app is disabled
-    if (!t.lockToTaskEnabled && mActionButtonView.getVisibility() != View.GONE) {
-        mActionButtonView.setVisibility(View.GONE);
-    }
 }

Find a functionally equivalent code:android.accessibilityservice.AccessibilityService.onBind:COMMENT
Method Modifier: public      final       
Comment:/**
 * Implement to return the implementation of the internal accessibility
 * service interface.
 */

@@ -17,24 +17,29 @@
         }
 
         @Override
-        public void onSetConnectionId(int connectionId) {
+        public void init(int connectionId, IBinder windowToken) {
             mConnectionId = connectionId;
+            mWindowToken = windowToken;
+            // The client may have already obtained the window manager, so
+            // update the default token on whatever manager we gave them.
+            final WindowManagerImpl wm = (WindowManagerImpl) getSystemService(WINDOW_SERVICE);
+            wm.setDefaultToken(windowToken);
         }
 
         @Override

Find a functionally equivalent code:android.app.Notification.WearableExtender.extend:COMMENT
Method Modifier: public      
Comment:/**
 * Apply wearable extensions to a notification that is being built. This is typically
 * called by the {@link android.app.Notification.Builder#extend} method of
 * {@link android.app.Notification.Builder}.
 */

@@ -33,38 +33,41 @@
     if (mGravity != DEFAULT_GRAVITY) {
         wearableBundle.putInt(KEY_GRAVITY, mGravity);
     }
+    if (mHintScreenTimeout != 0) {
+        wearableBundle.putInt(KEY_HINT_SCREEN_TIMEOUT, mHintScreenTimeout);
+    }
     builder.getExtras().putBundle(EXTRA_WEARABLE_EXTENSIONS, wearableBundle);
     return builder;
 }

Find a functionally equivalent code:android.webkit.WebBackForwardList.getCurrentItem:COMMENT
<android.webkit.WebBackForwardList: WebHistoryItem getCurrentItem()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Return the current history item. This method returns null if the list is
 * empty.
 * @return The current history item.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.systemui.recents.views.TaskStackViewTouchHandler.onInterceptTouchEvent:COMMENT
Method Modifier: public      
Comment:/**
 * Touch preprocessing for handling below
 */

@@ -26,48 +26,46 @@
                 // Initialize the velocity tracker
                 initOrResetVelocityTracker();
                 mVelocityTracker.addMovement(createMotionEventForStackScroll(ev));
-                // Check if the scroller is finished yet
-                mIsScrolling = mScroller.isScrolling();
                 break;
             }
         case MotionEvent.ACTION_MOVE:
             {
                 if (mActivePointerId == INACTIVE_POINTER_ID)
                     break;
+                // Initialize the velocity tracker if necessary
+                initVelocityTrackerIfNotExists();
+                mVelocityTracker.addMovement(createMotionEventForStackScroll(ev));
                 int activePointerIndex = ev.findPointerIndex(mActivePointerId);
                 int y = (int) ev.getY(activePointerIndex);
                 int x = (int) ev.getX(activePointerIndex);
                 if (Math.abs(y - mInitialMotionY) > mScrollTouchSlop) {
                     // Save the touch move info
                     mIsScrolling = true;
-                    // Initialize the velocity tracker if necessary
-                    initVelocityTrackerIfNotExists();
-                    mVelocityTracker.addMovement(createMotionEventForStackScroll(ev));
                     // Disallow parents from intercepting touch events
                     final ViewParent parent = mSv.getParent();
                     if (parent != null) {

Find a functionally equivalent code:android.telephony.ServiceState.setOperatorAlphaLong:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * In CDMA, mOperatorAlphaLong can be set from the ERI text.
 * This is done from the CDMAPhone and not from the CdmaServiceStateTracker.
 *
 * @hide
 */

@@ -1,3 +1,4 @@
 {
-    mOperatorAlphaLong = longName;
+    mVoiceOperatorAlphaLong = longName;
+    mDataOperatorAlphaLong = longName;
 }

Find a functionally equivalent code:com.android.internal.policy.impl.PhoneWindowManager.showBootMessage:COMMENT
Method Modifier: public      internal    
Comment:/**
 * {@inheritDoc}
 */

@@ -46,52 +46,56 @@
                         return true;
                     }
                 };
-                mBootMsgDialog.setTitle(R.string.android_upgrading_title);
+                if (mContext.getPackageManager().isUpgrade()) {
+                    mBootMsgDialog.setTitle(R.string.android_upgrading_title);
+                } else {
+                    mBootMsgDialog.setTitle(R.string.android_start_title);
+                }
                 mBootMsgDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
                 mBootMsgDialog.setIndeterminate(true);
                 mBootMsgDialog.getWindow().setType(WindowManager.LayoutParams.TYPE_BOOT_PROGRESS);

Find a functionally equivalent code:android.content.res.Configuration.resourceQualifierString:COMMENT
Method Modifier: public      static      hidden      
Comment:/**
 * Returns a string representation of the configuration that can be parsed
 * by build tools (like AAPT).
 *
 * @hide
 */

@@ -1,12 +1,12 @@
 {
     ArrayList<String> parts = new ArrayList<String>();
     if (config.mcc != 0) {
-        parts.add(config.mcc + "mcc");
+        parts.add("mcc" + config.mcc);
         if (config.mnc != 0) {
-            parts.add(config.mnc + "mnc");
+            parts.add("mnc" + config.mnc);
         }
     }
-    if (!config.locale.getLanguage().isEmpty()) {
+    if (config.locale != null && !config.locale.getLanguage().isEmpty()) {
         parts.add(localeToResourceQualifier(config.locale));
     }
     switch(config.screenLayout & Configuration.SCREENLAYOUT_LAYOUTDIR_MASK) {

Find a functionally equivalent code:com.android.layoutlib.bridge.Bridge.resolveResourceId:COMMENT
Method Modifier: public      static      
Comment:/**
 * Returns details of a framework resource from its integer value.
 * @param value the integer value
 * @return a Pair containing the resource type and name, or null if the id
 * does not match any resource.
 */


Find a functionally equivalent code:android.webkit.WebSettings.setUseWideViewPort:COMMENT
<android.webkit.WebSettings: void setUseWideViewPort(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets whether the WebView should enable support for the &quot;viewport&quot;
 * HTML meta tag or should use a wide viewport.
 * When the value of the setting is false, the layout width is always set to the
 * width of the WebView control in device-independent (CSS) pixels.
 * When the value is true and the page contains the viewport meta tag, the value
 * of the width specified in the tag is used. If the page does not contain the tag or
 * does not provide a width, then a wide viewport will be used.
 *
 * @param use whether to enable support for the viewport meta tag
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.server.accounts.AccountManagerService.validateAccountsInternal:COMMENT
Method Modifier: private     
Comment:/**
 * Validate internal set of accounts against installed authenticators for
 * given user. Clear cached authenticators before validating when requested.
 */

@@ -9,15 +9,15 @@
     synchronized (accounts.cacheLock) {
         final SQLiteDatabase db = accounts.openHelper.getWritableDatabase();
         boolean accountDeleted = false;
-        Cursor cursor = db.query(TABLE_ACCOUNTS, new String[] { ACCOUNTS_ID, ACCOUNTS_TYPE, ACCOUNTS_NAME }, null, null, null, null, null);
+        Cursor cursor = db.query(TABLE_ACCOUNTS, new String[] { ACCOUNTS_ID, ACCOUNTS_TYPE, ACCOUNTS_NAME }, null, null, null, null, ACCOUNTS_ID);
         try {
             accounts.accountCache.clear();
             final HashMap<String, ArrayList<String>> accountNamesByType = new LinkedHashMap<String, ArrayList<String>>();

Find a functionally equivalent code:com.android.server.backup.PackageManagerBackupAgent.onBackup:COMMENT
Method Modifier: public      
Comment:// the package name.

@@ -33,39 +33,39 @@
         // 2. the home app [or absence] we now use differs from the prior state,
         // OR 3. it looks like we use the same home app + version as before, but
         // the signatures don't match so we treat them as different apps.
-        final boolean needHomeBackup = (homeVersion != mStoredHomeVersion) || Objects.equals(home, mStoredHomeComponent) || (home != null && !BackupManagerService.signaturesMatch(mStoredHomeSigHashes, homeInfo));
+        final boolean needHomeBackup = (homeVersion != mStoredHomeVersion) || !Objects.equals(home, mStoredHomeComponent) || (home != null && !BackupManagerService.signaturesMatch(mStoredHomeSigHashes, homeInfo));
         if (needHomeBackup) {
             if (DEBUG) {
                 Slog.i(TAG, "Home preference changed; backing up new state " + home);

Find a functionally equivalent code:android.content.res.ColorStateList.addFirstIfMissing:COMMENT
Method Modifier: public      static      hidden      
Comment:/**
 * If the color state list does not already have an entry matching the
 * specified state, prepends a state set and color pair to a color state
 * list.
 * <p>
 * This is a workaround used in TimePicker and DatePicker until we can
 * add support for theme attributes in ColorStateList.
 *
 * @param colorStateList the source color state list
 * @param state the state to prepend
 * @param color the color to use for the given state
 * @return a new color state list, or the source color state list if there
 * was already a matching state set
 *
 * @hide Remove when we can support theme attributes.
 */

@@ -3,9 +3,9 @@
     for (int i = 0; i < inputStates.length; i++) {
         final int[] inputState = inputStates[i];
         for (int j = 0; j < inputState.length; j++) {
-            if (inputState[i] == state) {
+            if (inputState[j] == state) {
                 return colorStateList;
             }
         }

Find a functionally equivalent code:android.webkit.WebSettings.getLoadsImagesAutomatically:COMMENT
<android.webkit.WebSettings: boolean getLoadsImagesAutomatically()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets whether the WebView loads image resources. This includes
 * images embedded using the data URI scheme.
 *
 * @return true if the WebView loads image resources
 * @see #setLoadsImagesAutomatically
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebSettings.getAllowContentAccess:COMMENT
<android.webkit.WebSettings: boolean getAllowContentAccess()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets whether this WebView supports content URL access.
 *
 * @see #setAllowContentAccess
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebBackForwardList.getCurrentIndex:COMMENT
<android.webkit.WebBackForwardList: int getCurrentIndex()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Get the index of the current history item. This index can be used to
 * directly index into the array list.
 * @return The current index from 0...n or -1 if the list is empty.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.systemui.statusbar.phone.SecureCameraLaunchManager.onSwipingStarted:COMMENT
Method Modifier: public      
Comment:/**
 * Called when the user is starting to swipe horizontally, possibly to start the secure camera.
 * Although this swipe ultimately may not result in the secure camera opening, we need to stop
 * all other camera usage (e.g., Face Unlock) as soon as possible.  We send out a broadcast to
 * notify other apps that they should close the camera immediately.  The broadcast is sent even
 * if the camera appears to be available, because there could be an app that is about to open
 * the camera.
 */

@@ -7,12 +7,13 @@
         public void run() {
             Intent intent = new Intent();
             intent.setAction(CLOSE_CAMERA_ACTION_NAME);
+            intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT);
             mContext.sendBroadcast(intent);
         }
     });

Find a functionally equivalent code:com.android.internal.widget.LockPatternUtils.usingBiometricWeak:COMMENT
Method Modifier: public      internal    
Comment:/**
 * @return true if the lockscreen method is set to biometric weak
 */

@@ -1,4 +1,3 @@
 {
-    int quality = (int) getLong(PASSWORD_TYPE_KEY, DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED);
-    return quality == DevicePolicyManager.PASSWORD_QUALITY_BIOMETRIC_WEAK;
+    return usingBiometricWeak(getCurrentOrCallingUserId());
 }

Find a functionally equivalent code:android.webkit.WebSettings.setAllowFileAccess:COMMENT
<android.webkit.WebSettings: void setAllowFileAccess(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Enables or disables file access within WebView. File access is enabled by
 * default.  Note that this enables or disables file system access only.
 * Assets and resources are still accessible using file:///android_asset and
 * file:///android_res.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.net.RssiCurve.lookupScore:COMMENT
Method Modifier: public      
Comment:/**
 * Lookup the score for a given RSSI value.
 *
 * @param rssi The RSSI to lookup. If the RSSI falls below the start of the curve, the score at
 * the start of the curve will be returned. If it falls after the end of the curve, the
 * score at the end of the curve will be returned.
 * @return the score for the given RSSI.
 */

@@ -1,10 +1,3 @@
 {
-    int index = (rssi - start) / bucketWidth;
-    // Snap the index to the closest bucket if it falls outside the curve.
-    if (index < 0) {
-        index = 0;
-    } else if (index > rssiBuckets.length - 1) {
-        index = rssiBuckets.length - 1;
-    }
-    return rssiBuckets[index];
+    return lookupScore(rssi, false);
 }

Find a functionally equivalent code:com.android.server.wm.AppTransition.createAspectScaledThumbnailEnterExitAnimationLocked:COMMENT
Method Modifier: 
Comment:/**
 * This alternate animation is created when we are doing a thumbnail transition, for the
 * activity that is leaving, and the activity that is entering.
 */

@@ -114,118 +114,119 @@
         default:
             throw new RuntimeException("Invalid thumbnail transition state");
     }
-    return prepareThumbnailAnimationWithDuration(a, appWidth, appHeight, THUMBNAIL_APP_TRANSITION_DURATION, mThumbnailFastOutSlowInInterpolator);
+    int duration = Math.max(THUMBNAIL_APP_TRANSITION_ALPHA_DURATION, THUMBNAIL_APP_TRANSITION_DURATION);
+    return prepareThumbnailAnimationWithDuration(a, appWidth, appHeight, duration, mThumbnailFastOutSlowInInterpolator);
 }

Find a functionally equivalent code:android.graphics.drawable.RotateDrawable.setPivotYRelative:COMMENT
Method Modifier: public      
Comment:/**
 * Sets whether the Y pivot value represents a fraction of the drawable
 * height or an absolute value in pixels.
 *
 * @param relative True if the Y pivot represents a fraction of the drawable
 * height, or false if it represents an absolute value in pixels
 *
 * @see #isPivotYRelative()
 */

@@ -1,5 +1,5 @@
 {
-    if (mState.mPivotYRel == relative) {
+    if (mState.mPivotYRel != relative) {
         mState.mPivotYRel = relative;
         invalidateSelf();
     }

Find a functionally equivalent code:com.android.server.TextServicesManagerService.calledFromValidUser:COMMENT
Method Modifier: private     
Comment:// 2) the calling process' user id is identical to the current user id TSMS thinks.

@@ -2,8 +2,8 @@
     final int uid = Binder.getCallingUid();
     final int userId = UserHandle.getUserId(uid);
     if (DBG) {
-        Slog.d(TAG, "--- calledFromForegroundUserOrSystemProcess ? " + "calling uid = " + uid + " system uid = " + Process.SYSTEM_UID + " calling userId = " + userId + ", foreground user id = " + mSettings.getCurrentUserId());
+        Slog.d(TAG, "--- calledFromForegroundUserOrSystemProcess ? " + "calling uid = " + uid + " system uid = " + Process.SYSTEM_UID + " calling userId = " + userId + ", foreground user id = " + mSettings.getCurrentUserId() + ", calling pid = " + Binder.getCallingPid());
         try {
             final String[] packageNames = AppGlobals.getPackageManager().getPackagesForUid(uid);
             for (int i = 0; i < packageNames.length; ++i) {
@@ -15,22 +15,45 @@
     }
     if (uid == Process.SYSTEM_UID || userId == mSettings.getCurrentUserId()) {
         return true;
-    } else {
-        Slog.w(TAG, "--- IPC called from background users. Ignore. \n" + getStackTrace());
-        return false;
     }
+    // Permits current profile to use TSFM as long as the current text service is the system's
+    // one. This is a tentative solution and should be replaced with fully functional multiuser
+    // support.
+    // TODO: Implement multiuser support in TSMS.
+    final boolean isCurrentProfile = mSettings.isCurrentProfile(userId);
+    if (DBG) {
+        Slog.d(TAG, "--- userId = " + userId + " isCurrentProfile = " + isCurrentProfile);
+    }
+    if (mSettings.isCurrentProfile(userId)) {
+        final SpellCheckerInfo spellCheckerInfo = getCurrentSpellCheckerWithoutVerification();
+        if (spellCheckerInfo != null) {
+            final ServiceInfo serviceInfo = spellCheckerInfo.getServiceInfo();
+            final boolean isSystemSpellChecker = (serviceInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0;
+            if (DBG) {
+                Slog.d(TAG, "--- current spell checker = " + spellCheckerInfo.getPackageName() + " isSystem = " + isSystemSpellChecker);
+            }
+            if (isSystemSpellChecker) {
+                return true;
+            }
+        }
+    }
+    // support is implemented.
+    if (DBG) {
+        Slog.d(TAG, "--- IPC from userId:" + userId + " is being ignored. \n" + getStackTrace());
+    }
+    return false;
 }

Find a functionally equivalent code:android.telephony.SubscriptionManager.getDefaultDataSubId:COMMENT
Method Modifier: public      static      hidden      
Comment:/**
 * @hide
 */

@@ -1,5 +1,5 @@
 {
-    long subId = INVALID_SUB_ID;
+    int subId = INVALID_SUBSCRIPTION_ID;
     try {
         ISub iSub = ISub.Stub.asInterface(ServiceManager.getService("isub"));
         if (iSub != null) {

Find a functionally equivalent code:com.android.systemui.recents.views.TaskView.shouldClipViewInStack:COMMENT
Method Modifier: 
Comment:/**
 * Returns whether this view should be clipped, or any views below should clip against this
 * view.
 */

@@ -1,3 +1,3 @@
 {
-    return mClipViewInStack && !mIsFullScreenView && (getVisibility() == View.VISIBLE);
+    return mClipViewInStack && (getVisibility() == View.VISIBLE);
 }

Find a functionally equivalent code:android.webkit.WebSettings.supportMultipleWindows:COMMENT
<android.webkit.WebSettings: boolean supportMultipleWindows()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets whether the WebView supports multiple windows.
 *
 * @return true if the WebView supports multiple windows
 * @see #setSupportMultipleWindows
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.server.location.GpsLocationProvider.setEngineCapabilities:COMMENT
Method Modifier: private     
Comment:/**
 * called from native code to inform us what the GPS engine capabilities are
 */

@@ -4,7 +4,9 @@
         mPeriodicTimeInjection = true;
         requestUtcTime();
     }
+    mGpsMeasurementsProvider.onCapabilitiesUpdated((capabilities & GPS_CAPABILITY_MEASUREMENTS) == GPS_CAPABILITY_MEASUREMENTS);
+    mGpsNavigationMessageProvider.onCapabilitiesUpdated((capabilities & GPS_CAPABILITY_NAV_MESSAGES) == GPS_CAPABILITY_NAV_MESSAGES);
 }

Find a functionally equivalent code:com.android.internal.widget.LockPatternUtils.savedPatternExists:COMMENT
Method Modifier: public      internal    
Comment:/**
 * Check to see if the user has stored a lock pattern.
 * @return Whether a saved pattern exists.
 */

@@ -1,7 +1,3 @@
 {
-    try {
-        return getLockSettings().havePattern(getCurrentOrCallingUserId());
-    } catch (RemoteException re) {
-        return false;
-    }
+    return savedPatternExists(getCurrentOrCallingUserId());
 }

Find a functionally equivalent code:android.telephony.SubscriptionManager.putPhoneIdAndSubIdExtra:COMMENT
Method Modifier: public      static      hidden      
Comment:/**
 * @hide
 */

@@ -1,5 +1,5 @@
 {
-    long[] subIds = SubscriptionManager.getSubId(phoneId);
+    int[] subIds = SubscriptionManager.getSubId(phoneId);
     if (subIds != null && subIds.length > 0) {
         putPhoneIdAndSubIdExtra(intent, phoneId, subIds[0]);
     } else {

Find a functionally equivalent code:android.widget.Switch.hitThumb:COMMENT
Method Modifier: private     
Comment:/**
 * @return true if (x, y) is within the target area of the switch thumb
 */

@@ -1,4 +1,7 @@
 {
+    if (mThumbDrawable == null) {
+        return false;
+    }
     // Relies on mTempRect, MUST be called first!
     final int thumbOffset = getThumbOffset();
     mThumbDrawable.getPadding(mTempRect);

Find a functionally equivalent code:android.webkit.WebSettings.getDefaultFontSize:COMMENT
<android.webkit.WebSettings: int getDefaultFontSize()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets the default font size.
 *
 * @return a non-negative integer between 1 and 72
 * @see #setDefaultFontSize
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.hardware.camera2.DngCreator.convertToRGB:COMMENT
Method Modifier: private     static      
Comment:/**
 * Generate a direct RGB {@link ByteBuffer} from a YUV420_888 {@link Image}.
 */

@@ -19,27 +19,27 @@
     int vPixStride = vPlane.getPixelStride();
     int uPixStride = uPlane.getPixelStride();
     byte[] yuvPixel = { 0, 0, 0 };
-    byte[] yFullRow = new byte[yPixStride * width];
-    byte[] uFullRow = new byte[uPixStride * width / 2];
-    byte[] vFullRow = new byte[vPixStride * width / 2];
+    byte[] yFullRow = new byte[yPixStride * (width - 1) + 1];
+    byte[] uFullRow = new byte[uPixStride * (width / 2 - 1) + 1];
+    byte[] vFullRow = new byte[vPixStride * (width / 2 - 1) + 1];
     byte[] finalRow = new byte[BYTES_PER_RGB_PIX * width];
     for (int i = 0; i < height; i++) {
         int halfH = i / 2;

Find a functionally equivalent code:android.widget.SearchView.setSearchableInfo:COMMENT
Method Modifier: public      
Comment:/**
 * Sets the SearchableInfo for this SearchView. Properties in the SearchableInfo are used
 * to display labels, hints, suggestions, create intents for launching search results screens
 * and controlling other affordances such as a voice button.
 *
 * @param searchable a SearchableInfo can be retrieved from the SearchManager, for a specific
 * activity or a global search provider.
 */

@@ -9,15 +9,15 @@
     if (mVoiceButtonEnabled) {
         // Disable the microphone on the keyboard, as a mic is displayed near the text box
         // TODO: use imeOptions to disable voice input when the new API will be available
-        mQueryTextView.setPrivateImeOptions(IME_OPTION_NO_MICROPHONE);
+        mSearchSrcTextView.setPrivateImeOptions(IME_OPTION_NO_MICROPHONE);
     }
     updateViewsVisibility(isIconified());
 }

Find a functionally equivalent code:android.app.ContextImpl.ensureDirsExistOrFilter:COMMENT
Method Modifier: private     
Comment:/**
 * Ensure that given directories exist, trying to create them if missing. If
 * unable to create, they are filtered by replacing with {@code null}.
 */

@@ -12,18 +12,18 @@
                     int res = -1;
                     try {
                         res = mount.mkdirs(getPackageName(), dir.getAbsolutePath());
-                    } catch (RemoteException e) {
+                    } catch (Exception ignored) {
                     }
                     if (res != 0) {
                         Log.w(TAG, "Failed to ensure directory: " + dir);

Find a functionally equivalent code:android.webkit.WebIconDatabase.bulkRequestIconForPageUrl:COMMENT
<android.webkit.WebIconDatabase: void bulkRequestIconForPageUrl(ContentResolver,String,IconListener)>
Method Modifier: public      abstract    hidden      
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
Comment:/**
 * {@hide}
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.widget.SearchView.getQuery:COMMENT
Method Modifier: public      
Comment:/**
 * Returns the query string currently in the text field.
 *
 * @return the query string
 */

@@ -1,3 +1,3 @@
 {
-    return mQueryTextView.getText();
+    return mSearchSrcTextView.getText();
 }

Find a functionally equivalent code:android.webkit.CookieManager.removeAllCookie:COMMENT
<android.webkit.CookieManager: void removeAllCookie()>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
Comment:/**
 * Removes all cookies.
 * @deprecated Use {@link #removeAllCookies(ValueCallback)} instead.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.media.tv.TvInputManager.Session.getTracks:COMMENT
Method Modifier: public      
Comment:/**
 * Returns the list of tracks for a given type. Returns {@code null} if the information is
 * not available.
 *
 * @param type The type of the tracks. The type can be {@link TvTrackInfo#TYPE_AUDIO},
 * {@link TvTrackInfo#TYPE_VIDEO} or {@link TvTrackInfo#TYPE_SUBTITLE}.
 * @return the list of tracks for the given type.
 */

@@ -1,19 +1,21 @@
 {
-    if (type == TvTrackInfo.TYPE_AUDIO) {
-        if (mAudioTracks == null) {
-            return null;
+    synchronized (mTrackLock) {
+        if (type == TvTrackInfo.TYPE_AUDIO) {
+            if (mAudioTracks == null) {
+                return null;
+            }
+            return new ArrayList<TvTrackInfo>(mAudioTracks);
+        } else if (type == TvTrackInfo.TYPE_VIDEO) {
+            if (mVideoTracks == null) {
+                return null;
+            }
+            return new ArrayList<TvTrackInfo>(mVideoTracks);
+        } else if (type == TvTrackInfo.TYPE_SUBTITLE) {
+            if (mSubtitleTracks == null) {
+                return null;
+            }
+            return new ArrayList<TvTrackInfo>(mSubtitleTracks);
         }
-        return mAudioTracks;
-    } else if (type == TvTrackInfo.TYPE_VIDEO) {
-        if (mVideoTracks == null) {
-            return null;
-        }
-        return mVideoTracks;
-    } else if (type == TvTrackInfo.TYPE_SUBTITLE) {
-        if (mSubtitleTracks == null) {
-            return null;
-        }
-        return mSubtitleTracks;
     }
     throw new IllegalArgumentException("invalid type: " + type);
 }

Find a functionally equivalent code:android.widget.SearchView.getImeOptions:COMMENT
Method Modifier: public      
Comment:/**
 * Returns the IME options set on the query text field.
 * @return the ime options
 * @see TextView#setImeOptions(int)
 *
 * @attr ref android.R.styleable#SearchView_imeOptions
 */

@@ -1,3 +1,3 @@
 {
-    return mQueryTextView.getImeOptions();
+    return mSearchSrcTextView.getImeOptions();
 }

Find a functionally equivalent code:com.android.systemui.recents.misc.SystemServicesProxy.bindSearchAppWidget:COMMENT
Method Modifier: public      
Comment:/**
 * Resolves and binds the search app widget that is to appear in the recents.
 */

@@ -13,18 +13,19 @@
     Bundle opts = new Bundle();
     opts.putInt(AppWidgetManager.OPTION_APPWIDGET_HOST_CATEGORY, AppWidgetProviderInfo.WIDGET_CATEGORY_SEARCHBOX);
     if (!mAwm.bindAppWidgetIdIfAllowed(searchWidgetId, searchWidgetInfo.provider, opts)) {
+        host.deleteAppWidgetId(searchWidgetId);
         return null;
     }
     return new Pair<Integer, AppWidgetProviderInfo>(searchWidgetId, searchWidgetInfo);

Find a functionally equivalent code:com.android.internal.widget.LockPatternUtils.clearLock:COMMENT
Method Modifier: public      internal    
Comment:/**
 * Clear any lock pattern or password.
 */

@@ -1,10 +1,10 @@
 {
     if (!isFallback)
-        deleteGallery();
-    saveLockPassword(null, DevicePolicyManager.PASSWORD_QUALITY_SOMETHING);
-    setLockPatternEnabled(false);
-    saveLockPattern(null);
-    setLong(PASSWORD_TYPE_KEY, DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED);
-    setLong(PASSWORD_TYPE_ALTERNATE_KEY, DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED);
-    onAfterChangingPassword();
+        deleteGallery(userHandle);
+    saveLockPassword(null, DevicePolicyManager.PASSWORD_QUALITY_SOMETHING, isFallback, userHandle);
+    setLockPatternEnabled(false, userHandle);
+    saveLockPattern(null, isFallback, userHandle);
+    setLong(PASSWORD_TYPE_KEY, DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED, userHandle);
+    setLong(PASSWORD_TYPE_ALTERNATE_KEY, DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED, userHandle);
+    onAfterChangingPassword(userHandle);
 }

Find a functionally equivalent code:android.webkit.WebSettings.setDisplayZoomControls:COMMENT
<android.webkit.WebSettings: void setDisplayZoomControls(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets whether the WebView should display on-screen zoom controls when
 * using the built-in zoom mechanisms. See {@link #setBuiltInZoomControls}.
 * The default is true.
 *
 * @param enabled whether the WebView should display on-screen zoom controls
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.net.NetworkIdentity.buildNetworkIdentity:COMMENT
Method Modifier: public      static      
Comment:/**
 * Build a {@link NetworkIdentity} from the given {@link NetworkState},
 * assuming that any mobile networks are using the current IMSI.
 */

@@ -1,19 +1,15 @@
 {
     final int type = state.networkInfo.getType();
     final int subType = state.networkInfo.getSubtype();
-    // TODO: consider moving subscriberId over to LinkCapabilities, so it
-    // comes from an authoritative source.
     String subscriberId = null;
     String networkId = null;
     boolean roaming = false;
     if (isNetworkTypeMobile(type)) {
-        final TelephonyManager telephony = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
-        roaming = telephony.isNetworkRoaming();
-        if (state.subscriberId != null) {
-            subscriberId = state.subscriberId;
-        } else {
-            subscriberId = telephony.getSubscriberId();
+        if (state.subscriberId == null) {
+            Slog.w(TAG, "Active mobile network without subscriber!");
         }
+        subscriberId = state.subscriberId;
+        roaming = state.networkInfo.isRoaming();
     } else if (type == TYPE_WIFI) {
         if (state.networkId != null) {
             networkId = state.networkId;

Find a functionally equivalent code:android.webkit.WebSettings.setSansSerifFontFamily:COMMENT
<android.webkit.WebSettings: void setSansSerifFontFamily(String)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets the sans-serif font family name. The default is "sans-serif".
 *
 * @param font a font family name
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.media.AudioManager.unregisterAudioPortUpdateListener:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * Unregister an audio port list update listener.
 * @hide
 */

@@ -1,3 +1,3 @@
 {
-    mAudioPortEventHandler.unregisterListener(l);
+    sAudioPortEventHandler.unregisterListener(l);
 }

Find a functionally equivalent code:android.os.BaseBundle.putBooleanArray:COMMENT
<android.os.BaseBundle: void putBooleanArray(String,boolean[])>
Method Modifier: public      
Method Modifier: No          
Method Updated:  Yes         
Comment:/**
 * Inserts a boolean array value into the mapping of this Bundle, replacing
 * any existing value for the given key.  Either key or value may be null.
 *
 * @param key a String, or null
 * @param value a boolean array object, or null
 */


Find a functionally equivalent code:android.view.accessibility.AccessibilityNodeInfo.init:COMMENT
Method Modifier: private     
Comment:/**
 * Initializes this instance from another one.
 *
 * @param other The other instance.
 */

@@ -4,9 +4,11 @@
     mParentNodeId = other.mParentNodeId;
     mLabelForId = other.mLabelForId;
     mLabeledById = other.mLabeledById;
+    mTraversalBefore = other.mTraversalBefore;
+    mTraversalAfter = other.mTraversalAfter;
     mWindowId = other.mWindowId;
     mConnectionId = other.mConnectionId;
     mBoundsInParent.set(other.mBoundsInParent);

Find a functionally equivalent code:com.android.keyguard.KeyguardSecurityContainer.showNextSecurityScreenOrFinish:COMMENT
Method Modifier: 
Comment:/**
 * Shows the next security screen if there is one.
 * @param authenticated true if the user entered the correct authentication
 * @param authenticated
 * @return true if keyguard is done
 */

@@ -39,46 +39,44 @@
                 showPrimarySecurityScreen(false);
                 break;
         }
-    } else {
-        showPrimarySecurityScreen(false);
     }
     if (finish) {
         mSecurityCallback.finish();

Find a functionally equivalent code:android.graphics.drawable.GradientDrawable.ensureValidRect:COMMENT
Method Modifier: private     
Comment:/**
 * This checks mGradientIsDirty, and if it is true, recomputes both our drawing
 * rectangle (mRect) and the gradient itself, since it depends on our
 * rectangle too.
 * @return true if the resulting rectangle is not empty, false otherwise
 */

@@ -71,77 +71,81 @@
                 y0 = r.top + (r.bottom - r.top) * st.mCenterY;
                 float radius = st.mGradientRadius;
                 if (st.mGradientRadiusType == RADIUS_TYPE_FRACTION) {
-                    radius *= Math.min(st.mWidth, st.mHeight);
+                    // Fall back to parent width or height if intrinsic
+                    // size is not specified.
+                    final float width = st.mWidth >= 0 ? st.mWidth : r.width();
+                    final float height = st.mHeight >= 0 ? st.mHeight : r.height();
+                    radius *= Math.min(width, height);
                 } else if (st.mGradientRadiusType == RADIUS_TYPE_FRACTION_PARENT) {
                     radius *= Math.min(r.width(), r.height());
                 }
@@ -79,87 +83,91 @@
                     radius *= getLevel() / 10000.0f;
                 }
                 mGradientRadius = radius;
-                if (radius == 0) {
-                    // We can't have a shader with zero radius, so let's
-                    // have a very, very small radius.
+                if (radius <= 0) {
+                    // We can't have a shader with non-positive radius, so
+                    // let's have a very, very small radius.
                     radius = 0.001f;
                 }
                 mFillPaint.setShader(new RadialGradient(x0, y0, radius, colors, null, Shader.TileMode.CLAMP));

Find a functionally equivalent code:android.view.ViewGroup.resolvePadding:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * @hide
 */

@@ -3,9 +3,9 @@
     int count = getChildCount();
     for (int i = 0; i < count; i++) {
         final View child = getChildAt(i);
-        if (child.isLayoutDirectionInherited()) {
+        if (child.isLayoutDirectionInherited() && !child.isPaddingResolved()) {
             child.resolvePadding();
         }
     }

Find a functionally equivalent code:android.hardware.camera2.legacy.SurfaceTextureRenderer.configureSurfaces:COMMENT
Method Modifier: public      
Comment:/**
 * Set a collection of output {@link Surface}s that can be drawn to.
 *
 * @param surfaces a {@link Collection} of surfaces.
 */

@@ -4,21 +4,23 @@
         Log.w(TAG, "No output surfaces configured for GL drawing.");
         return;
     }
-    for (Surface s : surfaces) {
+    for (Pair<Surface, Size> p : surfaces) {
+        Surface s = p.first;
+        Size surfaceSize = p.second;
         // If pixel conversions aren't handled by egl, use a pbuffer
         try {
+            EGLSurfaceHolder holder = new EGLSurfaceHolder();
+            holder.surface = s;
+            holder.width = surfaceSize.getWidth();
+            holder.height = surfaceSize.getHeight();
             if (LegacyCameraDevice.needsConversion(s)) {
                 // Always override to YV12 output for YUV surface formats.
                 LegacyCameraDevice.setSurfaceFormat(s, ImageFormat.YV12);
-                EGLSurfaceHolder holder = new EGLSurfaceHolder();
-                holder.surface = s;
                 mConversionSurfaces.add(holder);
             } else {
-                EGLSurfaceHolder holder = new EGLSurfaceHolder();
-                holder.surface = s;
                 mSurfaces.add(holder);
             }
         } catch (LegacyExceptionUtils.BufferQueueAbandonedException e) {

Find a functionally equivalent code:com.android.internal.policy.impl.PhoneWindowManager.beginPostLayoutPolicyLw:COMMENT
Method Modifier: public      internal    
Comment:/**
 * {@inheritDoc}
 */

@@ -12,15 +12,17 @@
     mShowingLockscreen = false;
     mShowingDream = false;
     mWinShowWhenLocked = null;
+    mKeyguardSecure = isKeyguardSecure();
+    mKeyguardSecureIncludingHidden = mKeyguardSecure && (mKeyguardDelegate != null && mKeyguardDelegate.isShowing());
 }

Find a functionally equivalent code:android.animation.PropertyValuesHolder.setupSetterAndGetter:COMMENT
Method Modifier: 
Comment:/**
 * Internal function (called from ObjectAnimator) to set up the setter and getter
 * prior to running the animation. If the setter has not been manually set for this
 * object, it will be derived automatically given the property name, target object, and
 * types of values supplied. If no getter has been set, it will be supplied iff any of the
 * supplied values was null. If there is a null value, then the getter (supplied or derived)
 * will be called to set those null values to the current value of the property
 * on the target object.
 * @param target The object on which the setter (and possibly getter) exist.
 */

@@ -4,10 +4,10 @@
         // check to make sure that mProperty is on the class of target
         try {
             Object testValue = null;
-            ArrayList<Keyframe> keyframes = mKeyframes.getKeyframes();
+            List<Keyframe> keyframes = mKeyframes.getKeyframes();
             int keyframeCount = keyframes == null ? 0 : keyframes.size();
             for (int i = 0; i < keyframeCount; i++) {
                 Keyframe kf = keyframes.get(i);
@@ -22,51 +22,54 @@
             mProperty = null;
         }
     }
-    Class targetClass = target.getClass();
-    if (mSetter == null) {
-        setupSetter(targetClass);
-    }
-    ArrayList<Keyframe> keyframes = mKeyframes.getKeyframes();
-    int keyframeCount = keyframes == null ? 0 : keyframes.size();
-    for (int i = 0; i < keyframeCount; i++) {
-        Keyframe kf = keyframes.get(i);
-        if (!kf.hasValue() || kf.valueWasSetOnStart()) {
-            if (mGetter == null) {
-                setupGetter(targetClass);
+    // We can't just say 'else' here because the catch statement sets mProperty to null.
+    if (mProperty == null) {
+        Class targetClass = target.getClass();
+        if (mSetter == null) {
+            setupSetter(targetClass);
+        }
+        List<Keyframe> keyframes = mKeyframes.getKeyframes();
+        int keyframeCount = keyframes == null ? 0 : keyframes.size();
+        for (int i = 0; i < keyframeCount; i++) {
+            Keyframe kf = keyframes.get(i);
+            if (!kf.hasValue() || kf.valueWasSetOnStart()) {
                 if (mGetter == null) {
-                    // Already logged the error - just return to avoid NPE
-                    return;
+                    setupGetter(targetClass);
+                    if (mGetter == null) {
+                        // Already logged the error - just return to avoid NPE
+                        return;
+                    }
                 }
-            }
-            try {
-                Object value = convertBack(mGetter.invoke(target));
-                kf.setValue(value);
-                kf.setValueWasSetOnStart(true);
-            } catch (InvocationTargetException e) {
-                Log.e("PropertyValuesHolder", e.toString());
-            } catch (IllegalAccessException e) {
-                Log.e("PropertyValuesHolder", e.toString());
+                try {
+                    Object value = convertBack(mGetter.invoke(target));
+                    kf.setValue(value);
+                    kf.setValueWasSetOnStart(true);
+                } catch (InvocationTargetException e) {
+                    Log.e("PropertyValuesHolder", e.toString());
+                } catch (IllegalAccessException e) {
+                    Log.e("PropertyValuesHolder", e.toString());
+                }
             }
         }
     }

Find a functionally equivalent code:android.content.pm.PackageManagerTests.testMultipleUpgradeKSWithSigningKey:COMMENT
Method Modifier: public      
Comment:/*
     * Check if an apk signed by multiple keys, one of which is its signing key,
     * but none of which is an upgrade key, can upgrade an app.
     */

@@ -1,3 +1,3 @@
 {
-    replaceCerts(R.raw.keyset_sau_ub, R.raw.keyset_sa_ua, true, true, PackageManager.INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES);
+    replaceCerts(R.raw.keyset_sau_ub, R.raw.keyset_sa_ua, true, true, PackageManager.INSTALL_FAILED_UPDATE_INCOMPATIBLE);
 }

Find a functionally equivalent code:android.webkit.CookieManager.flush:COMMENT
<android.webkit.CookieManager: void flush()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Ensures all cookies currently accessible through the getCookie API are
 * written to persistent storage.
 * This call will block the caller until it is done and may perform I/O.
 */

@@ -1,3 +1 @@
-{
-    flushCookieStore();
-}
+

Find a functionally equivalent code:android.telephony.SubscriptionManager.isValidSlotId:COMMENT
Method Modifier: public      static      hidden      
Comment:/**
 * @hide
 */

@@ -1,4 +1,3 @@
 {
-    // value is invalid.
-    return slotId != INVALID_SLOT_ID && slotId >= 0 && slotId < TelephonyManager.getDefault().getSimCount();
+    return slotId >= 0 && slotId < TelephonyManager.getDefault().getSimCount();
 }

Find a functionally equivalent code:android.net.LinkAddress.isGlobalPreferred:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * Returns true if this {@code LinkAddress} is global scope and preferred.
 * @hide
 */

@@ -1,3 +1,9 @@
 {
-    return (scope == RT_SCOPE_UNIVERSE && (flags & (IFA_F_DADFAILED | IFA_F_DEPRECATED | IFA_F_TENTATIVE)) == 0L);
+    /**
+     * Note that addresses flagged as IFA_F_OPTIMISTIC are
+     * simultaneously flagged as IFA_F_TENTATIVE (when the tentative
+     * state has cleared either DAD has succeeded or failed, and both
+     * flags are cleared regardless).
+     */
+    return (scope == RT_SCOPE_UNIVERSE && !isIPv6ULA() && (flags & (IFA_F_DADFAILED | IFA_F_DEPRECATED)) == 0L && ((flags & IFA_F_TENTATIVE) == 0L || (flags & IFA_F_OPTIMISTIC) != 0L));
 }

Find a functionally equivalent code:com.android.systemui.recents.RecentsConfiguration.update:COMMENT
Method Modifier: 
Comment:/**
 * Updates the state, given the specified context
 */

@@ -33,43 +33,47 @@
     taskStackOverscrollPct = stackOverscrollPctValue.getFloat();
     taskStackMaxDim = res.getInteger(R.integer.recents_max_task_stack_view_dim);
     taskStackTopPaddingPx = res.getDimensionPixelSize(R.dimen.recents_stack_top_padding);
+    // Transition
+    transitionEnterFromAppDelay = res.getInteger(R.integer.recents_enter_from_app_transition_duration);
+    transitionEnterFromHomeDelay = res.getInteger(R.integer.recents_enter_from_home_transition_duration);
     // Task view animation and styles
-    taskViewEnterFromHomeDelay = res.getInteger(R.integer.recents_animate_task_enter_from_home_delay);
-    taskViewEnterFromHomeDuration = res.getInteger(R.integer.recents_animate_task_enter_from_home_duration);
-    taskViewEnterFromHomeStaggerDelay = res.getInteger(R.integer.recents_animate_task_enter_from_home_stagger_delay);
-    taskViewExitToHomeDuration = res.getInteger(R.integer.recents_animate_task_exit_to_home_duration);
+    taskViewEnterFromAppDuration = res.getInteger(R.integer.recents_task_enter_from_app_duration);
+    taskViewEnterFromHomeDuration = res.getInteger(R.integer.recents_task_enter_from_home_duration);
+    taskViewEnterFromHomeStaggerDelay = res.getInteger(R.integer.recents_task_enter_from_home_stagger_delay);
+    taskViewExitToAppDuration = res.getInteger(R.integer.recents_task_exit_to_app_duration);
+    taskViewExitToHomeDuration = res.getInteger(R.integer.recents_task_exit_to_home_duration);
     taskViewRemoveAnimDuration = res.getInteger(R.integer.recents_animate_task_view_remove_duration);
     taskViewRemoveAnimTranslationXPx = res.getDimensionPixelSize(R.dimen.recents_task_view_remove_anim_translation_x);
     taskViewRoundedCornerRadiusPx = res.getDimensionPixelSize(R.dimen.recents_task_view_rounded_corners_radius);
@@ -58,75 +62,73 @@
     taskBarViewAffiliationColorMinAlpha = affMinAlphaPctValue.getFloat();
     // Task bar size & animations
     taskBarHeight = res.getDimensionPixelSize(R.dimen.recents_task_bar_height);
-    taskBarEnterAnimDuration = res.getInteger(R.integer.recents_animate_task_bar_enter_duration);
-    taskBarEnterAnimDelay = res.getInteger(R.integer.recents_animate_task_bar_enter_delay);
-    taskBarExitAnimDuration = res.getInteger(R.integer.recents_animate_task_bar_exit_duration);
     taskBarDismissDozeDelaySeconds = res.getInteger(R.integer.recents_task_bar_dismiss_delay_seconds);
-    // Lock to app
-    taskViewLockToAppButtonHeight = res.getDimensionPixelSize(R.dimen.recents_task_view_lock_to_app_button_height);
-    taskViewLockToAppShortAnimDuration = res.getInteger(R.integer.recents_animate_lock_to_app_button_short_duration);
-    taskViewLockToAppLongAnimDuration = res.getInteger(R.integer.recents_animate_lock_to_app_button_long_duration);
     // Nav bar scrim
     navBarScrimEnterDuration = res.getInteger(R.integer.recents_nav_bar_scrim_enter_duration);
     // Misc
     useHardwareLayers = res.getBoolean(R.bool.config_recents_use_hardware_layers);
     altTabKeyDelay = res.getInteger(R.integer.recents_alt_tab_key_delay);
     fakeShadows = res.getBoolean(R.bool.config_recents_fake_shadows);
+    svelteLevel = res.getInteger(R.integer.recents_svelte_level);
 }

Find a functionally equivalent code:android.webkit.WebSettings.getPluginState:COMMENT
<android.webkit.WebSettings: PluginState getPluginState()>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
Comment:/**
 * Gets the current state regarding whether plugins are enabled.
 *
 * @return the plugin state as a {@link PluginState} value
 * @see #setPluginState
 * @deprecated Plugins will not be supported in future, and should not be used.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebSettings.getDatabaseEnabled:COMMENT
<android.webkit.WebSettings: boolean getDatabaseEnabled()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets whether the database storage API is enabled.
 *
 * @return true if the database storage API is enabled
 * @see #setDatabaseEnabled
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.app.ActivityThread.ApplicationThread.scheduleLaunchActivity:COMMENT
Method Modifier: public      final       
Comment:// activity itself back to the activity manager. (matters more with ipc)

@@ -4,9 +4,10 @@
     r.token = token;
     r.ident = ident;
     r.intent = intent;
+    r.referrer = referrer;
     r.voiceInteractor = voiceInteractor;
     r.activityInfo = info;
     r.compatInfo = compatInfo;

Find a functionally equivalent code:android.widget.RadialTimePickerView.getCurrentMinute:COMMENT
Method Modifier: public      
Comment:// Returns minutes in 0-59 range

@@ -1,3 +1,3 @@
 {
-    return (mSelectionDegrees[MINUTES] / DEGREES_FOR_ONE_MINUTE);
+    return getMinuteForDegrees(mSelectionDegrees[MINUTES]);
 }

Find a functionally equivalent code:android.net.RssiCurve.equals:COMMENT
Method Modifier: public      
Comment:/**
 * Determine if two RSSI curves are defined in the same way.
 *
 * <p>Note that two curves can be equivalent but defined differently, e.g. if one bucket in one
 * curve is split into two buckets in another. For the purpose of this method, these curves are
 * not considered equal to each other.
 */

@@ -4,8 +4,8 @@
     if (o == null || getClass() != o.getClass())
         return false;
     RssiCurve rssiCurve = (RssiCurve) o;
-    return start == rssiCurve.start && bucketWidth == rssiCurve.bucketWidth && Arrays.equals(rssiBuckets, rssiCurve.rssiBuckets);
+    return start == rssiCurve.start && bucketWidth == rssiCurve.bucketWidth && Arrays.equals(rssiBuckets, rssiCurve.rssiBuckets) && activeNetworkRssiBoost == rssiCurve.activeNetworkRssiBoost;
 }

Find a functionally equivalent code:android.webkit.WebView.clearClientCertPreferences:COMMENT
Method Modifier: public      static      
Comment:/**
 * Clears the client certificate preferences stored in response
 * to proceeding/cancelling client cert requests. Note that Webview
 * automatically clears these preferences when it receives a
 * {@link KeyChain#ACTION_STORAGE_CHANGED} intent. The preferences are
 * shared by all the webviews that are created by the embedder application.
 *
 * @param onCleared  A runnable to be invoked when client certs are cleared.
 * The embedder can pass null if not interested in the
 * callback. The runnable will be called in UI thread.
 */

@@ -1,5 +1,5 @@
 {
-    if (DebugFlags.TRACE_API)
+    if (TRACE)
         Log.d(LOGTAG, "clearClientCertPreferences");
     getFactory().getStatics().clearClientCertPreferences(onCleared);
 }

Find a functionally equivalent code:android.webkit.URLUtil.guessUrl:COMMENT
Method Modifier: public      static      
Comment:/**
 * Cleans up (if possible) user-entered web addresses
 */

@@ -1,7 +1,7 @@
 {
     String retVal = inUrl;
     WebAddress webAddress;
-    if (DebugFlags.URL_UTIL)
+    if (TRACE)
         Log.v(LOGTAG, "guessURL before queueRequest: " + inUrl);
     if (inUrl.length() == 0)
         return inUrl;
@@ -23,29 +23,29 @@
     try {
         webAddress = new WebAddress(inUrl);
     } catch (ParseException ex) {
-        if (DebugFlags.URL_UTIL) {
+        if (TRACE) {
             Log.v(LOGTAG, "smartUrlFilter: failed to parse url = " + inUrl);
         }
         return retVal;

Find a functionally equivalent code:com.android.systemui.recents.AlternateRecentsComponent.getThumbnailTransitionTransform:COMMENT
Method Modifier: 
Comment:/**
 * Returns the transition rect for the given task id.
 */

@@ -1,10 +1,4 @@
 {
-    // Get the stack of tasks that we are animating into
-    RecentsTaskLoader loader = RecentsTaskLoader.getInstance();
-    TaskStack stack = loader.getTaskStack(mSystemServicesProxy, mContext.getResources(), runningTaskId, -1, false, isTopTaskHome, null, null);
-    if (stack.getTaskCount() == 0) {
-        return null;
-    }
     // Find the running task in the TaskStack
     Task task = null;
     ArrayList<Task> tasks = stack.getTasks();
@@ -25,32 +19,25 @@
         task = tasks.get(tasks.size() - 1);
     }
     // Get the transform for the running task
-    mDummyStackView.updateMinMaxScrollForStack(stack, mTriggeredFromAltTab, isTopTaskHome);
-    mDummyStackView.getScroller().setStackScrollToInitialState();
-    mTmpTransform = mDummyStackView.getStackAlgorithm().getStackTransform(task, mDummyStackView.getScroller().getStackScroll(), mTmpTransform, null);
+    stackView.getScroller().setStackScrollToInitialState();
+    mTmpTransform = stackView.getStackAlgorithm().getStackTransform(task, stackView.getScroller().getStackScroll(), mTmpTransform, null);
     return mTmpTransform;
 }

Find a functionally equivalent code:android.widget.TextView.getIterableTextForAccessibility:COMMENT
Method Modifier: public      hidden      
Comment:/**
 * @hide
 */

@@ -1,6 +1,3 @@
 {
-    if (!(mText instanceof Spannable)) {
-        setText(mText, BufferType.SPANNABLE);
-    }
     return mText;
 }

Find a functionally equivalent code:com.android.providers.settings.DatabaseHelper.loadVolumeLevels:COMMENT
Method Modifier: private     
Comment:/**
 * Loads the default volume levels. It is actually inserting the index of
 * the volume array for each of the volume controls.
 *
 * @param db the database to insert the volume levels into
 */

@@ -2,14 +2,14 @@
     SQLiteStatement stmt = null;
     try {
         stmt = db.compileStatement("INSERT OR IGNORE INTO system(name,value)" + " VALUES(?,?);");
-        loadSetting(stmt, Settings.System.VOLUME_MUSIC, AudioManager.DEFAULT_STREAM_VOLUME[AudioManager.STREAM_MUSIC]);
-        loadSetting(stmt, Settings.System.VOLUME_RING, AudioManager.DEFAULT_STREAM_VOLUME[AudioManager.STREAM_RING]);
-        loadSetting(stmt, Settings.System.VOLUME_SYSTEM, AudioManager.DEFAULT_STREAM_VOLUME[AudioManager.STREAM_SYSTEM]);
-        loadSetting(stmt, Settings.System.VOLUME_VOICE, AudioManager.DEFAULT_STREAM_VOLUME[AudioManager.STREAM_VOICE_CALL]);
-        loadSetting(stmt, Settings.System.VOLUME_ALARM, AudioManager.DEFAULT_STREAM_VOLUME[AudioManager.STREAM_ALARM]);
-        loadSetting(stmt, Settings.System.VOLUME_NOTIFICATION, AudioManager.DEFAULT_STREAM_VOLUME[AudioManager.STREAM_NOTIFICATION]);
-        loadSetting(stmt, Settings.System.VOLUME_BLUETOOTH_SCO, AudioManager.DEFAULT_STREAM_VOLUME[AudioManager.STREAM_BLUETOOTH_SCO]);
+        loadSetting(stmt, Settings.System.VOLUME_MUSIC, AudioService.getDefaultStreamVolume(AudioManager.STREAM_MUSIC));
+        loadSetting(stmt, Settings.System.VOLUME_RING, AudioService.getDefaultStreamVolume(AudioManager.STREAM_RING));
+        loadSetting(stmt, Settings.System.VOLUME_SYSTEM, AudioService.getDefaultStreamVolume(AudioManager.STREAM_SYSTEM));
+        loadSetting(stmt, Settings.System.VOLUME_VOICE, AudioService.getDefaultStreamVolume(AudioManager.STREAM_VOICE_CALL));
+        loadSetting(stmt, Settings.System.VOLUME_ALARM, AudioService.getDefaultStreamVolume(AudioManager.STREAM_ALARM));
+        loadSetting(stmt, Settings.System.VOLUME_NOTIFICATION, AudioService.getDefaultStreamVolume(AudioManager.STREAM_NOTIFICATION));
+        loadSetting(stmt, Settings.System.VOLUME_BLUETOOTH_SCO, AudioService.getDefaultStreamVolume(AudioManager.STREAM_BLUETOOTH_SCO));
         // By default:
         // - ringtones, notification, system and music streams are affected by ringer mode
         // on non voice capable devices (tablets)

Find a functionally equivalent code:com.android.internal.util.StateMachine.dump:COMMENT
Method Modifier: public      internal    
Comment:/**
 * Dump the current state.
 *
 * @param fd
 * @param pw
 * @param args
 */

@@ -1,8 +1,10 @@
 {
+    // Cannot just invoke pw.println(this.toString()) because if the
+    // resulting string is to long it won't be displayed.
     pw.println(getName() + ":");
     pw.println(" total records=" + getLogRecCount());
     for (int i = 0; i < getLogRecSize(); i++) {
-        pw.printf(" rec[%d]: %s\n", i, getLogRec(i).toString());
+        pw.println(" rec[" + i + "]: " + getLogRec(i).toString());
         pw.flush();
     }
     pw.println("curState=" + getCurrentState().getName());

Find a functionally equivalent code:com.android.server.power.PowerManagerService.reallyGoToSleepNoUpdateLocked:COMMENT
Method Modifier: private     
Comment:// Done dozing, drop everything and go to sleep.

@@ -8,16 +8,14 @@
     Trace.traceBegin(Trace.TRACE_TAG_POWER, "reallyGoToSleep");
     try {
         Slog.i(TAG, "Sleeping (uid " + uid + ")...");
-        mDirty |= DIRTY_WAKEFULNESS;
-        mWakefulness = WAKEFULNESS_ASLEEP;
-        setInteractiveStateLocked(false, PowerManager.GO_TO_SLEEP_REASON_TIMEOUT);
+        setWakefulnessLocked(WAKEFULNESS_ASLEEP, PowerManager.GO_TO_SLEEP_REASON_TIMEOUT);
     } finally {
         Trace.traceEnd(Trace.TRACE_TAG_POWER);
     }

Find a functionally equivalent code:com.android.server.wm.WindowManagerService.handleNotObscuredLocked:COMMENT
Method Modifier: private     
Comment:/**
 * Extracted from {@link #performLayoutAndPlaceSurfacesLockedInner} to reduce size of method.
 *
 * @param w WindowState this method is applied to.
 * @param currentTime The time which animations use for calculating transitions.
 * @param innerDw Width of app window.
 * @param innerDh Height of app window.
 */

@@ -23,29 +23,29 @@
             mInnerFields.mUserActivityTimeout = w.mAttrs.userActivityTimeout;
         }
         final int type = attrs.type;
-        if (canBeSeen && (type == TYPE_SYSTEM_DIALOG || type == TYPE_RECENTS_OVERLAY || type == TYPE_SYSTEM_ERROR || (attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0)) {
+        if (canBeSeen && (type == TYPE_SYSTEM_DIALOG || type == TYPE_SYSTEM_ERROR || (attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0)) {
             mInnerFields.mSyswin = true;
         }
         if (canBeSeen) {

Find a functionally equivalent code:android.graphics.drawable.RotateDrawable.setPivotY:COMMENT
Method Modifier: public      
Comment:/**
 * Sets the Y position around which the drawable is rotated.
 *
 * @param pivotY Y position around which to rotate. If the Y pivot is
 * relative, the position represents a fraction of the drawable
 * height. Otherwise, the position represents an absolute value
 * in pixels.
 *
 * @see #getPivotY()
 * @attr ref android.R.styleable#RotateDrawable_pivotY
 */

@@ -1,5 +1,5 @@
 {
-    if (mState.mPivotY == pivotY) {
+    if (mState.mPivotY != pivotY) {
         mState.mPivotY = pivotY;
         invalidateSelf();
     }

Find a functionally equivalent code:android.content.pm.PackageManagerTests.testUpgradeKSWithWrongKey:COMMENT
Method Modifier: public      
Comment:/*
     * Check if an apk signed by a key other than the upgrade keyset can update
     * an app
     */

@@ -1,3 +1,3 @@
 {
-    replaceCerts(R.raw.keyset_sa_ua, R.raw.keyset_sb_ua, true, true, PackageManager.INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES);
+    replaceCerts(R.raw.keyset_sa_ua, R.raw.keyset_sb_ua, true, true, PackageManager.INSTALL_FAILED_UPDATE_INCOMPATIBLE);
 }

Find a functionally equivalent code:com.android.systemui.statusbar.stack.AnimationFilter.applyCombination:COMMENT
Method Modifier: public      
Comment:/**
 * Combines multiple filters into {@code this} filter, using or as the operand .
 *
 * @param events The animation events from the filters to combine.
 */

@@ -2,10 +2,15 @@
     reset();
     int size = events.size();
     for (int i = 0; i < size; i++) {
+        NotificationStackScrollLayout.AnimationEvent ev = events.get(i);
         combineFilter(events.get(i).filter);
-        if (events.get(i).animationType == NotificationStackScrollLayout.AnimationEvent.ANIMATION_TYPE_GO_TO_FULL_SHADE) {
+        if (ev.animationType == NotificationStackScrollLayout.AnimationEvent.ANIMATION_TYPE_GO_TO_FULL_SHADE) {
             hasGoToFullShadeEvent = true;
         }
+        if (ev.animationType == NotificationStackScrollLayout.AnimationEvent.ANIMATION_TYPE_DARK) {
+            hasDarkEvent = true;
+            darkAnimationOriginIndex = ev.darkAnimationOriginIndex;
+        }
     }
 }

Find a functionally equivalent code:com.android.server.am.ActivityStack.startPausingLocked:COMMENT
Method Modifier: default     final       
Comment:/**
 * Start pausing the currently resumed activity.  It is an error to call this if there
 * is already an activity being paused or there is no resumed activity.
 *
 * @param userLeaving True if this should result in an onUserLeaving to the current activity.
 * @param uiSleeping True if this is happening with the user interface going to sleep (the
 * screen turning off).
 * @param resuming True if this is being called as part of resuming the top activity, so
 * we shouldn't try to instigate a resume here.
 * @param dontWait True if the caller does not want to wait for the pause to complete.  If
 * set to true, we will immediately complete the pause here before returning.
 * @return Returns true if an activity now is in the PAUSING state, and we are waiting for
 * it to tell us when it is done.
 */

@@ -27,34 +27,34 @@
     prev.task.touchActiveTime();
     clearLaunchTime(prev);
     final ActivityRecord next = mStackSupervisor.topRunningActivityLocked();
-    if (mService.mHasRecents && (next == null || next.noDisplay || next.task != prev.task)) {
-        prev.updateThumbnail(screenshotActivities(prev), null);
+    if (mService.mHasRecents && (next == null || next.noDisplay || next.task != prev.task || uiSleeping)) {
+        prev.updateThumbnailLocked(screenshotActivities(prev), null);
     }
     stopFullyDrawnTraceIfNeeded();
     mService.updateCpuStats();

Find a functionally equivalent code:com.android.layoutlib.bridge.android.BridgeContext.searchAttrs:COMMENT
Method Modifier: private     
Comment:/**
 * The input int[] attrs is a list of attributes. The returns a list of information about
 * each attributes. The information is (name, isFramework)
 * <p/>
 *
 * @param attrs An attribute array reference given to obtainStyledAttributes.
 * @return List of attribute information.
 */

@@ -1,13 +1,13 @@
 {
     List<Pair<String, Boolean>> results = new ArrayList<Pair<String, Boolean>>(attrs.length);
     // for each attribute, get its name so that we can search it in the style
-    for (int i = 0; i < attrs.length; i++) {
-        Pair<ResourceType, String> resolvedResource = Bridge.resolveResourceId(attrs[i]);
+    for (int attr : attrs) {
+        Pair<ResourceType, String> resolvedResource = Bridge.resolveResourceId(attr);
         boolean isFramework = false;
         if (resolvedResource != null) {
             isFramework = true;
         } else {
-            resolvedResource = mProjectCallback.resolveResourceId(attrs[i]);
+            resolvedResource = mProjectCallback.resolveResourceId(attr);
         }
         if (resolvedResource != null) {
             results.add(Pair.of(resolvedResource.getSecond(), isFramework));

Find a functionally equivalent code:android.graphics.drawable.RotateDrawable.setPivotX:COMMENT
Method Modifier: public      
Comment:/**
 * Sets the X position around which the drawable is rotated.
 *
 * @param pivotX X position around which to rotate. If the X pivot is
 * relative, the position represents a fraction of the drawable
 * width. Otherwise, the position represents an absolute value in
 * pixels.
 *
 * @see #setPivotXRelative(boolean)
 * @attr ref android.R.styleable#RotateDrawable_pivotX
 */

@@ -1,5 +1,5 @@
 {
-    if (mState.mPivotX == pivotX) {
+    if (mState.mPivotX != pivotX) {
         mState.mPivotX = pivotX;
         invalidateSelf();
     }

Find a functionally equivalent code:android.widget.ProgressBar.applyPrimaryProgressTint:COMMENT
Method Modifier: private     
Comment:/**
 * Should only be called if we've already verified that mProgressDrawable
 * and mProgressTintInfo are non-null.
 */

@@ -8,13 +8,17 @@
             if (mProgressTintInfo.mHasProgressTintMode) {
                 target.setTintMode(mProgressTintInfo.mProgressTintMode);
             }
+            // stateful before applying the tint, so let's try again.
+            if (target.isStateful()) {
+                target.setState(getDrawableState());
+            }
         }
     }
 }

Find a functionally equivalent code:com.android.server.wm.AppWindowAnimator.stepAnimationLocked:COMMENT
Method Modifier: 
Comment:// This must be called while inside a transaction.

@@ -46,58 +46,54 @@
     if (WindowManagerService.DEBUG_ANIM)
         Slog.v(TAG, "Animation done in " + mAppToken + ": reportedVisible=" + mAppToken.reportedVisible);
     transformation.clear();
-    final int N = mAllAppWinAnimators.size();
-    for (int i = 0; i < N; i++) {
-        final WindowStateAnimator winAnim = mAllAppWinAnimators.get(i);
-        if (mAppToken.mLaunchTaskBehind) {
-            winAnim.mWin.mExiting = true;
-        }
-        winAnim.finishExit();
+    final int numAllAppWinAnimators = mAllAppWinAnimators.size();
+    for (int i = 0; i < numAllAppWinAnimators; i++) {
+        mAllAppWinAnimators.get(i).finishExit();
     }
     if (mAppToken.mLaunchTaskBehind) {
         try {

Find a functionally equivalent code:android.webkit.WebSettings.setDomStorageEnabled:COMMENT
<android.webkit.WebSettings: void setDomStorageEnabled(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Sets whether the DOM storage API is enabled. The default value is false.
 *
 * @param flag true if the WebView should use the DOM storage API
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.test.ActivityUnitTestCase.startActivity:COMMENT
Method Modifier: protected   
Comment:/**
 * Start the activity under test, in the same way as if it was started by
 * {@link android.content.Context#startActivity Context.startActivity()}, providing the
 * arguments it supplied.  When you use this method to start the activity, it will automatically
 * be stopped by {@link #tearDown}.
 *
 * <p>This method will call onCreate(), but if you wish to further exercise Activity life
 * cycle methods, you must call them yourself from your test case.
 *
 * <p><i>Do not call from your setUp() method.  You must call this method from each of your
 * test methods.</i>
 *
 * @param intent The Intent as if supplied to {@link android.content.Context#startActivity}.
 * @param savedInstanceState The instance state, if you are simulating this part of the life
 * cycle.  Typically null.
 * @param lastNonConfigurationInstance This Object will be available to the
 * Activity if it calls {@link android.app.Activity#getLastNonConfigurationInstance()}.
 * Typically null.
 * @return Returns the Activity that was created
 */

@@ -17,22 +17,23 @@
             String id = null;
             newActivity = (T) getInstrumentation().newActivity(mActivityClass, mActivityContext, token, mApplication, intent, info, title, mMockParent, id, lastNonConfigurationInstance);
         } catch (Exception e) {
+            Log.w(TAG, "Catching exception", e);
             assertNotNull(newActivity);
         }
         assertNotNull(newActivity);

Find a functionally equivalent code:android.graphics.drawable.Ripple.exit:COMMENT
Method Modifier: public      
Comment:/**
 * Starts the exit animation.
 */

@@ -1,5 +1,4 @@
 {
-    cancel();
     final float radius = MathUtils.lerp(0, mOuterRadius, mTweenRadius);
     final float remaining;
     if (mAnimRadius != null && mAnimRadius.isRunning()) {
@@ -7,16 +6,16 @@
     } else {
         remaining = mOuterRadius;
     }
+    cancel();
     final int radiusDuration = (int) (1000 * Math.sqrt(remaining / (WAVE_TOUCH_UP_ACCELERATION + WAVE_TOUCH_DOWN_ACCELERATION) * mDensity) + 0.5);
     final int opacityDuration = (int) (1000 * mOpacity / WAVE_OPACITY_DECAY_VELOCITY + 0.5f);
     if (mCanUseHardware) {
-        exitHardware(radiusDuration, opacityDuration);
+        createPendingHardwareExit(radiusDuration, opacityDuration);
     } else {
         exitSoftware(radiusDuration, opacityDuration);
     }

Find a functionally equivalent code:android.media.AudioService.getStreamVolume:COMMENT
Method Modifier: public      
Comment:/**
 * @see AudioManager#getStreamVolume(int)
 */

@@ -1,13 +1,15 @@
 {
     ensureValidStreamType(streamType);
     int device = getDeviceForStream(streamType);
-    int index = mStreamStates[streamType].getIndex(device);
-    // by convention getStreamVolume() returns 0 when a stream is muted.
-    if (mStreamStates[streamType].isMuted()) {
-        index = 0;
+    synchronized (VolumeStreamState.class) {
+        int index = mStreamStates[streamType].getIndex(device);
+        // by convention getStreamVolume() returns 0 when a stream is muted.
+        if (mStreamStates[streamType].isMuted_syncVSS()) {
+            index = 0;
+        }
+        if (index != 0 && (mStreamVolumeAlias[streamType] == AudioSystem.STREAM_MUSIC) && (device & mFixedVolumeDevices) != 0) {
+            index = mStreamStates[streamType].getMaxIndex();
+        }
+        return (index + 5) / 10;
     }
-    if (index != 0 && (mStreamVolumeAlias[streamType] == AudioSystem.STREAM_MUSIC) && (device & mFixedVolumeDevices) != 0) {
-        index = mStreamStates[streamType].getMaxIndex();
-    }
-    return (index + 5) / 10;
 }

Find a functionally equivalent code:com.android.systemui.recents.misc.SystemServicesProxy.getTaskThumbnail:COMMENT
Method Modifier: public      
Comment:/**
 * Returns the top task thumbnail for the given task id
 */

@@ -9,14 +9,15 @@
     }
     Bitmap thumbnail = SystemServicesProxy.getThumbnail(mAm, taskId);
     if (thumbnail != null) {
+        thumbnail.setHasAlpha(false);
         // screenshots are always composed onto a bitmap that has no alpha.
         if (Color.alpha(thumbnail.getPixel(0, 0)) == 0) {
             mBgProtectionCanvas.setBitmap(thumbnail);

Find a functionally equivalent code:com.android.systemui.recents.RecentsActivity.onDebugModeTriggered:COMMENT
Method Modifier: public      
Comment:/**
 * Called when debug mode is triggered
 */

@@ -6,18 +6,22 @@
             settings.edit().remove(Constants.Values.App.Key_DebugModeEnabled).apply();
             mConfig.debugModeEnabled = false;
             inflateDebugOverlay();
-            mDebugOverlay.disable();
+            if (mDebugOverlay != null) {
+                mDebugOverlay.disable();
+            }
         } else {
             // Enable the debug mode
             settings.edit().putBoolean(Constants.Values.App.Key_DebugModeEnabled, true).apply();
             mConfig.debugModeEnabled = true;
             inflateDebugOverlay();
-            mDebugOverlay.enable();
+            if (mDebugOverlay != null) {
+                mDebugOverlay.enable();
+            }
         }
         Toast.makeText(this, "Debug mode (" + Constants.Values.App.DebugModeVersion + ") " + (mConfig.debugModeEnabled ? "Enabled" : "Disabled") + ", please restart Recents now", Toast.LENGTH_SHORT).show();
     }

Find a functionally equivalent code:android.webkit.WebIconDatabase.open:COMMENT
<android.webkit.WebIconDatabase: void open(String)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Open a the icon database and store the icons in the given path.
 * @param path The directory path where the icon database will be stored.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.server.location.GpsLocationProvider.reportStatus:COMMENT
Method Modifier: private     
Comment:/**
 * called from native code to update our status
 */

@@ -19,25 +19,27 @@
             break;
     }
     if (wasNavigating != mNavigating) {
-        mListenerHelper.onStatusChanged(mNavigating);
+        mListenerHelper.onGpsEnabledChanged(mNavigating);
+        mGpsMeasurementsProvider.onGpsEnabledChanged(mNavigating);
+        mGpsNavigationMessageProvider.onGpsEnabledChanged(mNavigating);
         // send an intent to notify that the GPS has been enabled or disabled
         Intent intent = new Intent(LocationManager.GPS_ENABLED_CHANGE_ACTION);
         intent.putExtra(LocationManager.EXTRA_GPS_ENABLED, mNavigating);

Find a functionally equivalent code:com.android.internal.widget.ExploreByTouchHelper.getVisibleVirtualViews:COMMENT
Method Modifier: protected   abstract    internal    
Comment:/**
 * Populates a list with the view's visible items. The ordering of items
 * within {@code virtualViewIds} specifies order of accessibility focus
 * traversal.
 *
 * @param virtualViewIds The list to populate with visible items
 */


Find a functionally equivalent code:com.android.systemui.recents.views.TaskStackView.dismissFocusedTask:COMMENT
Method Modifier: public      
Comment:/**
 * Dismisses the focused task.
 */

@@ -1,7 +1,9 @@
 {
-    // Return early if there is no focused task index
-    if (mFocusedTaskIndex < 0)
+    // Return early if the focused task index is invalid
+    if (mFocusedTaskIndex < 0 || mFocusedTaskIndex >= mStack.getTaskCount()) {
+        mFocusedTaskIndex = -1;
         return;
+    }
     Task t = mStack.getTasks().get(mFocusedTaskIndex);
     TaskView tv = getChildViewForTask(t);
     tv.dismissTask();

Find a functionally equivalent code:android.content.pm.PackageManagerTests.testUpgradeKSWithWrongSigningKey:COMMENT
Method Modifier: public      
Comment:/*
     * Check if an apk signed by its signing key, which is not an upgrade key,
     * can upgrade an app.
     */

@@ -1,3 +1,3 @@
 {
-    replaceCerts(R.raw.keyset_sa_ub, R.raw.keyset_sa_ub, true, true, PackageManager.INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES);
+    replaceCerts(R.raw.keyset_sa_ub, R.raw.keyset_sa_ub, true, true, PackageManager.INSTALL_FAILED_UPDATE_INCOMPATIBLE);
 }

Find a functionally equivalent code:android.widget.Switch.stopDrag:COMMENT
Method Modifier: private     
Comment:/**
 * Called from onTouchEvent to end a drag operation.
 *
 * @param ev Event that triggered the end of drag mode - ACTION_UP or ACTION_CANCEL
 */

@@ -3,8 +3,9 @@
     // Commit the change if the event is up and not canceled and the switch
     // has not been disabled during the drag.
     final boolean commitChange = ev.getAction() == MotionEvent.ACTION_UP && isEnabled();
+    final boolean oldState = isChecked();
     final boolean newState;
     if (commitChange) {
         mVelocityTracker.computeCurrentVelocity(1000);
@@ -13,20 +14,24 @@
             newState = getTargetCheckedState();
         }
     } else {
-        newState = isChecked();
+        newState = oldState;
     }
-    setChecked(newState);
+    if (newState != oldState) {
+        playSoundEffect(SoundEffectConstants.CLICK);
+        setChecked(newState);
+    }
     cancelSuperTouch(ev);
 }

Find a functionally equivalent code:com.android.layoutlib.bridge.impl.RenderSessionImpl.init:COMMENT
Method Modifier: public      
Comment:/**
 * Initializes and acquires the scene, creating various Android objects such as context,
 * inflater, and parser.
 *
 * @param timeout the time to wait if another rendering is happening.
 *
 * @return whether the scene was prepared
 *
 * @see #acquire(long)
 * @see #release()
 */

@@ -8,15 +8,16 @@
     RenderResources resources = getParams().getResources();
     DisplayMetrics metrics = getContext().getMetrics();
     // use default of true in case it's not found to use alpha by default
-    mIsAlphaChannelImage = getBooleanThemeValue(resources, "windowIsFloating", true);
-    mWindowIsFloating = getBooleanThemeValue(resources, "windowIsFloating", true);
+    mIsAlphaChannelImage = getBooleanThemeValue(resources, "windowIsFloating", true, true);
+    // FIXME: Find out why both variables are taking the same value.
+    mWindowIsFloating = getBooleanThemeValue(resources, "windowIsFloating", true, true);
     findBackground(resources);
     findStatusBar(resources, metrics);
     findActionBar(resources, metrics);

Find a functionally equivalent code:com.android.systemui.recents.RecentsActivity.dismissRecentsToHome:COMMENT
Method Modifier: 
Comment:/**
 * Dismisses Recents directly to Home if we currently aren't transitioning.
 */

@@ -1,5 +1,6 @@
 {
-    if (mVisible) {
+    SystemServicesProxy ssp = RecentsTaskLoader.getInstance().getSystemServicesProxy();
+    if (ssp.isRecentsTopMost(ssp.getTopMostTask(), null)) {
         // Return to Home
         dismissRecentsToHomeRaw(animated);
         return true;

Find a functionally equivalent code:android.preference.ListPreference.getSummary:COMMENT
Method Modifier: public      
Comment:/**
 * Returns the summary of this ListPreference. If the summary
 * has a {@linkplain java.lang.String#format String formatting}
 * marker in it (i.e. "%s" or "%1$s"), then the current entry
 * value will be substituted in its place.
 *
 * @return the summary with appropriate string substitution
 */

@@ -1,8 +1,8 @@
 {
     final CharSequence entry = getEntry();
-    if (mSummary == null || entry == null) {
+    if (mSummary == null) {
         return super.getSummary();
     } else {
-        return String.format(mSummary, entry);
+        return String.format(mSummary, entry == null ? "" : entry);
     }
 }

Find a functionally equivalent code:android.widget.PopupWindow.setBackgroundDrawable:COMMENT
Method Modifier: public      
Comment:/**
 * Specifies the background drawable for this popup window. The background
 * can be set to {@code null}.
 *
 * @param background the popup's background
 * @see #getBackground()
 * @attr ref android.R.styleable#PopupWindow_popupBackground
 */

@@ -1,3 +1,27 @@
 {
     mBackground = background;
+    // at least one other drawable, intended for the 'below-anchor state'.
+    if (mBackground instanceof StateListDrawable) {
+        StateListDrawable stateList = (StateListDrawable) mBackground;
+        // Find the above-anchor view - this one's easy, it should be labeled as such.
+        int aboveAnchorStateIndex = stateList.getStateDrawableIndex(ABOVE_ANCHOR_STATE_SET);
+        // Now, for the below-anchor view, look for any other drawable specified in the
+        // StateListDrawable which is not for the above-anchor state and use that.
+        int count = stateList.getStateCount();
+        int belowAnchorStateIndex = -1;
+        for (int i = 0; i < count; i++) {
+            if (i != aboveAnchorStateIndex) {
+                belowAnchorStateIndex = i;
+                break;
+            }
+        }
+        // to null so that we'll just use refreshDrawableState.
+        if (aboveAnchorStateIndex != -1 && belowAnchorStateIndex != -1) {
+            mAboveAnchorBackgroundDrawable = stateList.getStateDrawable(aboveAnchorStateIndex);
+            mBelowAnchorBackgroundDrawable = stateList.getStateDrawable(belowAnchorStateIndex);
+        } else {
+            mBelowAnchorBackgroundDrawable = null;
+            mAboveAnchorBackgroundDrawable = null;
+        }
+    }
 }

Find a functionally equivalent code:com.android.server.media.MediaSessionStack.addSession:COMMENT
Method Modifier: public      
Comment:/**
 * Add a record to the priority tracker.
 *
 * @param record The record to add.
 */

@@ -1,4 +1,5 @@
 {
     mSessions.add(record);
     clearCache();
+    mLastInterestingRecord = record;
 }

Find a functionally equivalent code:com.android.systemui.volume.VolumePanel.onVolumeChanged:COMMENT
Method Modifier: protected   
Comment:/**
 * Override this if you have other work to do when the volume changes (for
 * example, vibrating, playing a sound, etc.). Make sure to call through to
 * the superclass implementation.
 */

@@ -1,6 +1,6 @@
 {
     if (LOGD)
-        Log.d(mTag, "onVolumeChanged(streamType: " + streamType + ", flags: " + flags + ")");
+        Log.d(mTag, "onVolumeChanged(streamType: " + streamToString(streamType) + ", flags: " + flagsToString(flags) + ")");
     if ((flags & AudioManager.FLAG_SHOW_UI) != 0) {
         synchronized (this) {
             if (mActiveStreamType != streamType) {

Find a functionally equivalent code:android.media.AudioService.sendMasterMuteUpdate:COMMENT
Method Modifier: private     
Comment:// UI update and Broadcast Intent

@@ -1,4 +1,4 @@
 {
-    mVolumeController.postMasterMuteChanged(flags);
+    mVolumeController.postMasterMuteChanged(updateFlagsForSystemAudio(flags));
     broadcastMasterMuteStatus(muted);
 }

Find a functionally equivalent code:android.view.ViewGroup.removeView:COMMENT
Method Modifier: public      
Comment:/**
 * {@inheritDoc}
 *
 * <p><strong>Note:</strong> do not invoke this method from
 * {@link #draw(android.graphics.Canvas)}, {@link #onDraw(android.graphics.Canvas)},
 * {@link #dispatchDraw(android.graphics.Canvas)} or any related method.</p>
 */

@@ -1,5 +1,6 @@
 {
-    removeViewInternal(view);
-    requestLayout();
-    invalidate(true);
+    if (removeViewInternal(view)) {
+        requestLayout();
+        invalidate(true);
+    }
 }

Find a functionally equivalent code:android.webkit.WebSettings.setPluginsPath:COMMENT
Method Modifier: public      hidden      deprecated  
Comment:/**
 * Sets a custom path to plugins used by the WebView. This method is
 * obsolete since each plugin is now loaded from its own package.
 *
 * @param pluginsPath a String path to the directory containing plugins
 * @deprecated This method is no longer used as plugins are loaded from
 * their own APK via the system's package manager.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}
 */


Find a functionally equivalent code:com.android.server.media.MediaSessionStack.onPlaystateChange:COMMENT
Method Modifier: public      
Comment:/**
 * Notify the priority tracker that a session's state changed.
 *
 * @param record The record that changed.
 * @param oldState Its old playback state.
 * @param newState Its new playback state.
 * @return true if the priority order was updated, false otherwise.
 */

@@ -3,8 +3,11 @@
         mSessions.remove(record);
         mSessions.add(0, record);
         clearCache();
+        // This becomes the last interesting record since it entered a
+        // playing state
+        mLastInterestingRecord = record;
         return true;
     } else if (!MediaSession.isActiveState(newState)) {
         // Just clear the volume cache when a state goes inactive

Find a functionally equivalent code:android.animation.Keyframes.getKeyframes:COMMENT
Method Modifier: 
Comment:/**
 * @return A list of all Keyframes contained by this. This may return null if this is
 * not made up of Keyframes.
 */


Find a functionally equivalent code:android.animation.ValueAnimator.endAnimation:COMMENT
Method Modifier: protected   hidden      
Comment:/**
 * Called internally to end an animation by removing it from the animations list. Must be
 * called on the UI thread.
 * @hide
 */

@@ -19,24 +19,26 @@
     mStarted = false;
     mStartListenersCalled = false;
     mPlayingBackwards = false;
+    mReversing = false;
+    mCurrentIteration = 0;
     if (Trace.isTagEnabled(Trace.TRACE_TAG_VIEW)) {
         Trace.asyncTraceEnd(Trace.TRACE_TAG_VIEW, getNameForTrace(), System.identityHashCode(this));
     }

Find a functionally equivalent code:android.media.AudioAttributes.Builder.setUsage:COMMENT
Method Modifier: public      
Comment:/**
 * Sets the attribute describing what is the intended use of the the audio signal,
 * such as alarm or ringtone.
 * @param usage one of {@link AudioAttributes#USAGE_UNKNOWN},
 * {@link AudioAttributes#USAGE_MEDIA},
 * {@link AudioAttributes#USAGE_VOICE_COMMUNICATION},
 * {@link AudioAttributes#USAGE_VOICE_COMMUNICATION_SIGNALLING},
 * {@link AudioAttributes#USAGE_ALARM}, {@link AudioAttributes#USAGE_NOTIFICATION},
 * {@link AudioAttributes#USAGE_NOTIFICATION_RINGTONE},
 * {@link AudioAttributes#USAGE_NOTIFICATION_COMMUNICATION_REQUEST},
 * {@link AudioAttributes#USAGE_NOTIFICATION_COMMUNICATION_INSTANT},
 * {@link AudioAttributes#USAGE_NOTIFICATION_COMMUNICATION_DELAYED},
 * {@link AudioAttributes#USAGE_NOTIFICATION_EVENT},
 * {@link AudioAttributes#USAGE_ASSISTANCE_ACCESSIBILITY},
 * {@link AudioAttributes#USAGE_ASSISTANCE_NAVIGATION_GUIDANCE},
 * {@link AudioAttributes#USAGE_ASSISTANCE_SONIFICATION},
 * {@link AudioAttributes#USAGE_GAME}.
 * @return the same Builder instance.
 */

@@ -15,20 +15,21 @@
         case USAGE_ASSISTANCE_NAVIGATION_GUIDANCE:
         case USAGE_ASSISTANCE_SONIFICATION:
         case USAGE_GAME:
+        case USAGE_VIRTUAL_SOURCE:
             mUsage = usage;
             break;
         default:

Find a functionally equivalent code:com.android.systemui.recents.views.AnimateableViewBounds.setClipBottom:COMMENT
Method Modifier: public      
Comment:/**
 * Sets the bottom clip.
 */

@@ -4,10 +4,10 @@
         mSourceView.invalidateOutline();
         updateClipBounds();
         if (!mConfig.useHardwareLayers) {
-            mSourceView.mThumbnailView.updateVisibility(bottom - mSourceView.getPaddingBottom());
+            mSourceView.mThumbnailView.updateThumbnailVisibility(bottom - mSourceView.getPaddingBottom());
         }
     }
 }

Find a functionally equivalent code:android.telephony.PhoneNumberUtils.getDefaultVoiceSubId:COMMENT
Method Modifier: private     static      
Comment:/**
 * Returns Default voice subscription Id.
 */


Find a functionally equivalent code:android.widget.TextView.shouldSpeakPasswordsForAccessibility:COMMENT
Method Modifier: private     
Comment:/**
 * @return true if the user has explicitly allowed accessibility services
 * to speak passwords.
 */

@@ -1,3 +1,3 @@
 {
-    return (Settings.Secure.getInt(mContext.getContentResolver(), Settings.Secure.ACCESSIBILITY_SPEAK_PASSWORD, 0) == 1);
+    return (Settings.Secure.getIntForUser(mContext.getContentResolver(), Settings.Secure.ACCESSIBILITY_SPEAK_PASSWORD, 0, UserHandle.USER_CURRENT_OR_SELF) == 1);
 }

Find a functionally equivalent code:android.util.PathParser.PathDataNode.nodesToPath:COMMENT
Method Modifier: public      static      
Comment:/**
 * Convert an array of PathDataNode to Path.
 *
 * @param node The source array of PathDataNode.
 * @param path The target Path object.
 */

@@ -1,5 +1,5 @@
 {
-    float[] current = new float[4];
+    float[] current = new float[6];
     char previousCommand = 'm';
     for (int i = 0; i < node.length; i++) {
         addCommand(path, current, previousCommand, node[i].mType, node[i].mParams);

Find a functionally equivalent code:android.webkit.CookieManager.removeAllCookies:COMMENT
<android.webkit.CookieManager: void removeAllCookies(ValueCallback<Boolean>)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Removes all cookies.
 * <p>
 * This method is asynchronous.
 * If a {@link ValueCallback} is provided,
 * {@link ValueCallback#onReceiveValue(T) onReceiveValue()} will be called on the current
 * thread's {@link android.os.Looper} once the operation is complete.
 * The value provided to the callback indicates whether any cookies were removed.
 * You can pass {@code null} as the callback if you don't need to know when the operation
 * completes or whether any cookies were removed, and in this case it is safe to call the
 * method from a thread without a Looper.
 * @param callback a callback which is executed when the cookies have been removed
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.server.display.DisplayDeviceInfo.toString:COMMENT
Method Modifier: public      
Comment:// For debugging purposes

@@ -1,7 +1,8 @@
 {
     StringBuilder sb = new StringBuilder();
     sb.append("DisplayDeviceInfo{\"");
-    sb.append(name).append("\": ").append(width).append(" x ").append(height);
+    sb.append(name).append("\": uniqueId=\"").append(uniqueId).append("\", ");
+    sb.append(width).append(" x ").append(height);
     sb.append(", ").append(refreshRate).append(" fps");
     sb.append(", supportedRefreshRates ").append(Arrays.toString(supportedRefreshRates));
     sb.append(", density ").append(densityDpi);

Find a functionally equivalent code:com.android.systemui.recents.RecentsActivity.inflateDebugOverlay:COMMENT
Method Modifier: 
Comment:/**
 * Inflates the debug overlay if debug mode is enabled.
 */

@@ -1,4 +1,6 @@
 {
+    if (!Constants.DebugFlags.App.EnableDebugMode)
+        return;
     if (mConfig.debugModeEnabled && mDebugOverlay == null) {
         // Inflate the overlay and seek bars
         mDebugOverlay = (DebugOverlayView) mDebugOverlayStub.inflate();

Find a functionally equivalent code:android.telephony.SubscriptionManager.setDefaultDataSubId:COMMENT
<android.telephony.SubscriptionManager: void setDefaultDataSubId(long)>
Method Modifier: public      static      hidden      
Method Modifier: Yes         Yes         Yes         
Method Updated:  Yes         No          Yes         
Comment:/**
 * @hide
 */


Find a functionally equivalent code:com.android.connectivitymanagertest.stress.WifiStressTest.testWifiReconnectionAfterSleep:COMMENT
Method Modifier: public      
Comment:// Stress Wifi reconnection to secure net after sleep

@@ -2,8 +2,8 @@
     // set always scan to false
     Settings.Global.putInt(mRunner.getContext().getContentResolver(), Settings.Global.WIFI_SCAN_ALWAYS_AVAILABLE, 0);
     // set wifi sleep policy to never on while in sleep
-    Settings.Global.putInt(mRunner.getContext().getContentResolver(), Settings.Global.WIFI_SLEEP_POLICY, Settings.Global.WIFI_SLEEP_POLICY_NEVER);
+    Settings.Global.putInt(mRunner.getContext().getContentResolver(), Settings.Global.WIFI_SLEEP_POLICY, Settings.Global.WIFI_SLEEP_POLICY_DEFAULT);
     // set idle timeout for wifi to 15s
     Settings.Global.putLong(mRunner.getContext().getContentResolver(), Settings.Global.WIFI_IDLE_MS, WIFI_IDLE_MS);
     WifiConfiguration config;

Find a functionally equivalent code:com.android.systemui.recents.views.TaskView.startEnterRecentsAnimation:COMMENT
Method Modifier: 
Comment:/**
 * Animates this task view as it enters recents
 */

@@ -1,90 +1,32 @@
 {
     final TaskViewTransform transform = ctx.currentTaskTransform;
     int startDelay = 0;
-    if (mConfig.launchedFromAppWithScreenshot) {
+    if (mConfig.launchedFromAppWithThumbnail) {
         if (mTask.isLaunchTarget) {
-            Rect taskRect = ctx.currentTaskRect;
-            int duration = mConfig.taskViewEnterFromHomeDuration * 10;
-            // XXX: Should be for the window
-            int windowInsetTop = mConfig.systemInsets.top;
-            float taskScale = ((float) taskRect.width() / getMeasuredWidth()) * transform.scale;
-            float scaledYOffset = ((1f - taskScale) * getMeasuredHeight()) / 2;
-            float scaledWindowInsetTop = (int) (taskScale * windowInsetTop);
-            float scaledTranslationY = taskRect.top + transform.translationY - (scaledWindowInsetTop + scaledYOffset);
-            startDelay = mConfig.taskViewEnterFromHomeStaggerDelay;
-            // Animate the top clip
-            mViewBounds.animateClipTop(windowInsetTop, duration, new ValueAnimator.AnimatorUpdateListener() {
-
-                @Override
-                public void onAnimationUpdate(ValueAnimator animation) {
-                    int y = (Integer) animation.getAnimatedValue();
-                    mHeaderView.setTranslationY(y);
-                }
-            });
-            // Animate the bottom or right clip
-            int size = Math.round((taskRect.width() / taskScale));
-            if (mConfig.hasHorizontalLayout()) {
-                mViewBounds.animateClipRight(getMeasuredWidth() - size, duration);
-            } else {
-                mViewBounds.animateClipBottom(getMeasuredHeight() - (windowInsetTop + size), duration);
-            }
-            // Animate the task bar of the first task view
-            animate().scaleX(taskScale).scaleY(taskScale).translationY(scaledTranslationY).setDuration(duration).withEndAction(new Runnable() {
-
-                @Override
-                public void run() {
-                    setIsFullScreen(false);
-                    requestLayout();
-                    // Reset the clip
-                    mViewBounds.setClipTop(0);
-                    mViewBounds.setClipBottom(0);
-                    mViewBounds.setClipRight(0);
-                    // Reset the bar translation
-                    mHeaderView.setTranslationY(0);
-                    // Animate the footer into view (if it is the front most task)
-                    animateFooterVisibility(true, mConfig.taskBarEnterAnimDuration);
-                    // Unbind the thumbnail from the screenshot
-                    RecentsTaskLoader.getInstance().loadTaskData(mTask);
-                    // Recycle the full screen screenshot
-                    AlternateRecentsComponent.consumeLastScreenshot();
-                    mCb.onTaskViewFullScreenTransitionCompleted();
-                    // Decrement the post animation trigger
-                    ctx.postAnimationTrigger.decrement();
-                }
-            }).start();
-        } else {
-            // Animate the footer into view
-            animateFooterVisibility(true, 0);
-        }
-        ctx.postAnimationTrigger.increment();
-    } else if (mConfig.launchedFromAppWithThumbnail) {
-        if (mTask.isLaunchTarget) {
             // Animate the dim/overlay
             if (Constants.DebugFlags.App.EnableThumbnailAlphaOnFrontmost) {
                 // Animate the thumbnail alpha before the dim animation (to prevent updating the
                 // hardware layer)
-                mThumbnailView.startEnterRecentsAnimation(mConfig.taskBarEnterAnimDelay, new Runnable() {
+                mThumbnailView.startEnterRecentsAnimation(mConfig.transitionEnterFromAppDelay, new Runnable() {
 
                     @Override
                     public void run() {
-                        animateDimToProgress(0, mConfig.taskBarEnterAnimDuration, ctx.postAnimationTrigger.decrementOnAnimationEnd());
+                        animateDimToProgress(0, mConfig.taskViewEnterFromAppDuration, ctx.postAnimationTrigger.decrementOnAnimationEnd());
                     }
                 });
             } else {
                 // Immediately start the dim animation
-                animateDimToProgress(mConfig.taskBarEnterAnimDelay, mConfig.taskBarEnterAnimDuration, ctx.postAnimationTrigger.decrementOnAnimationEnd());
+                animateDimToProgress(mConfig.transitionEnterFromAppDelay, mConfig.taskViewEnterFromAppDuration, ctx.postAnimationTrigger.decrementOnAnimationEnd());
             }
             ctx.postAnimationTrigger.increment();
-            // Animate the footer into view
-            animateFooterVisibility(true, mConfig.taskBarEnterAnimDuration);
             // Animate the action button in
-            mActionButtonView.animate().alpha(1f).setStartDelay(mConfig.taskBarEnterAnimDelay).setDuration(mConfig.taskBarEnterAnimDuration).setInterpolator(mConfig.fastOutLinearInInterpolator).withLayer().start();
+            fadeInActionButton(mConfig.transitionEnterFromAppDelay, mConfig.taskViewEnterFromAppDuration);
         } else {
             // Animate the task up if it was occluding the launch target
             if (ctx.currentTaskOccludesLaunchTarget) {
                 setTranslationY(transform.translationY + mConfig.taskViewAffiliateGroupEnterOffsetPx);
                 setAlpha(0f);
-                animate().alpha(1f).translationY(transform.translationY).setStartDelay(mConfig.taskBarEnterAnimDelay).setUpdateListener(null).setInterpolator(mConfig.fastOutSlowInInterpolator).setDuration(mConfig.taskViewEnterFromHomeDuration).withEndAction(new Runnable() {
+                animate().alpha(1f).translationY(transform.translationY).setStartDelay(mConfig.transitionEnterFromAppDelay).setUpdateListener(null).setInterpolator(mConfig.fastOutSlowInInterpolator).setDuration(mConfig.taskViewEnterFromHomeDuration).withEndAction(new Runnable() {
 
                     @Override
                     public void run() {
@@ -95,105 +37,47 @@
                 ctx.postAnimationTrigger.increment();
             }
         }
-        startDelay = mConfig.taskBarEnterAnimDelay;
+        startDelay = mConfig.transitionEnterFromAppDelay;
     } else if (mConfig.launchedFromHome) {
         // Animate the tasks up
         int frontIndex = (ctx.currentStackViewCount - ctx.currentStackViewIndex - 1);
-        int delay = mConfig.taskViewEnterFromHomeDelay + frontIndex * mConfig.taskViewEnterFromHomeStaggerDelay;
+        int delay = mConfig.transitionEnterFromHomeDelay + frontIndex * mConfig.taskViewEnterFromHomeStaggerDelay;
         setScaleX(transform.scale);
         setScaleY(transform.scale);
         if (!mConfig.fakeShadows) {
@@ -114,125 +56,62 @@
             }
         }).start();
         ctx.postAnimationTrigger.increment();
-        // Animate the footer into view
-        animateFooterVisibility(true, mConfig.taskViewEnterFromHomeDuration);
         startDelay = delay;
-    } else {
-        // Animate the footer into view
-        animateFooterVisibility(true, 0);
     }
     // Enable the focus animations from this point onwards so that they aren't affected by the
     // window transitions
@@ -129,133 +66,70 @@
         public void run() {
             enableFocusAnimations();
         }
-    }, (startDelay / 2));
+    }, startDelay);
 }

Find a functionally equivalent code:com.android.internal.widget.ExploreByTouchHelper.createNodeForHost:COMMENT
Method Modifier: private     internal    
Comment:/**
 * Constructs and returns an {@link AccessibilityNodeInfo} for the
 * host view populated with its virtual descendants.
 *
 * @return An {@link AccessibilityNodeInfo} for the parent node.
 */

@@ -2,11 +2,17 @@
     final AccessibilityNodeInfo node = AccessibilityNodeInfo.obtain(mView);
     onInitializeAccessibilityNodeInfo(mView, node);
     // Add the virtual descendants.
-    final LinkedList<Integer> virtualViewIds = new LinkedList<Integer>();
+    if (mTempArray == null) {
+        mTempArray = new IntArray();
+    } else {
+        mTempArray.clear();
+    }
+    final IntArray virtualViewIds = mTempArray;
     getVisibleVirtualViews(virtualViewIds);
-    for (Integer childVirtualViewId : virtualViewIds) {
-        node.addChild(mView, childVirtualViewId);
+    final int N = virtualViewIds.size();
+    for (int i = 0; i < N; i++) {
+        node.addChild(mView, virtualViewIds.get(i));
     }
     return node;
 }

Find a functionally equivalent code:com.android.internal.policy.impl.PhoneWindowManager.checkAddPermission:COMMENT
Method Modifier: public      internal    
Comment:/**
 * {@inheritDoc}
 */

@@ -1,7 +1,11 @@
 {
     int type = attrs.type;
     outAppOp[0] = AppOpsManager.OP_NONE;
-    if (type < WindowManager.LayoutParams.FIRST_SYSTEM_WINDOW || type > WindowManager.LayoutParams.LAST_SYSTEM_WINDOW) {
+    if (!((type >= FIRST_APPLICATION_WINDOW && type <= LAST_APPLICATION_WINDOW) || (type >= FIRST_SUB_WINDOW && type <= LAST_SUB_WINDOW) || (type >= FIRST_SYSTEM_WINDOW && type <= LAST_SYSTEM_WINDOW))) {
+        return WindowManagerGlobal.ADD_INVALID_TYPE;
+    }
+    if (type < FIRST_SYSTEM_WINDOW || type > LAST_SYSTEM_WINDOW) {
+        // Window manager will make sure these are okay.
         return WindowManagerGlobal.ADD_OKAY;
     }
     String permission = null;
@@ -17,22 +21,27 @@
         case TYPE_WALLPAPER:
         case TYPE_PRIVATE_PRESENTATION:
         case TYPE_VOICE_INTERACTION:
+        case TYPE_ACCESSIBILITY_OVERLAY:
             // The window manager will check these.
             break;
         case TYPE_PHONE:

Find a functionally equivalent code:android.view.Surface.release:COMMENT
Method Modifier: public      
Comment:/**
 * Release the local reference to the server-side surface.
 * Always call release() when you're done with a Surface.
 * This will make the surface invalid.
 */

@@ -4,8 +4,12 @@
             nativeRelease(mNativeObject);
             setNativeObjectLocked(0);
         }
+        if (mHwuiContext != null) {
+            mHwuiContext.destroy();
+            mHwuiContext = null;
+        }
     }
 }

Find a functionally equivalent code:android.widget.SearchView.setImeOptions:COMMENT
Method Modifier: public      
Comment:/**
 * Sets the IME options on the query text field.
 *
 * @see TextView#setImeOptions(int)
 * @param imeOptions the options to set on the query text field
 *
 * @attr ref android.R.styleable#SearchView_imeOptions
 */

@@ -1,3 +1,3 @@
 {
-    mQueryTextView.setImeOptions(imeOptions);
+    mSearchSrcTextView.setImeOptions(imeOptions);
 }

Find a functionally equivalent code:android.widget.SearchView.setSuggestionsAdapter:COMMENT
Method Modifier: public      
Comment:/**
 * You can set a custom adapter if you wish. Otherwise the default adapter is used to
 * display the suggestions from the suggestions provider associated with the SearchableInfo.
 *
 * @see #setSearchableInfo(SearchableInfo)
 */

@@ -1,4 +1,4 @@
 {
     mSuggestionsAdapter = adapter;
-    mQueryTextView.setAdapter(mSuggestionsAdapter);
+    mSearchSrcTextView.setAdapter(mSuggestionsAdapter);
 }

Find a functionally equivalent code:android.view.accessibility.AccessibilityWindowInfo.isAccessibilityFocused:COMMENT
Method Modifier: public      
Comment:/**
 * Gets if this window has accessibility focus.
 *
 * @return Whether has accessibility focus.
 */

@@ -1,3 +1,3 @@
 {
-    return getBooleanProperty(BOOLEAN_PROPERTY_ACCESSIBLITY_FOCUSED);
+    return getBooleanProperty(BOOLEAN_PROPERTY_ACCESSIBILITY_FOCUSED);
 }

Find a functionally equivalent code:android.telephony.SubscriptionManager.setDefaultVoiceSubId:COMMENT
<android.telephony.SubscriptionManager: void setDefaultVoiceSubId(long)>
Method Modifier: public      static      hidden      
Method Modifier: Yes         Yes         Yes         
Method Updated:  Yes         No          Yes         
Comment:/**
 * @hide
 */


Find a functionally equivalent code:android.view.ViewGroup.addViewInLayout:COMMENT
Method Modifier: protected   
Comment:/**
 * Adds a view during layout. This is useful if in your onLayout() method,
 * you need to add more views (as does the list view for example).
 *
 * If index is negative, it means put it at the end of the list.
 *
 * @param child the view to add to the group
 * @param index the index at which the child must be added
 * @param params the layout parameters to associate with the child
 * @return true if the child was added, false otherwise
 */


Find a functionally equivalent code:com.android.systemui.statusbar.phone.KeyguardAffordanceHelper.Callback.onAnimationToSideStarted:COMMENT
Method Modifier: 
Comment:/**
 * Notifies the callback when an animation to a side page was started.
 *
 * @param rightPage Is the page animated to the right page?
 */


Find a functionally equivalent code:android.webkit.WebSettings.getBlockNetworkImage:COMMENT
<android.webkit.WebSettings: boolean getBlockNetworkImage()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets whether the WebView does not load image resources from the network.
 *
 * @return true if the WebView does not load image resources from the network
 * @see #setBlockNetworkImage
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.media.session.MediaSession.setMetadata:COMMENT
Method Modifier: public      
Comment:/**
 * Update the current metadata. New metadata can be created using
 * {@link android.media.MediaMetadata.Builder}.
 *
 * @param metadata The new metadata
 */

@@ -1,4 +1,7 @@
 {
+    if (metadata != null) {
+        metadata = (new MediaMetadata.Builder(metadata, mMaxBitmapSize)).build();
+    }
     try {
         mBinder.setMetadata(metadata);
     } catch (RemoteException e) {

Find a functionally equivalent code:com.android.systemui.recents.views.TaskViewThumbnail.unbindFromTask:COMMENT
Method Modifier: 
Comment:/**
 * Unbinds the thumbnail view from the task
 */

@@ -1,3 +1,3 @@
 {
-    setImageBitmap(null);
+    setThumbnail(null);
 }

Find a functionally equivalent code:android.webkit.WebView.evaluateJavascript:COMMENT
Method Modifier: public      
Comment:/**
 * Asynchronously evaluates JavaScript in the context of the currently displayed page.
 * If non-null, |resultCallback| will be invoked with any result returned from that
 * execution. This method must be called on the UI thread and the callback will
 * be made on the UI thread.
 *
 * @param script the JavaScript to execute.
 * @param resultCallback A callback to be invoked when the script execution
 * completes with the result of the execution (if any).
 * May be null if no notificaion of the result is required.
 */

@@ -1,6 +1,6 @@
 {
     checkThread();
-    if (DebugFlags.TRACE_API)
+    if (TRACE)
         Log.d(LOGTAG, "evaluateJavascript=" + script);
     mProvider.evaluateJavaScript(script, resultCallback);
 }

Find a functionally equivalent code:com.android.server.wm.WindowManagerService.saveANRStateLocked:COMMENT
Method Modifier: public      
Comment:/**
 * Saves information about the state of the window manager at
 * the time an ANR occurred before anything else in the system changes
 * in response.
 *
 * @param appWindowToken The application that ANR'd, may be null.
 * @param windowState The window that ANR'd, may be null.
 * @param reason The reason for the ANR, may be null.
 */

@@ -13,18 +13,23 @@
     }
     pw.println();
     dumpWindowsNoHeaderLocked(pw, true, null);
+    pw.println();
+    pw.println("Last ANR continued");
+    dumpDisplayContentsLocked(pw, true);
     pw.close();
     mLastANRState = sw.toString();
+    mH.removeMessages(H.RESET_ANR_MESSAGE);
+    mH.sendEmptyMessageDelayed(H.RESET_ANR_MESSAGE, LAST_ANR_LIFETIME_DURATION_MSECS);
 }

Find a functionally equivalent code:android.webkit.WebSettings.getSaveFormData:COMMENT
<android.webkit.WebSettings: boolean getSaveFormData()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets whether the WebView saves form data.
 *
 * @return whether the WebView saves form data
 * @see #setSaveFormData
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:com.android.systemui.recents.views.TaskStackView.startExitToHomeAnimation:COMMENT
Method Modifier: public      
Comment:/**
 * Requests this task stacks to start it's exit-recents animation.
 */

@@ -9,14 +9,12 @@
         TaskView tv = (TaskView) getChildAt(i);
         tv.startExitToHomeAnimation(ctx);
     }
-    // Add a runnable to the post animation ref counter to clear all the views
-    ctx.postAnimationTrigger.addLastDecrementRunnable(mReturnAllViewsToPoolRunnable);
 }

Find a functionally equivalent code:android.appwidget.AppWidgetHost.createView:COMMENT
Method Modifier: public      final       
Comment:/**
 * Create the AppWidgetHostView for the given widget.
 * The AppWidgetHost retains a pointer to the newly-created View.
 */

@@ -1,5 +1,5 @@
 {
-    AppWidgetHostView view = onCreateView(mContext, appWidgetId, appWidget);
+    AppWidgetHostView view = onCreateView(context, appWidgetId, appWidget);
     view.setOnClickHandler(mOnClickHandler);
     view.setAppWidget(appWidgetId, appWidget);
     synchronized (mViews) {
@@ -7,13 +7,13 @@
     }
     RemoteViews views;
     try {
-        views = sService.getAppWidgetViews(mContext.getOpPackageName(), appWidgetId);
+        views = sService.getAppWidgetViews(mContextOpPackageName, appWidgetId);
     } catch (RemoteException e) {
         throw new RuntimeException("system server dead?", e);
     }

Find a functionally equivalent code:com.android.server.hdmi.SendKeyAction.processKeyEvent:COMMENT
Method Modifier: 
Comment:/**
 * Called when a key event should be handled for the action.
 *
 * @param keycode key code of {@link KeyEvent} object
 * @param isPressed true if the key event is of {@link KeyEvent#ACTION_DOWN}
 */

@@ -1,22 +1,30 @@
 {
-    if (mState != STATE_PROCESSING_KEYCODE) {
+    if (mState != STATE_CHECKING_LONGPRESS && mState != STATE_PROCESSING_KEYCODE) {
         Slog.w(TAG, "Not in a valid state");
         return;
     }
-    // command and terminate the action. Other release events are ignored.
     if (isPressed) {
+        // one becomes a new key code to be used for press-and-hold operation.
         if (keycode != mLastKeycode) {
             sendKeyDown(keycode);
+            mLastSendKeyTime = getCurrentTime();
             if (!HdmiCecKeycode.isRepeatableKey(keycode)) {
                 sendKeyUp();
                 finish();
                 return;
             }
-            mActionTimer.clearTimerMessage();
-            addTimer(mState, IRT_MS);
-            mLastKeycode = keycode;
+        } else {
+            // press-and-hold key transmission.
+            if (getCurrentTime() - mLastSendKeyTime >= IRT_MS) {
+                sendKeyDown(keycode);
+                mLastSendKeyTime = getCurrentTime();
+            }
         }
+        mActionTimer.clearTimerMessage();
+        addTimer(mState, AWAIT_RELEASE_KEY_MS);
+        mLastKeycode = keycode;
     } else {
+        // command and terminate the action. Other release events are ignored.
         if (keycode == mLastKeycode) {
             sendKeyUp();
             finish();

Find a functionally equivalent code:android.content.res.BridgeTypedArray.getResourceId:COMMENT
Method Modifier: public      
Comment:/**
 * Retrieve the resource identifier for the attribute at
 * <var>index</var>.  Note that attribute resource as resolved when
 * the overall {@link TypedArray} object is retrieved.  As a
 * result, this function will return the resource identifier of the
 * final resource value that was found, <em>not</em> necessarily the
 * original resource that was specified by the attribute.
 *
 * @param index Index of attribute to retrieve.
 * @param defValue Value to return if the attribute is not defined or
 * not a resource.
 *
 * @return Attribute resource identifier, or defValue if not defined.
 */

@@ -41,53 +41,64 @@
     if (value.startsWith("@id/") || value.startsWith("@+") || value.startsWith("@android:id/")) {
         int pos = value.indexOf('/');
         String idName = value.substring(pos + 1);
-        // if this is a framework id
-        if (mPlatformFile || value.startsWith("@android") || value.startsWith("@+android")) {
-            // look for idName in the android R classes
+        boolean create = value.startsWith("@+");
+        boolean isFrameworkId = mPlatformFile || value.startsWith("@android") || value.startsWith("@+android");
+        // Look for the idName in project or android R class depending on isPlatform.
+        if (create) {
+            Integer idValue;
+            if (isFrameworkId) {
+                idValue = Bridge.getResourceId(ResourceType.ID, idName);
+            } else {
+                idValue = mContext.getProjectCallback().getResourceId(ResourceType.ID, idName);
+            }
+            return idValue == null ? defValue : idValue;
+        }
+        // one is not found.
+        if (isFrameworkId) {
             return mContext.getFrameworkResourceValue(ResourceType.ID, idName, defValue);
+        } else {
+            return mContext.getProjectResourceValue(ResourceType.ID, idName, defValue);
         }
-        // look for idName in the project R class.
-        return mContext.getProjectResourceValue(ResourceType.ID, idName, defValue);
     }
     // not a direct id valid reference? resolve it
     Integer idValue;

Find a functionally equivalent code:android.webkit.WebSettings.setEnableSmoothTransition:COMMENT
<android.webkit.WebSettings: void setEnableSmoothTransition(boolean)>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
Comment:/**
 * Sets whether the WebView will enable smooth transition while panning or
 * zooming or while the window hosting the WebView does not have focus.
 * If it is true, WebView will choose a solution to maximize the performance.
 * e.g. the WebView's content may not be updated during the transition.
 * If it is false, WebView will keep its fidelity. The default value is false.
 *
 * @deprecated This method is now obsolete, and will become a no-op in future.
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.webkit.WebSettings.getStandardFontFamily:COMMENT
<android.webkit.WebSettings: String getStandardFontFamily()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
Comment:/**
 * Gets the standard font family name.
 *
 * @return the standard font family name as a string
 * @see #setStandardFontFamily
 */

@@ -1,3 +1 @@
-{
-    throw new MustOverrideException();
-}
+

Find a functionally equivalent code:android.util.PathParser.getFloats:COMMENT
Method Modifier: private     static      
Comment:/**
 * Parse the floats in the string.
 * This is an optimized version of parseFloat(s.split(",|\\s"));
 *
 * @param s the string containing a command and list of floats
 * @return array of floats
 */

@@ -16,23 +16,23 @@
             if (startPosition < endPosition) {
                 results[count++] = Float.parseFloat(s.substring(startPosition, endPosition));
             }
-            if (result.mEndWithNegSign) {
-                // Keep the '-' sign with next number.
+            if (result.mEndWithNegOrDot) {
+                // Keep the '-' or '.' sign with next number.
                 startPosition = endPosition;
             } else {
                 startPosition = endPosition + 1;
@@ -25,31 +25,30 @@
         }
         return Arrays.copyOf(results, count);
     } catch (NumberFormatException e) {
-        Log.e(LOGTAG, "error in parsing \"" + s + "\"");
-        throw e;
+        throw new RuntimeException("error in parsing \"" + s + "\"", e);
     }
 }

############################################
ms1 public:442
ms2 public:444
ms1 non public:185
ms2 non public:183
total methods:627
both public:441
public2Other:1
other2Public:3
static      ->None            :6
protected   ->private         :1
None->public                  :3
private     ->protected       :1
None->abstract                :130
public      ->private         :1
#####################Modfier Updated Signature#######################
<android.webkit.WebSettings: void setBuiltInZoomControls(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setLoadsImagesAutomatically(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setGeolocationEnabled(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.CookieManager: boolean acceptCookie()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setBlockNetworkLoads(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: String getDefaultTextEncodingName()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebHistoryItem: WebHistoryItem clone()>
Method Modifier: protected   abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.os.BaseBundle: void putBoolean(String,boolean)>
Method Modifier: public      
Method Modifier: No          
Method Updated:  Yes         
<android.webkit.WebSettings: int getDefaultFixedFontSize()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setLightTouchEnabled(boolean)>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
<android.webkit.WebHistoryItem: String getOriginalUrl()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setCursiveFontFamily(String)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebIconDatabase: void requestIconForPageUrl(String,IconListener)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebBackForwardList: WebBackForwardList clone()>
Method Modifier: protected   abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setJavaScriptCanOpenWindowsAutomatically(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebViewDatabase: void clearUsernamePassword()>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
<android.webkit.WebSettings: void setUserAgentString(String)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setAppCacheEnabled(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebIconDatabase: void retainIconForPageUrl(String)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setFixedFontFamily(String)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: String getUserAgentString()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: boolean getMediaPlaybackRequiresUserGesture()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.CookieManager: boolean acceptThirdPartyCookies(WebView)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.telephony.SubscriptionManager: boolean allDefaultsSelected()>
Method Modifier: public      static      hidden      
Method Modifier: Yes         Yes         Yes         
Method Updated:  Yes         No          Yes         
<android.webkit.WebSettings: boolean getDomStorageEnabled()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebViewDatabase: void clearHttpAuthUsernamePassword()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setUserAgent(int)>
Method Modifier: public      abstract    hidden      deprecated  
Method Modifier: Yes         No          Yes         Yes         
Method Updated:  Yes         Yes         Yes         Yes         
<android.webkit.WebBackForwardList: int getSize()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.widget.DayPickerView: boolean goTo(Calendar,boolean,boolean,boolean)>
Method Modifier: public      private     
Method Modifier: Yes         No          
Method Updated:  No          Yes         
<android.webkit.WebIconDatabase: void close()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: String getFantasyFontFamily()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setGeolocationDatabasePath(String)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setDefaultFontSize(int)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: String getFixedFontFamily()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setPluginState(PluginState)>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
<android.webkit.WebSettings: void setDatabaseEnabled(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: int getMinimumLogicalFontSize()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setNavDump(boolean)>
Method Modifier: public      abstract    hidden      deprecated  
Method Modifier: Yes         No          Yes         Yes         
Method Updated:  Yes         Yes         Yes         Yes         
<android.webkit.WebSettings: String getSansSerifFontFamily()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setLoadWithOverviewMode(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setSupportZoom(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: int getUserAgent()>
Method Modifier: public      abstract    hidden      deprecated  
Method Modifier: Yes         No          Yes         Yes         
Method Updated:  Yes         Yes         Yes         Yes         
<android.webkit.WebSettings: void setDatabasePath(String)>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
<android.webkit.CookieManager: void removeExpiredCookie()>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
<android.webkit.WebSettings: void setUseWebViewBackgroundForOverscrollBackground(boolean)>
Method Modifier: public      abstract    hidden      deprecated  
Method Modifier: Yes         No          Yes         Yes         
Method Updated:  Yes         Yes         Yes         Yes         
<android.webkit.WebSettings: void setDefaultFixedFontSize(int)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: boolean enableSmoothTransition()>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
<android.webkit.WebBackForwardList: WebHistoryItem getItemAtIndex(int)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: boolean supportZoom()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebHistoryItem: int getId()>
Method Modifier: public      abstract    hidden      deprecated  
Method Modifier: Yes         No          Yes         Yes         
Method Updated:  Yes         Yes         Yes         Yes         
<android.webkit.WebHistoryItem: Bitmap getFavicon()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.CookieManager: void setAcceptCookie(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebHistoryItem: String getUrl()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: boolean getNavDump()>
Method Modifier: public      abstract    hidden      deprecated  
Method Modifier: Yes         No          Yes         Yes         
Method Updated:  Yes         Yes         Yes         Yes         
<android.webkit.WebSettings: void setNeedInitialFocus(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebViewDatabase: boolean hasFormData()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setFantasyFontFamily(String)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.CookieManager: void removeSessionCookies(ValueCallback<Boolean>)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: boolean getBlockNetworkLoads()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setSaveFormData(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: boolean getAllowFileAccess()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setRenderPriority(RenderPriority)>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
<android.webkit.WebSettings: boolean getAcceptThirdPartyCookies()>
Method Modifier: public      abstract    hidden      
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
<android.webkit.CookieManager: void setAcceptFileSchemeCookiesImpl(boolean)>
Method Modifier: protected   abstract    hidden      
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
<android.webkit.WebIconDatabase: void removeAllIcons()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setBlockNetworkImage(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: boolean getSavePassword()>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
<android.webkit.WebSettings: void setStandardFontFamily(String)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.CookieManager: void setAcceptThirdPartyCookies(WebView,boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setMediaPlaybackRequiresUserGesture(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setDefaultZoom(ZoomDensity)>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
<android.telephony.SubscriptionManager: int getDefaultSmsPhoneId()>
Method Modifier: public      static      hidden      
Method Modifier: Yes         Yes         Yes         
Method Updated:  Yes         No          Yes         
<android.webkit.WebSettings: void setMinimumLogicalFontSize(int)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.CookieManager: boolean allowFileSchemeCookiesImpl()>
Method Modifier: protected   abstract    hidden      
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
<android.webkit.WebSettings: String getSerifFontFamily()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<com.android.systemui.statusbar.phone.PanelView: boolean onEmptySpaceClick(float)>
Method Modifier: protected   private     
Method Modifier: No          Yes         
Method Updated:  Yes         No          
<android.webkit.WebSettings: int getMinimumFontSize()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: LayoutAlgorithm getLayoutAlgorithm()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setCacheMode(int)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setLayoutAlgorithm(LayoutAlgorithm)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: boolean getBuiltInZoomControls()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setTextZoom(int)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setMinimumFontSize(int)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: boolean getLightTouchEnabled()>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
<android.webkit.WebSettings: boolean getJavaScriptCanOpenWindowsAutomatically()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.CookieManager: void removeSessionCookie()>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
<android.webkit.WebSettings: void setPluginsEnabled(boolean)>
Method Modifier: public      abstract    hidden      deprecated  
Method Modifier: Yes         No          Yes         Yes         
Method Updated:  Yes         Yes         Yes         Yes         
<android.webkit.CookieManager: void setCookie(String,String,ValueCallback<Boolean>)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: boolean getPluginsEnabled()>
Method Modifier: public      abstract    hidden      deprecated  
Method Modifier: Yes         No          Yes         Yes         
Method Updated:  Yes         Yes         Yes         Yes         
<android.webkit.WebSettings: void setAcceptThirdPartyCookies(boolean)>
Method Modifier: public      abstract    hidden      
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
<android.webkit.WebSettings: String getCursiveFontFamily()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebViewDatabase: void clearFormData()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.widget.DayPickerView: void setUpListView()>
Method Modifier: protected   private     
Method Modifier: Yes         No          
Method Updated:  No          Yes         
<android.webkit.WebSettings: void setAppCacheMaxSize(long)>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
<android.webkit.WebSettings: void setAllowContentAccess(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setSupportMultipleWindows(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setSerifFontFamily(String)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: int getCacheMode()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebHistoryItem: String getTitle()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: int getTextZoom()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: boolean getUseWideViewPort()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setSavePassword(boolean)>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
<android.webkit.WebSettings: ZoomDensity getDefaultZoom()>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
<android.webkit.WebIconDatabase: void releaseIconForPageUrl(String)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: boolean getJavaScriptEnabled()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.telephony.SubscriptionManager: void setDefaultSmsSubId(long)>
Method Modifier: public      static      hidden      
Method Modifier: Yes         Yes         Yes         
Method Updated:  Yes         No          Yes         
<android.webkit.WebSettings: void setDefaultTextEncodingName(String)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.telephony.SubscriptionManager: int getDefaultDataPhoneId()>
Method Modifier: public      static      hidden      
Method Modifier: Yes         Yes         Yes         
Method Updated:  Yes         No          Yes         
<android.webkit.WebSettings: String getDatabasePath()>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
<android.webkit.WebSettings: boolean getDisplayZoomControls()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: boolean getLoadWithOverviewMode()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setAppCachePath(String)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.os.BaseBundle: boolean[] getBooleanArray(String)>
Method Modifier: public      
Method Modifier: No          
Method Updated:  Yes         
<android.webkit.WebSettings: boolean getUseWebViewBackgroundForOverscrollBackground()>
Method Modifier: public      abstract    hidden      deprecated  
Method Modifier: Yes         No          Yes         Yes         
Method Updated:  Yes         Yes         Yes         Yes         
<android.webkit.WebViewDatabase: boolean hasHttpAuthUsernamePassword()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebViewDatabase: boolean hasUsernamePassword()>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
<android.webkit.WebBackForwardList: WebHistoryItem getCurrentItem()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setUseWideViewPort(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: boolean getLoadsImagesAutomatically()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: boolean getAllowContentAccess()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebBackForwardList: int getCurrentIndex()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setAllowFileAccess(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: boolean supportMultipleWindows()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: int getDefaultFontSize()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebIconDatabase: void bulkRequestIconForPageUrl(ContentResolver,String,IconListener)>
Method Modifier: public      abstract    hidden      
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
<android.webkit.CookieManager: void removeAllCookie()>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
<android.webkit.WebSettings: void setDisplayZoomControls(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setSansSerifFontFamily(String)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.os.BaseBundle: void putBooleanArray(String,boolean[])>
Method Modifier: public      
Method Modifier: No          
Method Updated:  Yes         
<android.webkit.CookieManager: void flush()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: PluginState getPluginState()>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
<android.webkit.WebSettings: boolean getDatabaseEnabled()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setDomStorageEnabled(boolean)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebIconDatabase: void open(String)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.CookieManager: void removeAllCookies(ValueCallback<Boolean>)>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.telephony.SubscriptionManager: void setDefaultDataSubId(long)>
Method Modifier: public      static      hidden      
Method Modifier: Yes         Yes         Yes         
Method Updated:  Yes         No          Yes         
<android.telephony.SubscriptionManager: void setDefaultVoiceSubId(long)>
Method Modifier: public      static      hidden      
Method Modifier: Yes         Yes         Yes         
Method Updated:  Yes         No          Yes         
<android.webkit.WebSettings: boolean getBlockNetworkImage()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: boolean getSaveFormData()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
<android.webkit.WebSettings: void setEnableSmoothTransition(boolean)>
Method Modifier: public      abstract    deprecated  
Method Modifier: Yes         No          Yes         
Method Updated:  Yes         Yes         Yes         
<android.webkit.WebSettings: String getStandardFontFamily()>
Method Modifier: public      abstract    
Method Modifier: Yes         No          
Method Updated:  Yes         Yes         
